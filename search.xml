<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>项目总结</title>
      <link href="/project-summary/"/>
      <url>/project-summary/</url>
      
        <content type="html"><![CDATA[<h2 style="text-align: left;" >权限</h2><h3 id="菜单权限"><a href="#菜单权限" class="headerlink" title="菜单权限"></a>菜单权限</h3><h4 id="账号登陆"><a href="#账号登陆" class="headerlink" title="账号登陆"></a>账号登陆</h4><p>传递账号、密码、时间戳、验证码<br>请求图形验证码 要传递参数key  返回的数据通过new Blob解析出来<br>账号密码需使用AES加密</p><h4 id="手机验证码登陆"><a href="#手机验证码登陆" class="headerlink" title="手机验证码登陆"></a>手机验证码登陆</h4><p>校验规则 输入手机号使用AES加密 发送成功后 开始倒计时</p><h4 id="微信扫码登陆"><a href="#微信扫码登陆" class="headerlink" title="微信扫码登陆"></a>微信扫码登陆</h4><p>后端和微信方做sdk的交互（key,密钥，网址）按钮[微信登录] -&gt; 弹出窗口上面是微信提供的二维码，前端拿到数据，渲染到页面上<br>扫码-&gt;手机端点击允许 拿到对应的code码</p><h4 id="APP扫码登录"><a href="#APP扫码登录" class="headerlink" title="APP扫码登录"></a>APP扫码登录</h4><p>1、PC端请求后端生成二维码，后端创建一个全局唯一的二维码ID，并存储二维码状态（初始状态：待扫描）。<br>2、生成二维码，二维码绑定了二维码ID等待用户进行扫描，此时前端会不断轮询接口 根据二维码id查询二维码状态，一旦状态改变页面也会同步改变<br>3、手机扫码，携带App token&#x2F;二维码ID请求后端扫描登录接口，后端也会校验App用户Token变更二维码状态为已使用<br>4、此时PC端的轮询状态变更已扫描，把界面呈现待确认，后端生成临时token和二维码关联，保证当前二维码只会被扫描一次，后端再把临时token返回给手机，手机端也是待确认的状态端，那手机端就使用临时token请求后端，后端会通过临时token拿到二维码的id，再根据二维码id变更二维码的状态为已使用，然后再执行登陆的逻辑生成pc端的登陆token,保存在redis中，删除 临时Token，防止重复使用<br>5、PC端轮询检测到二维码状态变更为 已使用。PC端获取登录Token，完成登录流程。</p><h4 id="获取菜单树"><a href="#获取菜单树" class="headerlink" title="获取菜单树"></a>获取菜单树</h4><p>填写用户名密码验证码正确后端返回token，前端把token存储到localStorage中-&gt;获取用户个人信息、权限信息、角色信息【包含角色权限编码】(调用接口把token传递给后端，token写在请求拦截器里面，放在请求头里传递过去config.headers[‘Authorization’])拿到角色权限编码-持久化存储放在store里-&gt;获取路由(把角色权限编码传递给后端)返回菜单权限树就是左侧菜单-&gt;数据重构扁平化后路由使其能动态添加router.addRoute(‘’,{})</p><h3 id="按钮权限"><a href="#按钮权限" class="headerlink" title="按钮权限"></a>按钮权限</h3><p>前端请求个人信息接口<br>后端给前端返回：当前登录的这个用户的个人信息、权限信息(其中包括判断具体的权限按钮)permissionss是个字符串组成的数组、角色信息。然后给节点添加自定义指令对应的value值，如果这个用户拥有这个权限那么按钮则存在，如果没有这个权限，那么就removeCild(删除)这个按钮，那么对应的用户也就不能点，就没有这个权限<br>前端做法:<br>1.创建directive文件夹 mian.js挂载全局 </p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">v-auths</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>crm:media:channel:delete'<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>删除<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span></code></pre><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useUserStore <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@store/useUserStore'</span><span class="token keyword">export</span> <span class="token keyword">const</span> AuthDirectives <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'auths'</span><span class="token punctuation">,</span>  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> binging<span class="token punctuation">)</span>  <span class="token comment">// el是dom binging是绑定的权限编码</span>    <span class="token keyword">let</span> permissions <span class="token operator">=</span> <span class="token function">useUserStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>permissions<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> permissions<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">"*:*:*"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment">// 如果是最高权限直接return</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> permissions<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>binding<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> parent <span class="token operator">=</span> el<span class="token punctuation">.</span>parentElement<span class="token punctuation">;</span>      parent <span class="token operator">&amp;&amp;</span>　parent<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span> el <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h3><p>根据不同用户展示不同权限，那么这个用户怎么添加的<br>1.为用户先创建角色，这个角色其实就是具体的权限。<br>2.创建用户的时候，对应选好角色(那么其实就是选择好了权限)</p><h2 style="text-align: left;" >怎么封装公共组件</h2><p>1.确认动机<br>例如：<br>  页面太复杂了，想分一块出去，减少当前页面的复杂度<br>  很多的组件都要使用同一个功能，需要把多有的功能提出去，所以这个组件要有一些通用性的特征<br>2.分析边界<br>  越通用边界越窄越灵活便利性越低，不要过度封装，避免限制其适用性。<br>3.设计接口 通用性的组件写文档<br>  属性 插槽 事件<br>4.代码实现<br>5.功能测试-单元测试&#x2F;集成测试<br>6.后续维护<br>  优化、功能更新</p><div class="note green icon-padding disabled"><i class="note-icon fab fa-cc-visa"></i><p>话术：比如我封装过分页器就是想提高复用性,所以需要支持当前页，每页条数，总数，需要 双向绑定，让父组件能够控制分页器的状态，需要提供 回调事件，让外部组件监听分页变更</p></div><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"pagination"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>el<span class="token operator">-</span>pagination      v<span class="token operator">-</span>model<span class="token operator">:</span>current<span class="token operator">-</span>page<span class="token operator">=</span><span class="token string">"currentPage"</span>      v<span class="token operator">-</span>model<span class="token operator">:</span>page<span class="token operator">-</span>size<span class="token operator">=</span><span class="token string">"pageSize"</span>      <span class="token operator">:</span>page<span class="token operator">-</span>sizes<span class="token operator">=</span><span class="token string">"[2, 5, 10, 20, 50, 100]"</span>      layout<span class="token operator">=</span><span class="token string">"total, sizes, prev, pager, next, jumper"</span>      <span class="token operator">:</span>total<span class="token operator">=</span><span class="token string">"total"</span>      @size<span class="token operator">-</span>change<span class="token operator">=</span><span class="token string">"handleSizeChange"</span>      @current<span class="token operator">-</span>change<span class="token operator">=</span><span class="token string">"handleCurrentChange"</span>    <span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script lang<span class="token operator">=</span><span class="token string">"ts"</span><span class="token operator">></span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> defineComponent <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Pagination'</span><span class="token punctuation">,</span> <span class="token comment">//组件名称</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>script lang<span class="token operator">=</span><span class="token string">"ts"</span> setup<span class="token operator">></span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token function">defineProps</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">currentPage</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">type</span><span class="token operator">:</span> Number<span class="token punctuation">,</span>    <span class="token keyword">default</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">pageSize</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">type</span><span class="token operator">:</span> Number<span class="token punctuation">,</span>    <span class="token keyword">default</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">total</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">type</span><span class="token operator">:</span> Number<span class="token punctuation">,</span>    <span class="token keyword">default</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 分页</span><span class="token keyword">const</span> currentPage <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>currentPage<span class="token punctuation">)</span> <span class="token comment">// 当前页</span><span class="token keyword">const</span> pageSize <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>pageSize<span class="token punctuation">)</span> <span class="token comment">// 每页多少条</span><span class="token comment">// 用于双向绑定 currentPage，当用户切换分页时，通知父组件更新数据。当用户调整每页显示条数时，通知父组件</span><span class="token keyword">const</span> emits <span class="token operator">=</span> <span class="token function">defineEmits</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'update:currentPage'</span><span class="token punctuation">,</span> <span class="token string">'update:pageSize'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//分页-一页显示多少条</span><span class="token keyword">const</span> <span class="token function-variable function">handleSizeChange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">page</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  pageSize<span class="token punctuation">.</span>value <span class="token operator">=</span> page  <span class="token function">emits</span><span class="token punctuation">(</span><span class="token string">'update:pageSize'</span><span class="token punctuation">,</span> page<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//分页-页码</span><span class="token keyword">const</span> <span class="token function-variable function">handleCurrentChange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">page</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  currentPage<span class="token punctuation">.</span>value <span class="token operator">=</span> page  <span class="token function">emits</span><span class="token punctuation">(</span><span class="token string">'update:currentPage'</span><span class="token punctuation">,</span> page<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>style lang<span class="token operator">=</span><span class="token string">"scss"</span> scoped<span class="token operator">></span><span class="token punctuation">.</span>pagination <span class="token punctuation">&#123;</span>  <span class="token literal-property property">display</span><span class="token operator">:</span> flex<span class="token punctuation">;</span>  justify<span class="token operator">-</span>content<span class="token operator">:</span> flex<span class="token operator">-</span>end<span class="token punctuation">;</span>  <span class="token literal-property property">padding</span><span class="token operator">:</span> 15px <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></code></pre><div class="note green icon-padding disabled"><i class="note-icon fab fa-cc-visa"></i><p>话术：比如我封装过树状结构，递归渲染树形结构，支持节点展开&#x2F;收起功能，允许指定选中某个节点，允许监听节点点击事件。可自定义图标大小、节点间距等样式。<br>data：树形结构的数据（包含 children 递归渲染）。<br>iconWidth &#x2F; iconHeight：用于控制图标大小。<br>appointKey：指定唯一标识字段，默认是 id，用于选中节点的判断。<br>node-click：当用户点击某个节点时，触发该事件，将选中的节点对象传递给父组件。<br>采用 递归组件 方式渲染树状结构，支持 展开&#x2F;收起 交互。</p></div><h2 style="text-align: left;" >如何将echarts大屏导出为图片</h2><p>方法 1：使用 ECharts 的 getDataURL 方法<br>ECharts 提供了 getDataURL() 方法，可将图表转换为 Base64 格式的图片，然后可以：<br>直接 显示 在页面上<br>提供 下载 按钮，让用户保存<br>方法 2：整个大屏截图导出<br>导出整个 ECharts 大屏（不仅是一个图表），可以使用 html2canvas 进行整个页面截图。安装 html2canvas npm install html2canvas</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div ref<span class="token operator">=</span><span class="token string">"screenRef"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div ref<span class="token operator">=</span><span class="token string">"chartRef"</span> style<span class="token operator">=</span><span class="token string">"width: 800px; height: 400px;"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"exportScreen"</span><span class="token operator">></span>导出大屏<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script setup<span class="token operator">></span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> onMounted<span class="token punctuation">,</span> ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> echarts <span class="token keyword">from</span> <span class="token string">'echarts'</span><span class="token keyword">import</span> html2canvas <span class="token keyword">from</span> <span class="token string">'html2canvas'</span><span class="token keyword">const</span> chartRef <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token keyword">const</span> screenRef <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token keyword">let</span> chartInstance <span class="token operator">=</span> <span class="token keyword">null</span><span class="token function">onMounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  chartInstance <span class="token operator">=</span> echarts<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>chartRef<span class="token punctuation">.</span>value<span class="token punctuation">)</span>  chartInstance<span class="token punctuation">.</span><span class="token function">setOption</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">'ECharts 大屏示例'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">tooltip</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">xAxis</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">,</span> <span class="token string">'E'</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">yAxis</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">series</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'bar'</span><span class="token punctuation">,</span> <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 导出整个大屏</span><span class="token keyword">const</span> <span class="token function-variable function">exportScreen</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">html2canvas</span><span class="token punctuation">(</span>screenRef<span class="token punctuation">.</span>value<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">useCORS</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 允许跨域图片</span>    <span class="token literal-property property">scale</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token comment">// 提高清晰度</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">canvas</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> image <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">toDataURL</span><span class="token punctuation">(</span><span class="token string">'image/png'</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> link <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>    link<span class="token punctuation">.</span>href <span class="token operator">=</span> image    link<span class="token punctuation">.</span>download <span class="token operator">=</span> <span class="token string">'big-screen.png'</span>    link<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue3学习笔记</title>
      <link href="/vue3-study/"/>
      <url>/vue3-study/</url>
      
        <content type="html"><![CDATA[<h3 style="text-align: left;" >script setup到底做了什么</h3><div class="note info no-icon flat"><p><strong>script setup 的本质：</strong><br>1. 代码会在 组件实例创建之前执行（在 beforeCreate 之前）。<br> 2. Vue 会自动处理作用域，所以 this 不可用。</p></div><span class='p code'>在 Vue 3 中， setup 是对 Vue 组合式 API（Composition API）的一个简化语法糖。</span><p>当使用 setup() 方式时，可以通过 setup(props, { expose }) 的 expose() 方法 来暴露实例成员<br>在 script setup 语法中，Vue 提供了一个编译时宏 defineExpose()（仅在编译时生效，不会在运行时生成额外代码），用来暴露实例成员,不会影响性能</p><h3 style="text-align: left;" >Proxy比defineProperty到底好在哪</h3><div class="note info no-icon flat"><p>Proxy 比 Object.defineProperty 更强大的地方在于 <strong>它能代理整个对象，而不是只能拦截单个属性</strong>。同时，Proxy 提供了 13 种拦截操作，支持监听对象新增&#x2F;，支持数组的变异方法，性能更优，而 Object.defineProperty 只能拦截 get 和 set，局限性更大。</p></div><p>  <strong>Vue 2 响应式的实现（基于 Object.defineProperty）</strong></p><ul><li>递归遍历对象的每个属性，使用 Object.defineProperty() 重新定义 getter 和 setter 。</li><li>每次访问属性时触发 getter，收集依赖（Dep）。</li><li>修改属性值时触发 setter，通知依赖更新（watcher）。 <br></li></ul><span style="background-color: rgb(165 209 251 / 23%); padding: 2px 4px; border-radius: 4px;">Vue 2 的缺点</span><ol><li>只能监听已有属性，无法监听新增&#x2F;删除的属性<br>解决方案：Vue 2 通过 $set() 手动添加新属性，但不够优雅。</li><li>数组的变异方法（push、pop、splice 等）无法被拦截<br>  Vue 2 需要用 Array.prototype 变异方法（需要手动重写 push&#x2F;pop 等）来手动触发视图更新，绕开 defineProperty 的限制。</li><li>必须递归遍历整个对象，性能开销大<br>  Vue 2 需要在初始化时递归遍历整个对象的所有属性，并为每个属性创建 getter&#x2F;setter。如果对象层级很深，初始化成本非常高。</li></ol><span style="background-color: rgb(165 209 251 / 23%); padding: 2px 4px; border-radius: 4px;">Vue 3 响应式的实现（基于 Proxy）</span><br><p>Vue 3 用 Proxy 直接代理整个对象，而不是单独处理每个属性：</p><pre class="language-javaScript" data-language="javaScript"><code class="language-javaScript">const handler &#x3D; &#123;  get(target, key, receiver) &#123;    console.log(&#96;读取属性 $&#123;key&#125;&#96;);    return Reflect.get(target, key, receiver);  &#125;,  set(target, key, value, receiver) &#123;    console.log(&#96;设置属性 $&#123;key&#125;，新值为 $&#123;value&#125;&#96;);    return Reflect.set(target, key, value, receiver);  &#125;&#125;;const data &#x3D; new Proxy(&#123; msg: &#39;hello&#39; &#125;, handler);console.log(data.msg); &#x2F;&#x2F; 读取属性 msgdata.msg &#x3D; &#39;world&#39;;    &#x2F;&#x2F; 设置属性 msg，新值为 worlddata.newProp &#x3D; &#39;new&#39;;  &#x2F;&#x2F; 设置属性 newProp，新值为 new</code></pre><p>Vue 3 的 reactive 通过 Proxy 进行封装：</p><pre class="language-javaScript" data-language="javaScript"><code class="language-javaScript">function reactive(target) &#123;  return new Proxy(target, &#123;    get(target, key, receiver) &#123;      console.log(&#96;读取 $&#123;key&#125;&#96;);      return Reflect.get(target, key, receiver);    &#125;,    set(target, key, value, receiver) &#123;      console.log(&#96;修改 $&#123;key&#125; -&gt; $&#123;value&#125;&#96;);      return Reflect.set(target, key, value, receiver);    &#125;,    deleteProperty(target, key) &#123;      console.log(&#96;删除 $&#123;key&#125;&#96;);      return Reflect.deleteProperty(target, key);    &#125;  &#125;);&#125;</code></pre><h3 style="text-align: left;">对路由的理解</h3><div class="note info no-icon flat"><p>路由的本质是 URL 与组件的映射关系。Vue Router 允许我们根据 URL 变化，动态地加载和渲染不同的 Vue 组件。</p></div><p><strong>创建路由:</strong> 使用 createRouter 和 createWebHistory 或 createWebHashHistory 创建路由实例。</p><pre class="language-javaScript" data-language="javaScript"><code class="language-javaScript"> const router &#x3D; createRouter(&#123;  history: createWebHistory(),  routes: staticRoutes,  scrollBehavior() &#123;    return &#123;top: 0, left: 0&#125;  &#125;,&#125;)</code></pre><p><strong>路由模式：</strong></p><ul><li>history 模式（createWebHistory）：基于 HTML5 History API，不带 #，需要服务器支持。</li><li>hash 模式（createWebHashHistory）：基于 URL 哈希 (#)，兼容性好，但 URL 不够美观。</li></ul><p><strong>动态路由：</strong>使用 :id 或 :name 定义动态路径，例如 &#x2F;user&#x2F;:id。<br><strong>路由懒加载：</strong>通过 import() 动态引入组件，减少首屏加载时间。<br><strong>导航守卫:</strong></p><ul><li>全局守卫（beforeEach、afterEach）：控制全局路由访问权限。</li><li>路由独享守卫（beforeEnter）：用于单个路由。</li><li>组件内守卫（beforeRouteEnter、beforeRouteUpdate、beforeRouteLeave）：控制组件级别的导航逻辑。<br>**编程式导航:**使用 router.push()、router.replace() 进行跳转。<br/></li></ul><p><strong>路由传参:</strong></p><ul><li>路径参数（params）：如 &#x2F;user&#x2F;:id，使用 $route.params 获取。</li><li>查询参数（query）：如 &#x2F;user?id&#x3D;1，使用 $route.query 获取。</li></ul><h3 style="text-align: left;">css动画@keyframes和过渡的区别</h3><p><strong>定义方式</strong></p><ul><li>@keyframes（动画）：需要通过 @keyframes 规则定义动画的关键帧，并配合 animation 属性使用。定义多个关键帧（0% ~ 100%），从而实现更复杂的动画效果，如循环、暂停、反向播放等。</li><li>transition（过渡）：直接在 CSS 规则中定义，只能对某些属性在<span class='p red'>两个状态</span>之间进行平滑过渡。</li></ul><p><strong>触发方式</strong></p><ul><li>@keyframes：动画可以自动执行（animation 设置 animation-play-state: running）或由 JavaScript 控制。</li><li>transition：需要某种状态变化（如 hover、focus 或 JavaScript 代码修改样式）来触发。</li></ul><p><strong>示例</strong><br>@keyframes 实现循环动画</p><pre class="language-javaScript" data-language="javaScript"><code class="language-javaScript">@keyframes move &#123;  0% &#123; transform: translateX(0); &#125;  50% &#123; transform: translateX(100px); &#125;  100% &#123; transform: translateX(0); &#125;&#125;.box &#123;  width: 100px;  height: 100px;  background-color: red;  animation: move 2s infinite;&#125;</code></pre><p>transition 实现鼠标悬停变化</p><pre class="language-javaScript" data-language="javaScript"><code class="language-javaScript">.box &#123;  width: 100px;  height: 100px;  background-color: red;  transition: background-color 0.5s ease, transform 0.5s;&#125;.box:hover &#123;  background-color: blue;  transform: scale(1.2);&#125;</code></pre><p><strong>总结</strong></p><ul><li>transition 更适合简单的状态切换，如 hover 变色、大小变化等。</li><li>@keyframes 更适合复杂的动画，如循环播放、多个关键帧控制等。</li><li>性能上，transition 一般比 @keyframes 更优，但两者都可以利用 GPU 加速（如 transform）。<div class="note pink icon-padding disabled"><i class="note-icon fab fa-cc-visa"></i><p>如果动画是由用户交互（如 hover、click）触发，并且只需要在两个状态之间平滑过渡，用 transition。</p></div></li></ul><h3 style="text-align: left;">对vue3生命周期的理解</h3><div class="note pink icon-padding disabled"><i class="note-icon fab fa-cc-visa"></i><p><strong>创建</strong>前&#x2F;后 beforeCreate &#x2F; created → 由 setup() 代替执行初始化逻辑。<br>作用：1.初始化响应式数据（ref、reactive）&nbsp;&nbsp;&nbsp;2.注册生命周期钩子（如 onMounted）&nbsp;&nbsp;&nbsp;3.返回组件中使用的数据与方法 4.没有访问 this，因为组件实例还没创建。<br><strong>挂载</strong>前&#x2F;后 beforeMount → onBeforeMount() DOM 挂载前调用，一般用得少。 &nbsp;&nbsp;&nbsp;mounted → onMounted() 组件挂载完成，也就是在DOM上进行渲染完成,DOM 可访问。<br>作用: 1.发送请求&nbsp;&nbsp;&nbsp; 2.操作 DOM（比如获取 canvas 元素）&nbsp;&nbsp;&nbsp;3.初始化图表、视频等依赖真实 DOM 的内容<br><strong>更新</strong>前&#x2F;后 响应式数据发生变化，但 DOM 还没更新 beforeUpdate → onBeforeUpdate() &nbsp;&nbsp;&nbsp;   updated → onUpdated() DOM 更新完成<br><strong>卸载</strong>前&#x2F;后 组件卸载前调用。 beforeUnmount → onBeforeUnmount() 用途：清理定时器、取消订阅、解绑事件等 &nbsp;&nbsp;&nbsp;<br>unmounted → onUnmounted()组件卸载完成。用途：通常用于清理收尾逻辑的确认。<br>onActivated() 和 onDeactivated()作用：用于 <keep-alive> 包裹的组件中，<strong>激活</strong>和<strong>停用</strong>时触发。<br>onErrorCaptured() 作用：捕获子组件中的<strong>错误</strong>，类似 try-catch。</p></div><p>onActivated() 和 onDeactivated()的使用场景：<br>当你有多个子组件切换显示，并使用 <keep-alive> 缓存某些组件时 只有在使用 <keep-alive> 时，onActivated 和 onDeactivated 才会触发</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">  <span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>keep<span class="token operator">-</span>alive<span class="token operator">></span>    <span class="token operator">&lt;</span>ComponentA v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"current === 'A'"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>ComponentB v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"current === 'B'"</span> <span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>keep<span class="token operator">-</span>alive<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span></code></pre><p>在这种结构下，ComponentA 和 ComponentB 会被缓存，切换时不会重新销毁，而是停用（deactivated）和激活（activated）。</p><h3 style="text-align: left;">SPA与MPA的区别</h3><table><thead><tr><th>特性</th><th>SPA</th><th>MPA</th></tr></thead><tbody><tr><td>页面数量</td><td>一个页面</td><td>多个 HTML 页面</td></tr><tr><td>路由控制</td><td>前端控制（如 Vue Router）</td><td>后端控制（如 Spring Boot、PHP）</td></tr><tr><td>页面跳转</td><td>无刷新、局部渲染</td><td>整页刷新、跳转</td></tr><tr><td>首屏加载速度</td><td>较慢（依赖 JS 渲染）</td><td>较快（HTML 后端直接渲染）</td></tr><tr><td>交互体验</td><td>更流畅，接近原生应用</td><td>跳转明显、体验中等</td></tr><tr><td>SEO（搜索引擎优化）</td><td>不友好（需 SSR 或预渲染优化）</td><td>友好，直接输出 HTML</td></tr><tr><td>状态管理</td><td>前端统一管理（如 Pinia、Vuex）</td><td>页面间状态不共享，需后端或缓存支持</td></tr><tr><td>开发难度</td><td>高（需构建、打包、路由、权限等）</td><td>相对简单，传统开发流程</td></tr></tbody></table><h4 id="SPA的实现"><a href="#SPA的实现" class="headerlink" title="SPA的实现"></a>SPA的实现</h4><p>最核心的一点就是：实现无刷新页面跳转（前端路由控制）</p><ul><li>hash SEO 不友好(爬虫不识别 # 后内容)<br>1.URL 中带 # 符号<br>2.浏览器的地址栏改变 # 后面的部分不会导致页面刷新<br>3.使用 window.onhashchange 监听地址变化</li></ul><p>原理：浏览器不会将 # 后的内容发送给服务器，也不会刷新页面。前端通过监听 hashchange 事件来做路由切换。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'hashchange'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'当前路由是：'</span><span class="token punctuation">,</span> location<span class="token punctuation">.</span>hash<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>Vue Router 中的使用</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">history</span><span class="token operator">:</span> <span class="token function">createWebHashHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// hash 模式</span>  <span class="token literal-property property">routes</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>history SEO 更容易优化（可配合 SSR）<br>1.使用 pushState &#x2F; replaceState 操作浏览器历史记录<br>2.URL 没有 #，如：<a href="http://example.com/home">http://example.com/home</a><br>3.前端拦截所有点击跳转并用 JS 改变 URL</li></ul><p>原理：通过 history.pushState() 改变 URL,监听 popstate 事件响应浏览器前进&#x2F;后退操作,初次访问或刷新时，URL 会向服务器发请求</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">window<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">pushState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">'/home'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'popstate'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'页面地址发生变化'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>Vue Router 中的使用</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">history</span><span class="token operator">:</span> <span class="token function">createWebHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// history 模式</span>  <span class="token literal-property property">routes</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="如何给SPA做SEO"><a href="#如何给SPA做SEO" class="headerlink" title="如何给SPA做SEO"></a>如何给SPA做SEO</h4><p>SSR 服务端渲染 后端生成完整 HTML 返回</p><h4 id="SPA首屏加载-优化方案"><a href="#SPA首屏加载-优化方案" class="headerlink" title="SPA首屏加载 优化方案"></a>SPA首屏加载 优化方案</h4><p>FCP指标：整个页面不是全部渲染完成 而是展示出当前视图的内容<br>计算首屏时间</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'DPMContentLoad'</span><span class="token punctuation">,</span><span class="token parameter">e</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'FCP'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><p>加载慢的原因：1.网络原因&nbsp;&nbsp;&nbsp; 2.资源文件过大&nbsp;&nbsp;&nbsp; 3.资源是否重复发送请求&nbsp;&nbsp;&nbsp; 4.执行JS–&gt;页面阻塞<br>优化：<br>1.减少入口文件体积–路由懒加载 不同组件拆分成不同的代码模块</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// Vue 路由懒加载</span><span class="token keyword">const</span> <span class="token function-variable function">Login</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/views/Login.vue'</span><span class="token punctuation">)</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span><span class="token number">2.</span>静态资源本地缓存<span class="token operator">--</span>localStorage <span class="token operator">/</span> <span class="token constant">HTTP</span>缓存cache<span class="token operator">-</span>control Etag <span class="token operator">/</span> service worker<span class="token number">3.</span><span class="token constant">UI</span>框架elementUI按需加载<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ElButton <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'element-plus'</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>ElButton<span class="token punctuation">)</span><span class="token number">4.</span>避免组件重复打包<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span>`js<span class="token literal-property property">optimization</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">splitChunks</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">chunks</span><span class="token operator">:</span> <span class="token string">'all'</span><span class="token punctuation">,</span>    <span class="token literal-property property">minChunks</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'common'</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="图片资源压缩"><a href="#图片资源压缩" class="headerlink" title="图片资源压缩"></a>图片资源压缩</h4><p>懒加载：滚动到视图再加载图片loading&#x3D;”lazy”<br>使用 WebP 格式：体积更小</p><h4 id="Gzip"><a href="#Gzip" class="headerlink" title="Gzip"></a>Gzip</h4><p>Gzip 是一种压缩算法，可以压缩 HTML、CSS、JS 等文本资源，减小传输体积，从而加快页面加载速度。（Nginx 开启 Gzip 配置）</p><h4 id="SSR"><a href="#SSR" class="headerlink" title="SSR"></a>SSR</h4><p>SSR 是在服务器就把 HTML 内容生成好，直接返回给浏览器，而不是等 JS 执行完才渲染页面。</p>]]></content>
      
      
      <categories>
          
          <category> vue3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>联系方式</title>
      <link href="/wechat-qrcode/"/>
      <url>/wechat-qrcode/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>nuxt学习笔记</title>
      <link href="/nuxt-study/"/>
      <url>/nuxt-study/</url>
      
        <content type="html"><![CDATA[<div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://nuxt.com/docs/getting-started/introduction">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="">          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">前往官网</div>            <div class="tag-link-sitename">nuxt.js官网</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div>]]></content>
      
      
      <categories>
          
          <category> nuxt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nuxt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试技巧</title>
      <link href="/interview-me/"/>
      <url>/interview-me/</url>
      
        <content type="html"><![CDATA[<h3 style="text-align: left;" >简历-铺好你的门面</h3><p><strong>先敬罗衣后敬人</strong><br>用最短的时间让面试官在人群中发现你并想认识你。</p><h4 id="简历优化原则"><a href="#简历优化原则" class="headerlink" title="简历优化原则"></a>简历优化原则</h4><ul><li><strong>弱化底线</strong>：公司最低要求，一般由 HR 把控，如学校、学历等。（<em>弱化</em>）  </li><li><strong>删除干扰项</strong>：可能会让面试官犹豫或直接跳过你的信息，如期望薪资、意向工作地等。（<em>删除</em>）  </li><li><strong>放大亮点</strong>：能吸引面试官关注的关键信息，如大厂经历、大型应用经验、获奖记录等。（<em>放大</em>）</li></ul><p>简历模块<br>1.个人信息  2. 工作经历 3. 项目经历 4.其他信息</p><h4 id="个人信息"><a href="#个人信息" class="headerlink" title="个人信息"></a>个人信息</h4><ul><li><strong>姓名</strong>：XX  </li><li><strong>学校</strong>：XX大学 （2019 - 2023，本科）  </li><li><strong>手机</strong>：136XXXXXXX22  </li><li><strong>邮箱</strong>：<a href="mailto:&#88;&#88;&#88;&#88;&#88;&#x58;&#88;&#x58;&#64;&#113;&#113;&#46;&#x63;&#x6f;&#109;">&#88;&#88;&#88;&#88;&#88;&#x58;&#88;&#x58;&#64;&#113;&#113;&#46;&#x63;&#x6f;&#109;</a></li></ul><h4 id="工作经历"><a href="#工作经历" class="headerlink" title="工作经历"></a>工作经历</h4><table><thead><tr><th>起始年月</th><th>公司名 - 部门</th><th>职位名称（职级）</th></tr></thead><tbody><tr><td>2017.01 ~ 2019.05</td><td>阿里巴巴 - 国际自媒体</td><td>高级前端工程师（P6）</td></tr><tr><td>2019.05 ~ 2022.05</td><td>腾讯 - 云与智慧事业群</td><td>资深前端工程师（3-2）</td></tr><tr><td>2022.05 ~ 2022.12</td><td>字节跳动 - 飞书业务线</td><td>资深前端工程师（2-2）</td></tr></tbody></table><h4 id="项目经验"><a href="#项目经验" class="headerlink" title="项目经验"></a>项目经验</h4><p>腾讯 - 运营触达中台 （2019.05 ~ 2022.05）</p><ul><li><p><strong>描述</strong>：<br>（简要提炼重点，让面试官快速了解 <strong>“系统性质”</strong> 与 <strong>“规模”</strong>。）</p></li><li><p><strong>技术栈</strong>：<br>（主要描述<strong>你涉及到的技术栈</strong>，让面试官快速知道<strong>你会做什么</strong>。）</p></li><li><p><strong>负责部分</strong>：<br>（描述前端<strong>团队规模</strong>，与<strong>你所负责的部分</strong>，让面试官知道<strong>你做了什么，占比多重</strong>。）</p></li></ul><h4 id="其他信息"><a href="#其他信息" class="headerlink" title="其他信息"></a>其他信息</h4><ul><li><strong>获奖情况</strong>  </li><li><strong>个人项目</strong>  </li><li><strong>参与过的开源项目</strong>  </li><li><strong>发表过的文章</strong></li><li><strong>参与过的业界分享</strong><br>……</li></ul><h3 style="text-align: left;" >找职位-铺开各种渠道</h3><p>情景分析–投递简历，石沉大海<br>内推&#x2F;猎头(中高端岗位)&#x2F;招聘软件<br>复盘：追问-&gt;分析-&gt;改进</p><h3 style="text-align: left;" >邀约面试</h3><p>制胜关键-上兵伐谋(收集信息)<br>电话收集：收集岗位信息 判断岗位核心诉求 调整自己为岗位匹配者<br>请问我这次面的是一个什么部门、什么样的业务&#x2F;这个岗位具体业务是什么我想了解一下 尽量加微信（万一我的面试时间有什么调整 一个突发性的情况可以通过这个方式和您沟通或者调整）<br>微信收集：什么端？ 发展史，团队规模，竞品，企业文化，遇到技术问题，面试官风格，面试形式等等</p><h3 style="text-align: left;" >面试前-针对性准备</h3><h4 id="岗位核心诉求"><a href="#岗位核心诉求" class="headerlink" title="岗位核心诉求"></a>岗位核心诉求</h4><h5 id="技术诉求"><a href="#技术诉求" class="headerlink" title="技术诉求"></a>技术诉求</h5><ul><li><strong>需要懂什么</strong>：Vue &#x2F; React &#x2F; Uniapp ？ PC &#x2F; 移动端 &#x2F; 小程序 &#x2F; 原生 ？ nodejs &#x2F; Java ？</li></ul><h5 id="能力诉求"><a href="#能力诉求" class="headerlink" title="能力诉求"></a>能力诉求</h5><ul><li><strong>需要做什么</strong>：带团队 ？ 项目负责人 ？ 核心研发 ？ 普通研发 ？</li></ul><h5 id="业务（经验）诉求"><a href="#业务（经验）诉求" class="headerlink" title="业务（经验）诉求"></a>业务（经验）诉求</h5><ul><li><strong>需要做过什么</strong>：toB ？ toC ？ 电商 ？ 自媒体 ？ 游戏 ？ 图片处理 ？ 性能优化 ？ 中台建设 ？</li></ul><h5 id="成本诉求"><a href="#成本诉求" class="headerlink" title="成本诉求"></a>成本诉求</h5><ul><li><strong>需要多少成本</strong>：8k ？ 10k ？ 15k ？ 20k ？ 30k ？ 40k ？ 55k ？ 70k ？</li></ul><p>诉求： 我需要用<span class='p red'>A成本</span>，请一个懂<span class='p red'>B技术</span>，有<span class='p red'>C经验</span>,具备<span class='p red'>D能力</span>的人<br>回答：我是懂<span class='p red'>B技术</span>，有<span class='p red'>C经验</span>，具有<span class='p red'>D能力</span>，能接受<span class='p red'>A成本</span>的人。（整场面试展现这一点）</p><h4 id="自我介绍"><a href="#自我介绍" class="headerlink" title="自我介绍"></a>自我介绍</h4><p>背景+我是懂<span class='p red'>B技术</span>，有<span class='p red'>C经验</span>，具有<span class='p red'>D能力</span>，能接受<span class='p red'>A成本</span>的人<br>正常换工作：<br>你好，我是XX年毕业于XX学校，XX专业，有XX年的工作经验，主要在XX公司工作，技术栈主要是<span class='p red'>B技术</span>,开发的项目主要是<span class='p red'>C经验</span>，在过去的团队中，主要承担的任务是<span class='p red'>D能力</span><br>选出与岗位诉求匹配的项目：<br><strong>项目描述</strong>：通过无差别录制用户行为，以便有问题时能快速还原问题现场，解决Tob私有化部署客户问题难定位问题。<br><strong>个人负责</strong>：系统负责人，一人独立完成。<br><strong>项目难点</strong>：前端无差别录制会导致前端卡顿。<br><strong>业界方案</strong>：减少记录数据、用indexDB存储、数据合并、web-worker。<br><strong>如何解决</strong>：卡顿本质是计算线程阻塞了渲染线程，通过webworker+indexDB的方案，web-worker完成计算，让渲染线程保持通畅。<br><strong>解决效果</strong>：从卡顿到近乎无感知。</p><h3 style="text-align: left;" >一面-突出技术根基</h3><p>本质：比其他面试者更优秀 心态：去交流  姿态：技术交流，知识分享<br>话术：八股文 + 自己看法 + 自己经验<br>引导：向自己熟悉的领域引导</p><h3 style="text-align: left;" >二面-诉说领域经验</h3><p><strong>考察点1： 过往的业务经验和我们是否匹配？</strong><br>    电商管理系统：订单管理，仓储管理，营销管理，秒杀抢购，物流跟踪等等。<br>    移动端页面：多机型适配，加载性能，体验新能，虚拟列表，滚动防抖，预加载，懒加载等等。<br>    TOB中后台系统：较强的抽象能力，应对不同客户定制化需求，问题跟进，工单跟进等等。</p><p><strong>考察点2：业务能力（做事能力）</strong><br>    根据已有的知识体系，结合业务，是否有形成自己成熟的做事方法论。<br>    而该方法论是否全面，包含考虑到项目的稳定性，安全性，可拓展性，可维护性，持续集成成本，等等。</p><p>我们要做到</p><ol><li>告诉面试官，我做了什么事情，这个事情属于什么业务类型。</li><li>总结出自己做事情方法论，并且分析每个项目，在面试的时候传递给面试官<br/><wavy>遇到什么需求、问题 + 业界解决方案 + 我的解决方案 + 落地效果</wavy><hr/></li></ol><p><strong>后台管理系统优化方案</strong><br><strong>挑战点</strong><br> 目前系统模块大多依赖 UI 框架搭建，研发工作主要集中在重复性的 CRUD 任务，浪费大量研发资源。<br><strong>业界方案</strong><br> 低代码平台：业界通常采用低代码平台简化 CRUD 任务，但由于团队人力有限且项目规模较小，构建低代码平台的成本较高，不适用于当前情况。<br><strong>我的方案</strong>：<br>  通过分析各模块，发现其基本功能高度相似（搜索框、列表、增删改查弹窗、分页等）<br>  通过沉淀这些模板，并暴露关键参数，使得重复功能模块可以通过简单配置快速生成。<br>  这一方案既能提升研发效率，又避免了研发资源的浪费。<br><strong>落地效果</strong><br>  同类型模块仅需配置即可完成开发。<br>  人力成本降低：从 3人&#x2F;天 降至 1人&#x2F;天，大幅提升开发效率。</p><hr/><p><strong>一个功能模块</strong><br><strong>挑战点</strong><br> 这个组件非常特殊，产品总是对这个产品的需求进行高频调整。<br><strong>业界方案</strong><br> 为模块提供极其多的开放性配置，应对产品经理的诉求，但这样会极大增加<br>    维护成本。<br><strong>我的方案</strong>：<br>  写好模块的模板，同时模板中留出很多的slot插槽，同时收拢一个组件库，<br>    用公用组件+插槽+模板的方案，解决高频变动需的新需求。<br><strong>落地效果</strong><br>  同类型模块仅需配置即可完成开发。<br>  就算频繁变动，也不会额外增加我更多的工作量。</p><hr/><h3 style="text-align: left;" >三面-体现你的综合能力</h3>本质：宏观，通过率比前面高，针对核心研发，高p，管理层，来设计关注: 知识体系，做事体系，能否hold住一个业务回答：暗示你能hold住这个事情，你能带领大家hold住这件事情<p><strong>体系化技术思维—— 性能优化案例</strong></p><span class='p red'>加载性能：</span><p>1.体量维度（工程化，代码设计）：资源压缩；模块化，利用路由，按需加载依赖；组件化，加载最小依赖；等等。<br>2.网络维度：减少tcp连接次数，减少3次握手；减少外部服务http请求数；开启gzip传输；缓存；http-dns;等等。<br>3.浏览器维度：http缓存协议（强&#x2F;弱缓存)；PC端域名发散；移动端域名收敛；等等。<br>4.业务维度：首屏服务器渲染，次屏浏览器渲染；懒加载，预加载；loading无感知；等等。</p><span class='p red'>体验性能：</span><p>本质：计算线程不阻塞渲染线程；最小局部渲染，不回流；</p><p><strong>体系化技术思维—— 你工作中做过最成功的事情</strong><br> 遇到什么需求、问题 + 业界解决方案 + 我的解决方案 + 落地效果</p><p><strong>体系化技术思维—— 业务能力</strong><br>对业务有深入理解，判断可行性，风险评估，评估突破口，等等</p><p>职业规划<br>1.希望团队能够提供你什么<br>2.你能为公司带来什么</p><p><strong>面试官问：你还有什么问题</strong><br>1.判断是否通过<br>2.判断面评结果，为谈薪做准备<br>3.判断职位，以及公司对你的定位</p><div class="note pink icon-padding disabled"><i class="note-icon fab fa-cc-visa"></i><p>话术：我在这个面试过程交流下来，我感觉交流挺愉快的，我想问一下在您看来我的沟通过程中还有哪些方面是相对薄弱的，我可以去补充一下，因为这个对于我来说也是一个成长&#x2F; 现在我面的这到底是做一个什么事情，公司对这个岗位的定性是怎么样的。</p></div><h3 style="text-align: left;" >hr面-展现健全人格</h3>呈现特征： 稳定 + 上进 + 锲合度高言行举止： 表达从容，气质不卑不亢，性格开朗，人格健康，个性沉稳心理暗示： 1. 我很优秀 2. 我很抢手 3. 我对收入有要求<p><strong>你最大的缺点是什么</strong></p><div class="note pink icon-padding disabled"><i class="note-icon fab fa-cc-visa"></i><p>话术：<br/> 1. 我比较倾向于技术研究就是toC的实现，但是对于toB的实现比较少，所以我觉得这是我一个比较大的技术缺失吧，但后续我会增强该领域的实现。<br/> 2. 我的英语口语能力不好，阅读能力还可以，所以和外国人交流的时候会不知所措心慌在技术上少了很多和外国友人交流的机会 <br/>3.就我自己的话 我非常看重这个base月薪就是这个offer,最近出去面hr基本都问了这个问题 而我的回答也是比较统一的，我觉得在我的职业生涯里求职的时候对于收入的这部分比重还是占比比较大的 这个也许会导致我做出一些不太正确的选择，但是没办法因为我寒窗苦读十年了终于来到社会有一席之地了，也希望自己和家人过上好的生活 而收入也几乎决定了这些</p></div><p><strong>为什么希望加入我们？如果有一家比这里更好的公司你会选择那边么</strong></p><div class="note pink icon-padding disabled"><i class="note-icon fab fa-cc-visa"></i><p>话术：加入动机，以及对公司业务，团队，文化，了解程度。如果真有这么一家公司，比这边都好我会选择那边 因为我的职业规划是想沉淀在某一个领域 一旦进入我会一直留在那里很多年 所以我这一次选择非常慎重，所以我需要一个令我满意的offer 所以我会选那边 但是如果现在没有这么一家公司，同时我进入了贵公司，在这边工作个一两年，那么我的沉默成本就变高了，我有一定的沉淀在这边，做出来一些成果，同时我和团队有一定的感情，也在这边积累了相关资源，这个时候再冒出来这么一家公司，我可能就不会走了</p></div><p><strong>你怎么看待加班的</strong></p><div class="note pink icon-padding disabled"><i class="note-icon fab fa-cc-visa"></i><p>话术：如果确实有紧急任务分配给我，我完全接受加班。但同时我反对无意义的加班，因为加班是某种程度上反映出一个工作效率或工作模式出了问题，也证明了现在的开发模式其实应付不了现在的业务诉求，因此其实对比起无意义的加班我更愿意通过优化方案或者制定出工具来提升工作效率避免加班</p></div><p><strong>上一家公司离职原因</strong></p><div class="note pink icon-padding disabled"><i class="note-icon fab fa-cc-visa"></i><p>话术：是这样的，随着我一直工作，开始买了车，有一定的负担，原来那家公司薪资涨幅体系是有限的，不会有大幅度的调薪，已经支撑不住我的生活诉求了，因为各种各样的负担迫于无奈，我会找一个能给我更高薪酬的公司，那因为贵公司做的业务和我的职业发展方向是匹配的，所以我选择来这边争取这个机会</p></div><p><strong>职业规划</strong><br>踏实制作职业规划<br><strong>你有什么问题</strong><br>问题一： 公司未来两年内的规划是什么？(突出稳定性)<br>问题二： 你了解到同类产品，相比他们，公司业务在业界的核心竞争力是什么(暗示存在感)<br>问题三： 公司对我这个岗位的定位是？能提供我什么资源？(暗示你能解决问题)</p><h3 style="text-align: left;" >结语</h3><p>本文到这里就结束啦，感谢大家耐心看完，希望这篇文章对大家的面试有所帮助，祝大家的薪资upup,找到心仪的公司</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>出师表</title>
      <link href="/hello/"/>
      <url>/hello/</url>
      
        <content type="html"><![CDATA[<pre class="language-javaScript" data-language="javaScript"><code class="language-javaScript">  &#x2F;&#x2F; let url &#x3D; &#96;http:&#x2F;&#x2F;192.168.2.29:8864&#x2F;template&#x2F;page?pageNo&#x3D;$&#123;current.value&#125;&amp;pageSize&#x3D;$&#123;size.value&#125;&#96;;  &#x2F;&#x2F; axios.get(url).then((result: any) &#x3D;&gt; &#123;  &#x2F;&#x2F;   if (result.data &amp;&amp; result.data.result &amp;&amp; result.data.result.records) &#123;  &#x2F;&#x2F;     userList.value &#x3D; result.data.result.records;  &#x2F;&#x2F;     total.value &#x3D; result.data.result.total;  &#x2F;&#x2F;   &#125; else &#123;  &#x2F;&#x2F;     ElMessage.error(&#39;接口数据格式不符合预期，请检查！&#39;);  &#x2F;&#x2F;   &#125;  &#x2F;&#x2F; &#125;).catch((error) &#x3D;&gt; &#123;  &#x2F;&#x2F;   ElMessage.error(&#39;获取分页数据失败，请检查网络或接口配置&#39;);  &#x2F;&#x2F; &#125;);function handleBlur() &#123;  const suListj &#x3D; &#123; ...suList.value &#125;;  let url &#x3D; &#39;&#x2F;template&#x2F;calculateTotalScore&#39;  reqsult.post(url, suListj).then((result: any) &#x3D;&gt; &#123;    console.log(result, &#39;0001222&#39;);    suList.value &#x3D; result.result;  &#125;)&#125;function handleBlurs() &#123;  const EsuListj &#x3D; &#123; ...EsuList.value &#125;;  let url &#x3D; &#39;&#x2F;template&#x2F;calculateTotalScore&#39;  reqsult.post(url, EsuListj).then((result: any) &#x3D;&gt; &#123;    console.log(result, &#39;0001222&#39;);    EsuList.value &#x3D; result.result;  &#125;)&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 古诗 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗词 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>

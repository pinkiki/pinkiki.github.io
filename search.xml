<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>vue响应式原理源码分析</title>
      <link href="/proxy/"/>
      <url>/proxy/</url>
      
        <content type="html"><![CDATA[<h3 style="text-align: left;" >vue是怎么实现响应式更新的</h3><ul><li>vue2: 在组件实例化时，递归遍历对象的每个属性，使用 Object.defineProperty() 重新定义 getter 和 setter ,每次访问属性时触发 getter，收集依赖（Dep）,修改属性值时触发 setter，通知依赖更新（watcher）,最后实现视图的更新，但是defineProperty也是有缺点的.<br><strong>主要有三个缺点：</strong></li></ul><ol><li>对于复杂的对象需要深度监听，必须递归遍历整个对象，性能开销大，它的计算量是非常大的，性能也不是很好</li><li>对于对象的新增和删除属性是无法监听的，所以它需要使用Vue.$set()和Vue.$delete()来作为辅助操作</li><li>对于数组，由于不能直接拦截数组的索引和长度变化,Vue 重写了部分会改变数组内容的方法 [‘push’,’pop’,’shift’,’unshift’,’splice’’sort’,’reverse’],比较繁琐</li></ol><ul><li>vue3: 对于vue3的响应式原理是利用Proxy和reflect来做的，替代了 Vue 2 中对 Object.defineProperty 的使用。我们通过new Proxy来创建代理对象，第一个参数放要被代理的原始对象，第二个参数是一个拦截器对象handler,里面放的是函数，每个函数对应后期用户操作代理的一个捕获器，用户只要有对应的操作就会进入对应的捕获函数去执行，比如 get、set、deleteProperty 等，用来拦截对目标对象的读取、修改、删除等操作。<br>当访问代理对象的属性时，会触发get捕获器，内部调用 track()函数收集依赖，收集effect函数，reflect反射返回原对象的值<br>当修改代理对象的属性时，会触发set捕获器，会执行 trigger(), 找到之前依赖该属性的所有 effect, 逐个执行这些 effect 函数，从而更新视图<br><strong>优势</strong></li></ul><ol><li>它直接代理整个对象而不需要遍历监听属性，性能会有所提升。</li><li>proxy它可以直接监听数组的变化，而不需要去重写数组的原生方法。</li><li>proxy有多达13种的拦截方法，它的功能会更加强大</li></ol><div class="note simple"><p>Proxy和reflect反射执行对象操作（原始行为）</p></div><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Alice'</span><span class="token punctuation">,</span>  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">25</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 放的是函数，每个函数对应后期用户操作代理的一个捕获器</span>  <span class="token comment">// 用户只要有对应的操作就会进入对应的捕获函数去执行</span>  <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">读取属性：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>key<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 还要收集依赖 vue3的依赖是函数effect</span>    <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 保持原始行为</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">设置属性：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>key<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>value<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 触发依赖更新 直接找到存储的effect函数依赖调用更新页面</span>    <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 设置(增改)并返回布尔值</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">deleteProperty</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">删除属性：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>key<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">deleteProperty</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 使用代理对象</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>proxy<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 触发 get</span>proxy<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">26</span><span class="token punctuation">;</span>                  <span class="token comment">// 触发 set</span><span class="token keyword">delete</span> proxy<span class="token punctuation">.</span>name<span class="token punctuation">;</span>              <span class="token comment">// 触发 delete</span></code></pre><!-- <span style="background-color: rgb(165 209 251 / 23%); padding: 2px 4px; border-radius: 4px;"></span> -->]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mySql学习</title>
      <link href="/mysql/"/>
      <url>/mysql/</url>
      
        <content type="html"><![CDATA[<p>学习教程参考</p><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://www.bilibili.com/video/BV1Cm421373b/?p=6&share_source=copy_web&vd_source=69f40c58c6615f5ceba404cc938c1543">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="">          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">尚硅谷5天上手MySQL视频教程，mysql数据库安装到实战</div>            <div class="tag-link-sitename">bilibili</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><!-- <i style="font-size: 20px; color:rgb(7, 91, 218);margin-right: 10px;">1.</i>工作中有很多重复性高的工作,避免相似功能重复开发<br/> --><h2 style="text-align: left;" >数据库概述</h2><h3 style="text-align: left;" >概念</h3><p>数据库是<strong>按照数据结构来组织,存储和管理数据的仓库</strong><br>数据库的具体体现就是磁盘的文件，或者内存的一段数据<br>可增删改查，可共享</p><h3 style="text-align: left;" >存储设计规则(E-R模型)</h3>E: 将一类数据存储到一张表中 <br/>R: '表'和 '表' 可以维护某种关系，最终可以通过关系进行关联操作 <br/>库 --> 表 --> 列 --> 行 <br/><h3 style="text-align: left;" >检验安装是否成功</h3><p>windows为例：<br>安装数据库后 –&gt; cmd 打开命令行工具【以管理员身份运行】<br>我的服务名称是 <strong>MySQL82</strong><br><span style="background-color: rgba(241, 249, 132, 0.5);"> 停止服务： net stop MySQL82 </span><br><span style="background-color: rgba(241, 249, 132, 0.5);"> 开启服务： net start MySQL82</span><br>确保服务是开启的后 输入命令 mysql【可以不用管理员身份运行】 来查看数据库是否配置到环境变量中<br>如果报：<br>‘mysql’ 不是内部或外部命令，也不是可运行的程序或批处理文件。<br>就没有配置成功 网上教程一大堆 按教程配置就好了，这里不过多阐述。<br>配置好：<br>C:\Users\Lenovo&gt;mysql<br>ERROR 1045 (28000): Access denied for user ‘ODBC‘@’localhost’ (using password: NO)</p><h2 style="text-align: left;" >学习顺序与目标</h2><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>创建和修改盛放数据的容器(数据定义DDL)</p>            </div><div class='checkbox yellow checked'><input type="checkbox" checked="checked"/>            <p>表中添加、修改、删除数据(数据操纵DML)</p>            </div><div class='checkbox cyan checked'><input type="checkbox" checked="checked"/>            <p>表中数据多条件查询(数据查询DQL)</p>            </div><div class='checkbox blue checked'><input type="checkbox" checked="checked"/>            <p>事务启动，提交和回滚(事务控制TCL)</p>            </div><div class='checkbox red checked'><input type="checkbox" checked="checked"/>            <p>账号创建，权限控制(数据控制DCL)</p>            </div><h2 style="text-align: left;" >结构化查询语句SQL概述</h2><h3 style="text-align: left;" >链接mysql服务基础命令</h3><i style="font-size: 20px; color:rgb(7, 91, 218);margin-right: 10px;">1.</i> mysql  -u 用户名 -p -p 数据库名 -h 主机地址 -P 端口号        <br/>用户名密码是必填项，其他的选填，且密码没空格,端口号的P大写<br/>简单一点： mysql -u 用户名 -p        <br/>输入后会提示你输入密码。<br/><i style="font-size: 20px; color:rgb(7, 91, 218);margin-right: 10px;">2.</i>查看数据库版本： select version();<br/><i style="font-size: 20px; color:rgb(7, 91, 218);margin-right: 10px;">3.</i>注释：单行注释：#注释内容； 单行注释：-- 注释内容（有空格）; 多行注释：/*注释内容*/<br/><i style="font-size: 20px; color:rgb(7, 91, 218);margin-right: 10px;">4.</i>退出 MySQL 命令行：EXIT; 或 QUIT;<br/><h2 style="text-align: left;" >可视化工具的选择和安装</h2>MySQL Workbench Navicat SQLyog(我使用这个)<h2 style="text-align: left;" >一条数据的存储过程</h2>在mysql中，一个完整的数据存储有4步创建库——>定字段——> 创建表 ——>插数据<h2 style="text-align: left;" >SQL命名规定和规范</h2><p><strong>规定：</strong><br>1.数据库名，表名不得超过30个字符<br>2.必须只能能包含A-Z,a-z,0-9,_共63个字符,且不能以数字开头<br>3.数据库名、表名、字段名等对象名中间不能包含空格<br>4.不重名，不使用关键字<br><strong>规范(阿里巴巴规范手册)：</strong><br>1.注释应该清晰，简洁解释SQL语句的意图、功能和影响<br>2.库、表、列名应该使用小写字母，并使用_下划线或者驼峰命名。简洁明了、具有描述性<br>3.库名应于对应的程序名一致 例如：程序名为EcommercePlatform数据库就命名为ecommerce_platform_db<br>4.表命名最好是遵循 “业务名称_表”的作用,例如：alipay_task、force_project<br>5.列名应该遵循 ‘表实体_属性’的作用,例如：product_name<br>或者productName</p><h2 style="text-align: left;" >库管理</h2><h3 style="text-align: left;" >创建库</h3><ul><li>基本语法： CREATE DATABASE 数据库名;</li><li>加判断防止重复创建(推荐)：CREATE DATABASE IF NOT EXISTS 数据库名;</li><li>带字符集和排序规则：<br>CREATE DATABASE 数据库名<br>CHARACTER SET 字符集<br>COLLATE 排序规则;</li></ul><p><strong>字符集和排序规则是什么</strong><br>字符集 推荐使用 utf8mb4，它是对 utf8 的升级，支持更多字符（如 emoji）。<br>排序规则 推荐使用<br>utf8mb4_0900_ai_ci 不区分大小写<br>utf8mb4_0900_as_cs 区分大小写<br><strong>查看默认字符集和排序方式命令</strong><br>SHOW VARIABLES LIKE ‘character_set_database’<br>SHOW VARIABLES LIKE ‘collation_database’</p><h3 style="text-align: left;" >查看库</h3><p><strong>要操作表格和数据之前必须先说明是对哪个数据库进行操作，先use库</strong><br>1.列出当前 MySQL 实例下的所有数据库：SHOW DATABASES;<br>2.查是否存在某个特定库：SHOW DATABASES LIKE ‘ddl_dl’;<br>3.查看当前使用库： SELECT DATABASE();<br>4.查看指定库下所有表: SHOW TABLES FROM 数据库名<br>5.查看创建库的信息: SHOW CREATE DATABASE 数据库名<br>6.切换库&#x2F;选中库： use 数据库名</p><h3 style="text-align: left;" >修改库</h3>DATABASE不能改名。一些可视化工具可以改名，它是新建库，把所有表复制到新库，再删除旧库完成的所以如果你想改名字，备份数据，删除旧库，创建新库，恢复数据即可ALTER DATABASE 数据库名 CHARACTER SET 字符集COLLATE 排序规则;<h3 style="text-align: left;" >删除库</h3>删数据库要三思 ⚠️ 删除后数据不可恢复，一定要小心操作！1.直接删除数据库：DROP DATABASE 数据库名;2.安全写法 判断并删除库： DROP DATABASE IF EXISTS 数据库名;<h2 style="text-align: left;" >表管理</h2><h3 style="text-align: left;" >常用数据类型</h3><table><thead><tr><th>类型</th><th>用途</th><th>示例</th></tr></thead><tbody><tr><td>TINYINT</td><td>-128-127</td><td>年龄、状态标志</td></tr><tr><td>SMALLINT</td><td>中等整数（-32,768 到 32,767）</td><td>库存量</td></tr><tr><td>INT</td><td>标准整数（约±21亿）</td><td>年龄、编号</td></tr><tr><td>BIGINT</td><td>大整数（超过21亿，最大约±9千万亿）</td><td>用户ID、大额金额</td></tr><tr><td>FLOAT</td><td>单精度浮点数（近似小数）</td><td>温度、身高</td></tr><tr><td>DOUBLE</td><td>双精度浮点数（更高精度的近似小数）</td><td>科学计算、复杂测量</td></tr><tr><td>DECIMAL(m,n)</td><td>精确小数</td><td>价格、分数</td></tr><tr><td>CHAR(n)</td><td>固定长度字符串</td><td>定长字段：身份证号、性别代码、国家代码</td></tr><tr><td>VARCHAR(n)</td><td>可变长度字符串</td><td>变长字段（姓名、地址、描述）</td></tr><tr><td>TEXT</td><td>大段文字</td><td>评论、描述、文章内容</td></tr><tr><td>TIME</td><td>时间（HH:MM:SS）</td><td>上班打卡时间</td></tr><tr><td>DATE</td><td>日期 YYYY-MM-DD</td><td>生日</td></tr><tr><td>DATETIME</td><td>日期 + 时间 YYYY-MM-DD HH:MM:SS</td><td>注册时间、登录时间</td></tr><tr><td>TIMESTAMP</td><td>时间戳支持时区 YYYY-MM-DD HH:MM:SS</td><td>创建时间、更新时间</td></tr><tr><td>ENUM(…)</td><td>枚举类型、限制在指定选项中</td><td>性别（男&#x2F;女）、状态（启用&#x2F;禁用）</td></tr></tbody></table><ul><li>整数类型都可以添加<strong>unsigned</strong>修饰符，添加以后对应的数据就无负号了，值从0开始， 它必须紧贴类型后放置</li><li>CHAR 固定长度，存的时候补空格，读的时候砍空格。</li><li>VARCHAR 变长度，存多少算多少，空格原样保存。</li><li>ENUM 是让字段值只能在规定的选项里选，比如性别只能是”男”或”女”</li><li>确定数据范围，选择符合的且储存空间占用最小的类型；不确定范围的，选择范围较大的类型，避免值超出范围异常</li></ul><p>插入时不用管，更新时也不用管，自动搞定时间:</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">TIMESTAMP</span> <span class="token operator">|</span> <span class="token keyword">DATETIME</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">COMMENT</span> <span class="token string">'插入时自动写'</span><span class="token keyword">TIMESTAMP</span> <span class="token operator">|</span> <span class="token keyword">DATETIME</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">COMMENT</span> <span class="token string">'插入&amp;更新都自动写'</span></code></pre><h3 style="text-align: left;" >表创建</h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://bu.dusays.com/2025/05/20/682c8571badc9.png" style="width:600px;"/></div></div><p>关键点1： 表名、列名、类型必须填写,其他可选<br>关键点2： 推荐使用if not exists, 直接创建存在报错<br>关键点3： 注释不是必须的，但是很有必要的<br>关键点4： 列之间使用,分割<br>验证： 查看某个库下的全部表 SHOW TABLES FORM 数据库名<br>例子：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> book_libs <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8mb4 <span class="token keyword">COLLATE</span> utf8mb4_0900_as_cs<span class="token punctuation">;</span><span class="token keyword">USE</span> book_libs<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> books <span class="token punctuation">(</span>  book_name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">COMMENT</span> <span class="token string">'图书名称'</span><span class="token punctuation">,</span>  book_price <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">COMMENT</span> <span class="token string">'图书价格'</span><span class="token punctuation">,</span>  book_num <span class="token keyword">INT</span> <span class="token punctuation">)</span> <span class="token keyword">CHARSET</span> <span class="token operator">=</span> utf8mb4 <span class="token keyword">COMMENT</span> <span class="token string">'图书表'</span><span class="token punctuation">;</span><span class="token keyword">SHOW</span> <span class="token keyword">TABLES</span> <span class="token keyword">FROM</span> book_libs</code></pre><h3 style="text-align: left;" >表修改</h3><p><i style="font-size: 20px; color:rgb(218, 7, 123);margin-right: 10px;">1.</i>添加新字段【在表里加新的一列】：<br>ALTER TABLE 表名 ADD 列名 类型 COMMENT ‘注释’;<br><i style="font-size: 20px; color:rgb(218, 7, 123);margin-right: 10px;">2.</i>修改字段类型或名字【修改列的类型，或者改列的名字】：<br>ALTER TABLE 表名 MODIFY 列名 新类型 COMMENT ‘注释’;<br>ALTER TABLE 表名 CHANGE 旧列名 新列名 新类型 COMMENT ‘注释’;<br><i style="font-size: 20px; color:rgb(218, 7, 123);margin-right: 10px;">3.</i>删除字段【删除一列】：<br>ALTER TABLE 表名 DROP COLUMN 列名;<br><i style="font-size: 20px; color:rgb(218, 7, 123);margin-right: 10px;">4.</i>修改表名【改表的名字】：<br>ALTER TABLE 旧表名 RENAME TO 新表名;<br><i style="font-size: 20px; color:rgb(218, 7, 123);margin-right: 10px;">5.</i>修改表的注释【给整张表改备注】：<br>ALTER TABLE 表名 COMMENT &#x3D; ‘新注释’;<br><i style="font-size: 20px; color:rgb(218, 7, 123);margin-right: 10px;">5.</i>删除表：<br>DROP TABLE IF EXISTS 数据表1[,数据表2,…,数据表n];<br><i style="font-size: 20px; color:rgb(218, 7, 123);margin-right: 10px;">5.</i>清空表数据：<br>TRUNCATE TABLE 表名;</p><h2 style="text-align: left;" >数据操纵语言概述(DML)</h2><h3 style="text-align: left;" >插入数据语法</h3><p><strong>数据操作的最基本单位是行，按行进行增删改查</strong><br>为表的一行指定字段(列) 插入数据<br>INSERT INTO 表名(列名1,列名2…) VALUES(value1,value2…);<br>同时插入多条记录<br>INSERT INTO 表名 VALUES(value1,value2),…,(value1,value2…);<br>或者<br>INSERT INTO 表名(列名1,列名2…) VALUES(value1,value2…),…,(value1,value2…);<br>值的数量要等于表指定列的数量<br>值的类型和顺序要和[指定列的顺序]一一对应</p><h3 style="text-align: left;" >修改数据语法</h3><p><strong>修改表中所有行数据(全表修改)</strong><br>不添加where,代表修改一个表中所有行的数据<br>UPDATE table_name SET column1 &#x3D; value1,column2 &#x3D; value2,…<br><strong>修改表中符合条件行的数据(条件修改)</strong><br>条件修改只是在后面添加where,where后面指定相关的条件即可<br>UPDATE table_name SET column1 &#x3D; value1,column2 &#x3D; value2,… WHERE condition</p><h3 style="text-align: left;" >删除数据语法</h3><p><strong>删除表中所有行数据(全表删除)</strong><br>DELETE FROM table_name;<br><strong>删除表中符合条件行的数据(条件删除)</strong> 且是 AND 或是 OR<br>DELETE FROM table_name[WHERE condition]</p><h2 style="text-align: left;" >数据查询语句(DQL)</h2><h3 style="text-align: left;" >基础SELETE的五种情况</h3>- 只读 ，不会修改数据，影响库表结构- 会基于原表数据查询出一个虚拟库- 用于获取表中的数据记录，支持条件筛选，排序，分页，分组等操作<p><strong>常用关键字：SELECT</strong><br><i style="font-size: 20px; color:rgb(218, 7, 123);margin-right: 10px;">1.</i>单表查询： 单张真实表 ——&gt; 查询语法 ——&gt; 虚拟表<br><i style="font-size: 20px; color:rgb(218, 7, 123);margin-right: 10px;">2.</i>多表查询： 多张真实表 ——&gt; 合并语法 ——&gt; 中间虚拟表 ——&gt; 查询语法 ——&gt; 虚拟表</p><p><strong>注意：以下 SELECT 查询只是“读取”数据，不会对原始表结构或数据造成影响。具有 临时性 非持久化 不改原表 每次刷新&#x2F;执行都重新生成 服务于展示和输出</strong><br>意义：用于构造测试数据或临时表</p><ul><li><p>场景 1：非表查询<br>解释： 利用 select 关键字，快速输出一个运算结果或者函数，类似 java 控制台输出<br>语法： select 运算，函数<br>查询当前时间： SELECT NOW();</p></li><li><p>场景 2: 指定表查询结果<br>解释: 查询的时候，结果来自于一张表或者多表<br>语法: select 查询表中的哪些列 列名，列名，列名 from 参照的表名<br>select 表名.列名，列名，列名 from 参照的表名 （多表的时候，需要这么做，多表的列名可能重复）<br>select * from 表名 *就是表中所有列<br>查询全部员工信息：SELECT * FROM 员工表;<br>查询全部员工姓名和工资：SELECT ename,salary FROM 员工表;</p></li><li><p>场景 3：指定列并且起名字<br>解释： 查询的时候可以给列起别名，为了匹配后期 java 数据格式<br>语法： SELECT 列名 as 别名, 列名 别名 from 表名<br>查询全部员工姓名和工资,名字显示为 name 名称： ;<br>SELECT ename AS NAME,salary FROM 员工表<br>SELECT ename NAME,salary FROM 员工表;</p></li><li><p>场景 4：去掉重复行数据<br>解释： 根据结果进行重复值去重<br>语法： SELECT DISTINCT 列名, 列名, 列名 from 表名;<br>查询员工的性别种类： SELETE DISTINCT gender FROM 员工表</p></li><li><p>场景 5：查询常数列<br>解释： 人为制造的一个值和一个列 (多个值，多个列)<br>语法： SELECT DISTINCT 列, 列名, ‘值’ as 列名 from 表名;<br>查询员工姓名和工资，并添加一个公司 company 为尚硅谷<br>SELECT ename AS NAME, salary, ‘尚硅谷’ AS company FROM 员工表;</p></li><li><p>扩展：ifnull(列，为 null 给予的默认值)例如 SELECT ename NAME 名字,IFNULL(salary,0) 奖金 FROM 员工表;</p></li></ul><h3 style="text-align: left;" >表结构和WHERE过滤</h3><i style="font-size: 20px; color:rgb(218, 7, 123);margin-right: 10px;">1.</i>显示表结构：使用命令查看表中的列和列的特征： DESC 表名 <br/><i style="font-size: 20px; color:rgb(218, 7, 123);margin-right: 10px;">2.</i>过滤数据(条件查询)where添加以后，就不是全表查询，先过滤条件，符合，再返回指定列<p><strong>语法</strong><br>SELECT 字段列表<br>FROM 表名<br>[WHERE 条件（and or xor）]<br>[GROUP BY 分组字段]<br>[HAVING 分组条件]<br>[ORDER BY 排序字段]<br>[LIMIT 限制数量];<br><strong>示例</strong><br>SELECT name, age<br>FROM users<br>WHERE age &gt; 18<br>ORDER BY age DESC<br>LIMIT 10;<br>上面语句从 users 表中筛选出年龄大于 18 的用户，按年龄降序排列，取前 10 条，最终返回的是一张虚拟表。</p><h3 style="text-align: left;" >常见数据库运算符分类与用法</h3>这里只演示我不记不住的  字符串和数字会自动相互转换 不需要考虑类型 '1'= 1 为true<table><thead><tr><th>运算符</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>!&#x3D; 或 &lt;&gt;</td><td>不等于</td><td>WHERE gender &lt;&gt; ‘男’</td></tr><tr><td>BETWEEN … AND …</td><td>区间</td><td>WHERE salary BETWEEN 5000 AND 10000</td></tr><tr><td>IN (…)</td><td>多个匹配值</td><td>WHERE dept IN (‘销售部’, ‘开发部’)</td></tr><tr><td>NOT IN (…)</td><td>不在其中</td><td>WHERE id NOT IN (1, 2, 3)</td></tr><tr><td>IS NULL 或 IS NOT NULL</td><td>是否为空</td><td>WHERE bonus IS NULL</td></tr><tr><td>AND</td><td>与，同时满足</td><td>WHERE age &gt; 18 AND gender &#x3D; ‘女’</td></tr><tr><td>OR</td><td>或，满足一个</td><td>WHERE name &#x3D; ‘张三’ OR name &#x3D; ‘李四’</td></tr><tr><td>XOR</td><td>异或</td><td>WHERE name &#x3D; ‘张三’ XOR name &#x3D; ‘李四’</td></tr><tr><td>NOT</td><td>非，取反</td><td>WHERE NOT (age &lt; 18)</td></tr><tr><td>+ - * &#x2F; % DIV</td><td>加减乘除取余 DIV 为整除除法</td><td>SELECT quantity * price FROM orders</td></tr><tr><td>LIKE</td><td>模糊匹配</td><td>WHERE name LIKE ‘张%’（以“张”开头）</td></tr><tr><td>_</td><td>匹配一个任意字符</td><td>WHERE code LIKE ‘A_1’（A 开头，中间任意 1 位字符，1 结尾）</td></tr><tr><td>%</td><td>匹配任意多个字符</td><td>LIKE ‘%工程师’（以“工程师”结尾）</td></tr><tr><td>NOT LIKE</td><td>不匹配</td><td>WHERE email NOT LIKE ‘%.com’</td></tr></tbody></table><p>三元运算 &#x2F; 判断运算（高级）：CASE WHEN THEN ELSE END</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">SELECT ename,       CASE         WHEN salary &gt;&#x3D; 10000 THEN &#39;高薪&#39;         WHEN salary &gt;&#x3D; 5000 THEN &#39;中薪&#39;         ELSE &#39;低薪&#39;       END AS 薪资等级FROM employees;</code></pre><h2 style="text-align: left;" >内置函数</h2><h3 style="text-align: left;" >单行函数</h3>对查询结果中的每一行数据单独操作，一行输入 → 一行输出，不会改变行数。<ol><li>字符串函数<br>MYSQL 中，字符串的位置是从 1 开始的</li></ol><table><thead><tr><th>函数</th><th>功能</th><th>示例</th></tr></thead><tbody><tr><td>LENGTH(str)</td><td>返回的是 字节数</td><td>SELECT LENGTH(‘你好’); → 6（每个汉字 3 字节，utf8 编码）</td></tr><tr><td>CHAR_LENGTH(字符)</td><td>返回字符串数</td><td>SELECT CHAR_LENGTH(‘你好’); → 2</td></tr><tr><td>CONCAT(a, b)</td><td>拼接字符串</td><td>SELECT CONCAT(‘陈’, ‘小 Q’); → 陈小 Q</td></tr><tr><td>SUBSTRING(str, start, length)</td><td>截取子串</td><td>SELECT SUBSTRING(‘abcdef’, 2, 3); → bcd</td></tr><tr><td>LOWER(str) &#x2F; UPPER(str)</td><td>转小写 &#x2F; 大写</td><td>SELECT LOWER(‘AbC’); → abc</td></tr><tr><td>REPLACE(str, from, to)</td><td>替换子串</td><td>SELECT REPLACE(‘abcabc’, ‘a’, ‘x’); → xbcxbc</td></tr></tbody></table><ol start="2"><li>数值函数</li></ol><table><thead><tr><th>函数</th><th>功能</th><th>示例</th></tr></thead><tbody><tr><td>ABS(x)</td><td>绝对值</td><td>SELECT ABS(-5); → 5</td></tr><tr><td>CEIL(x) &#x2F; FLOOR(x)</td><td>向上&#x2F;向下取整</td><td>CEIL(3.2) → 4, FLOOR(3.8) → 3</td></tr><tr><td>ROUND(x, d)</td><td>四舍五入到 d 位小数</td><td>ROUND(3.14159, 2) → 3.14</td></tr><tr><td>TRUNCATE(x, y)</td><td>返回数字 x 截取为 y 位小数的结果</td><td>TRUNCATE(3.14159, 1) → 3.1</td></tr><tr><td>RAND()</td><td>不带参数返回一个不同的随机数（0 到 1 之间） 带参数 每次生成的随机数都一样</td><td>SELECT RAND(); → 0.726348272</td></tr></tbody></table><ol start="3"><li>日期函数</li></ol><table><thead><tr><th>函数</th><th>功能</th><th>示例</th></tr></thead><tbody><tr><td>NOW()</td><td>返回当前系统日期和时间</td><td>SELECT NOW(); → 2025-05-13 10:00:00</td></tr><tr><td>CURDATE()</td><td>返回当前日期，只包括年月日</td><td>SELECT CURDATE(); → 2025-05-13</td></tr><tr><td>CURTIME()</td><td>返回当前时间（仅时分秒）</td><td>SELECT CURTIME(); → 10:00:00</td></tr><tr><td>DATE()</td><td>只提取日期部分</td><td>SELECT DATE(NOW()); → 2025-05-13</td></tr><tr><td>YEAR() &#x2F; MONTH() &#x2F; DAY() &#x2F; WEEK(date)</td><td>提取年&#x2F;月&#x2F;日&#x2F;第几周 周日为一周起始</td><td>SELECT WEEK(NOW()); → 20</td></tr><tr><td>WEEKDAY(date) &#x2F; DAYOFWEEK(date)</td><td>返回一周的第几天（0&#x3D;周一，6&#x3D;周日）&#x2F; 返回一周的第几天（1&#x3D;周日，7&#x3D;周六）</td><td>SELECT WEEKDAY(NOW()); → 1 &#x2F; SELECT DAYOFWEEK(NOW()); → 3</td></tr><tr><td>DATEDIFF(d1, d2)</td><td>计算两个日期差</td><td>DATEDIFF(‘2025-05-13’, ‘2025-05-01’) → 12</td></tr><tr><td>DATE_FORMAT(date, format)</td><td>将日期格式化为指定格式的字符串</td><td>SELECT DATE_FORMAT(NOW(), ‘%Y-%m-%d %H:%i:%s’); 结果示例：’2025-05-14 10:23:45’</td></tr><tr><td>STR_TO_DATE(str, format)</td><td>将字符串按照指定格式解析为日期。</td><td>SELECT STR_TO_DATE(‘2025-05-14 10:23:45’, ‘%Y-%m-%d %H:%i:%s’);</td></tr></tbody></table><ol start="4"><li>控制函数（条件）</li></ol><table><thead><tr><th>函数</th><th>功能</th><th>示例</th></tr></thead><tbody><tr><td>IF(condition, true, false)</td><td>条件判断</td><td>SELECT IF(1 &gt; 0, ‘是’, ‘否’); → 是</td></tr><tr><td>CASE WHEN THEN ELSE END</td><td>多条件判断</td><td>SELECT CASE WHEN score &gt;&#x3D; 90 THEN ‘优’ ELSE ‘良’ END</td></tr></tbody></table><h3 style="text-align: left;" >多行函数</h3>对整列或分组数据进行统计运算，一组数据输入 → 一个结果输出，常与 GROUP BY 搭配。<table><thead><tr><th>函数</th><th>功能</th><th>示例</th></tr></thead><tbody><tr><td>COUNT(*)</td><td>统计记录总数 如果是列名就是列非空值出现的次数</td><td>SELECT COUNT(列名&#x2F;*&#x2F;1) FROM emp;</td></tr><tr><td>SUM(col)</td><td>求和</td><td>SELECT SUM(salary) FROM emp;</td></tr><tr><td>AVG(col)</td><td>平均值</td><td>SELECT AVG(salary) FROM emp;</td></tr><tr><td>MAX(col)</td><td>最大值</td><td>SELECT MAX(salary) FROM emp;</td></tr><tr><td>MIN(col)</td><td>最小值</td><td>SELECT MIN(salary) FROM emp;</td></tr></tbody></table><p>举个例子：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token constant">SELECT</span> dept_id<span class="token punctuation">,</span> <span class="token constant">AVG</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token constant">AS</span> avg_salary<span class="token constant">FROM</span> emp<span class="token constant">GROUP</span> <span class="token constant">BY</span> dept_id<span class="token punctuation">;</span></code></pre><p><strong>注意：</strong><br>多行函数不能直接出现在 WHERE 子句中，需用 HAVING。<br>若混用普通字段与聚合函数，必须 GROUP BY。</p><h2 style="text-align: left;" >高级查询处理</h2><h3 style="text-align: left;" >分组查询</h3>通过 SQL 的 GROUP BY 子句，将查询结果按某一列或多列的值进行分组，并对每组数据进行聚合操作（如求和、计数、取最大值等）。GROUP BY 后可以跟多个字段，实现多级分组SELECT 分组字段, 聚合函数(字段)FROM 表名GROUP BY 分组字段;]]></content>
      
      
      <categories>
          
          <category> mySql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mySql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开发配置与经验总结</title>
      <link href="/configuration/"/>
      <url>/configuration/</url>
      
        <content type="html"><![CDATA[<h3 style="text-align: left;" > npm加速</h3><p>npm config list<br>npm config set registry <a href="https://registry.npmmirror.com/">https://registry.npmmirror.com</a><br>或者直接下载cnpm<br>npm install cnpm -g –registry&#x3D;<a href="https://registry.npmmirror.com/">https://registry.npmmirror.com</a><br>安装依赖cnpm install –save-dev</p><h3 style="text-align: left;" >代码规范</h3><h4 style="text-align: left;" >ESLint错误提示</h4><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://eslint.org/">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="">          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">帮助您查找和修复 JavaScript 代码中的问题</div>            <div class="tag-link-sitename">ESLint 官网</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><p>创建文件 .eslintrc 和 .eslintignore</p><p><strong>.eslintrc中</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>  <span class="token string-property property">"extends"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"plugin:vue/base"</span><span class="token punctuation">,</span>    <span class="token string">"plugin:vue/recommended"</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string-property property">"plugins"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"vue"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string-property property">"env"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token string-property property">"browser"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token string-property property">"node"</span><span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token string-property property">"parser"</span><span class="token operator">:</span> <span class="token string">"vue-eslint-parser"</span><span class="token punctuation">,</span>  <span class="token string-property property">"parserOptions"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token string-property property">"parser"</span><span class="token operator">:</span> <span class="token string">"babel-eslint"</span><span class="token punctuation">,</span>    <span class="token string-property property">"ecmaVersion"</span><span class="token operator">:</span> <span class="token number">2017</span><span class="token punctuation">,</span>    <span class="token string-property property">"sourceType"</span><span class="token operator">:</span> <span class="token string">"module"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token string-property property">"rules"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token string-property property">"no-unused-vars"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string-property property">"args"</span><span class="token operator">:</span> <span class="token string">"none"</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string-property property">"strict"</span><span class="token operator">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>    <span class="token string-property property">"valid-jsdoc"</span><span class="token operator">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>    <span class="token string-property property">"jsdoc/require-param-description"</span><span class="token operator">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>    <span class="token string-property property">"jsdoc/require-param-type"</span><span class="token operator">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>    <span class="token string-property property">"jsdoc/check-param-names"</span><span class="token operator">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>    <span class="token string-property property">"jsdoc/require-param"</span><span class="token operator">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>    <span class="token string-property property">"jsdoc/check-tag-names"</span><span class="token operator">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>    <span class="token string-property property">"linebreak-style"</span><span class="token operator">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>    <span class="token string-property property">"array-bracket-spacing"</span><span class="token operator">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>    <span class="token string-property property">"prefer-promise-reject-errors"</span><span class="token operator">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>    <span class="token string-property property">"comma-dangle"</span><span class="token operator">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>    <span class="token string-property property">"newline-per-chained-call"</span><span class="token operator">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>    <span class="token string-property property">"no-loop-func"</span><span class="token operator">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>    <span class="token string-property property">"no-empty"</span><span class="token operator">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>    <span class="token string-property property">"no-else-return"</span><span class="token operator">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>    <span class="token string-property property">"no-unneeded-ternary"</span><span class="token operator">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>    <span class="token string-property property">"no-eval"</span><span class="token operator">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>    <span class="token string-property property">"prefer-destructuring"</span><span class="token operator">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>    <span class="token string-property property">"no-param-reassign"</span><span class="token operator">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>    <span class="token string-property property">"max-len"</span><span class="token operator">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>    <span class="token string-property property">"no-restricted-syntax"</span><span class="token operator">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>    <span class="token string-property property">"no-plusplus"</span><span class="token operator">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>    <span class="token string-property property">"no-useless-escape"</span><span class="token operator">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>    <span class="token string-property property">"no-nested-ternary"</span><span class="token operator">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>    <span class="token string-property property">"radix"</span><span class="token operator">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>    <span class="token string-property property">"arrow-body-style"</span><span class="token operator">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>    <span class="token string-property property">"arrow-parens"</span><span class="token operator">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>    <span class="token string-property property">"vue/multi-word-component-names"</span><span class="token operator">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>    <span class="token string-property property">"vue/valid-v-for"</span><span class="token operator">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>    <span class="token string-property property">"vue/no-multiple-template-root"</span><span class="token operator">:</span> <span class="token string">"off"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token string-property property">"globals"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token string-property property">"$"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token string-property property">"axios"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token string-property property">"Vue"</span><span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>.eslintignore中</strong>放不需要做校验的文件</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">node_modules<span class="token operator">/</span><span class="token keyword">public</span><span class="token operator">/</span></code></pre><p>package.json文件中</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 校验js和vue文件 静默不报错</span>  <span class="token string-property property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token string-property property">"lint"</span><span class="token operator">:</span> <span class="token string">"eslint --quiet --ext js,vue ."</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></code></pre><p>配置好后运行 npm run lint</p><h4 style="text-align: left;">代码提交规范 </h4><p>我工作上是用Sourcetree代码可视化git平台去管理的<br>git checkout 创建或切换分支<br>main分支 develop 研发分支  永远固定存在的分支<br>feature-a feature-b 功能分支 来源于develop最后也会合并到develop分支上<br>hotfix分支 专门处理线上bug的 合并到master</p><p><strong>规范</strong></p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token operator">&lt;</span>type<span class="token operator">></span><span class="token punctuation">(</span><span class="token operator">&lt;</span>scope<span class="token operator">></span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token operator">&lt;</span>sybject<span class="token operator">></span></code></pre><ul><li>feat: 新功能 (feature)</li><li>fix: 修补bug</li><li>docs: 文档 (documentation)</li><li>style: 格式 (不影响代码运行的变动)</li><li>refactor: 重构 (既不是新增功能，也不是修改bug的代码变动)</li><li>test: 增加测试</li><li>chore: 构建过程或者辅助工具的变动</li></ul><p><strong>如何让每位同学都使用到这个规范呢</strong><br>validate-commit-msg库<br><strong>提交规范和代码错误检测整合到正常提交代码的流程中</strong><br>ghooks库<br><span style="background-color: rgba(241, 249, 132, 0.5);">npm install ghooks –save-dev</span><br/> </p><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://github.com/ghooks-org/ghooks">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="">          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">在 Git 项目中方便地管理 Git hooks（钩子）的工具</div>            <div class="tag-link-sitename">ghooks 官网</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><p>package.json中 自己可根据文档配置</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>  …  <span class="token string-property property">"config"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token string-property property">"ghooks"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token string-property property">"pre-commit"</span><span class="token operator">:</span> <span class="token string">"npm run lint"</span><span class="token punctuation">,</span>      <span class="token string-property property">"commit-msg"</span><span class="token operator">:</span> <span class="token string">"validate-commit-msg"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  …<span class="token punctuation">&#125;</span></code></pre><h3 style="text-align: left;" >移动端适配方案 </h3><ol><li>rem 适配方案:使用 rem 单位代替 px，通过动态设置根元素 <html> 的 font-size 来实现不同屏幕下的等比例缩放。可搭配 postcss-pxtorem 插件自动把 px 转 rem。<pre class="language-javascript" data-language="javascript"><code class="language-javascript">  <span class="token comment">// 基于设计稿 375px 的宽度</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//375px 屏幕时，html font-size = 37.5px 设置 1rem = 37.5px</span>  <span class="token keyword">const</span> baseSize <span class="token operator">=</span> <span class="token number">37.5</span><span class="token punctuation">;</span> <span class="token comment">// 设计稿是 375px 宽 => 1rem = 10px</span>  <span class="token keyword">function</span> <span class="token function">setRem</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> scale <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientWidth <span class="token operator">/</span> <span class="token number">375</span><span class="token punctuation">;</span> <span class="token comment">//屏幕相对于设计稿的缩放比例：</span>    document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>style<span class="token punctuation">.</span>fontSize <span class="token operator">=</span> baseSize <span class="token operator">*</span> scale <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">setRem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'resize'</span><span class="token punctuation">,</span> setRem<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>缺点：对设计稿要求统一（比如统一使用 375px 或 750px）； </li><li>viewport 适配方案（百分比布局 + meta viewport）<br>通过设置 viewport 的缩放比例 + 使用百分比、vw&#x2F;vh 单位进行布局，使页面在不同设备下显示一致。<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1, maximum-scale=1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre>使用 vw &#x2F; vh 单位开发页面：<pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100vw<span class="token punctuation">;</span> <span class="token comment">/* 屏幕宽度 */</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100vh<span class="token punctuation">;</span> <span class="token comment">/* 屏幕高度 */</span><span class="token punctuation">&#125;</span></code></pre>或者使用百分比配合媒体查询、flex 等布局方式。<br>总结：<div class="note simple"><p>移动端适配主要有 rem 和 viewport 两种方案。<br>rem 适配通过动态设置 html 的 font-size + 使用 rem 单位，能做到设计稿等比例缩放，适合大多数项目开发。<br>viewport 适配则更轻量，基于 vw&#x2F;vh 单位，但在一些机型上兼容性稍差。<br>实际开发中我常使用 rem + postcss-pxtorem 插件配合，兼顾适配效果和开发效率。</p></div></li></ol><h3 style="text-align: left;" >虚拟滚动 </h3><p><strong>只渲染视口（可见区域）中的 DOM 元素，避免一次性渲染所有数据，提升性能。</strong><br>设定参数： 显示多少行数据； 行高； 截取起始下标； 截取末尾下标；总数据列表的数组<br>挂载后拿到 :</p><ul><li>滚动列表高度 &#x3D; 行高 * 显示多少行数据</li><li>滚动条高度（所有数据的高度） &#x3D; 行高 * 整个数据组成的数组.length</li></ul><p>绑定滚动事件：做个节流</p><ul><li>拿到卷进去高度 scrollTop</li><li>卷进去的行数 &#x3D; 卷进去高度 &#x2F; 行高 【四舍五入一下】</li><li>截取起始下标 &#x3D; 卷进去的行数</li><li>截取末尾下标 &#x3D; 截取起始下标 + 显示多少行数据</li><li>卷进去的高度再平移回来内容：<code>translateY($&#123;offsetTop&#125;px)</code></li></ul><p> 总结：</p><div class="note simple"><p>假设我有 1000 条数据，每行高度 40px，页面一屏最多显示 10 条：<br>容器高度：400px<br>滚动容器高度：1000 * 40 &#x3D; 40000px<br>每次滚动时，我计算 scrollTop，算出当前滚到第几行，截取这一段数据进行渲染，并通过 translateY 将数据对齐到正确位置。 </p></div><h3 style="text-align: left;" >uniapp做小程序登陆</h3><p>1.调用uni.login这个api会返回code<br>2.请求<strong>微信一键登录接口</strong>把code传递给后端<br>会发生两种情况<br>2-1：用户在平台登陆并注册过，会直接返回用户的内容 + token<br>2-2；没有注册过用户第一次进入小程序，返回openId用户唯一标识、 会话密钥sessionKey、用户在微信开放平台账号下的唯一标识UnionID 进入到注册环节，uni.getUserProfile返回iv偏移量、rawData原始数据、encryptedData加密数据、signature签名<br>传递的参数就有openId,sessionKey,UnionID ＋ uni.getUserProfile返回的数据<br>以上注册后会返回token</p><h3 style="text-align: left;" >小程序支付</h3><p>用户点击立即下单会向后端传递数据时间戳、uuid、关于商品的、备注、地址<br>后端给前端返回<strong>支付参数</strong><br>调用API-uni.requestPayment({})把支付参数传过去<br>支付成功逻辑，跳转到“支付成功页”，支付失败处理，提示“支付已取消”</p><h3 style="text-align: left;" >小程序分享</h3><p>小程序分享主要依赖于页面生命周期中的 onShareAppMessage 和 onShareTimeline 这两个钩子函数来配置分享内容，分别对应：<br>分享给好友（聊天窗口）<br>分享到朋友圈（仅支持在具有权限的小程序中）<br>按钮加 open-type &#x3D; ‘share’</p>]]></content>
      
      
      <categories>
          
          <category> 前端项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 配置 </tag>
            
            <tag> 经验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue3学习笔记</title>
      <link href="/vue3-study/"/>
      <url>/vue3-study/</url>
      
        <content type="html"><![CDATA[<h3 style="text-align: left;" >script setup到底做了什么</h3><div class="note info no-icon flat"><p><strong>script setup 的本质：</strong><br>1. 代码会在 组件实例创建之前执行（在 beforeCreate 之前）。<br> 2. Vue 会自动处理作用域，所以 this 不可用。</p></div><span class='p code'>在 Vue 3 中， setup 是对 Vue 组合式 API（Composition API）的一个简化语法糖。</span><p>当使用 setup() 方式时，可以通过 setup(props, { expose }) 的 expose() 方法 来暴露实例成员<br>在 script setup 语法中，Vue 提供了一个编译时宏 defineExpose()（仅在编译时生效，不会在运行时生成额外代码），用来暴露实例成员,不会影响性能</p><h3 style="text-align: left;" >Proxy比defineProperty到底好在哪</h3><div class="note info no-icon flat"><p>Proxy 比 Object.defineProperty 更强大的地方在于 <strong>它能代理整个对象，而不是只能拦截单个属性</strong>。同时，Proxy 提供了 13 种拦截操作，支持监听对象新增&#x2F;，支持数组的变异方法，性能更优，而 Object.defineProperty 只能拦截 get 和 set，局限性更大。</p></div><p>  <strong>Vue 2 响应式的实现（基于 Object.defineProperty）</strong></p><ul><li>递归遍历对象的每个属性，使用 Object.defineProperty() 重新定义 getter 和 setter 。</li><li>每次访问属性时触发 getter，收集依赖（Dep）。</li><li>修改属性值时触发 setter，通知依赖更新（watcher）。 <br></li></ul><span style="background-color: rgb(165 209 251 / 23%); padding: 2px 4px; border-radius: 4px;">Vue 2 的缺点</span><ol><li>只能监听已有属性，无法监听新增&#x2F;删除的属性<br>解决方案：Vue 2 通过 $set() 手动添加新属性，但不够优雅。</li><li>数组的变异方法（push、pop、splice 等）无法被拦截<br>  Vue 2 需要用 Array.prototype 变异方法（需要手动重写 push&#x2F;pop 等）来手动触发视图更新，绕开 defineProperty 的限制。</li><li>必须递归遍历整个对象，性能开销大<br>  Vue 2 需要在初始化时递归遍历整个对象的所有属性，并为每个属性创建 getter&#x2F;setter。如果对象层级很深，初始化成本非常高。</li></ol><span style="background-color: rgb(165 209 251 / 23%); padding: 2px 4px; border-radius: 4px;">Vue 3 响应式的实现（基于 Proxy）</span><br><p>Vue 3 用 Proxy 直接代理整个对象，而不是单独处理每个属性：</p><pre class="language-javaScript" data-language="javaScript"><code class="language-javaScript">const handler &#x3D; &#123;  get(target, key, receiver) &#123;    console.log(&#96;读取属性 $&#123;key&#125;&#96;);    return Reflect.get(target, key, receiver);  &#125;,  set(target, key, value, receiver) &#123;    console.log(&#96;设置属性 $&#123;key&#125;，新值为 $&#123;value&#125;&#96;);    return Reflect.set(target, key, value, receiver);  &#125;&#125;;const data &#x3D; new Proxy(&#123; msg: &#39;hello&#39; &#125;, handler);console.log(data.msg); &#x2F;&#x2F; 读取属性 msgdata.msg &#x3D; &#39;world&#39;;    &#x2F;&#x2F; 设置属性 msg，新值为 worlddata.newProp &#x3D; &#39;new&#39;;  &#x2F;&#x2F; 设置属性 newProp，新值为 new</code></pre><p>Vue 3 的 reactive 通过 Proxy 进行封装：</p><pre class="language-javaScript" data-language="javaScript"><code class="language-javaScript">function reactive(target) &#123;  return new Proxy(target, &#123;    get(target, key, receiver) &#123;      console.log(&#96;读取 $&#123;key&#125;&#96;);      return Reflect.get(target, key, receiver);    &#125;,    set(target, key, value, receiver) &#123;      console.log(&#96;修改 $&#123;key&#125; -&gt; $&#123;value&#125;&#96;);      return Reflect.set(target, key, value, receiver);    &#125;,    deleteProperty(target, key) &#123;      console.log(&#96;删除 $&#123;key&#125;&#96;);      return Reflect.deleteProperty(target, key);    &#125;  &#125;);&#125;</code></pre><h3 style="text-align: left;">对路由的理解</h3><div class="note info no-icon flat"><p>路由的本质是 URL 与组件的映射关系。Vue Router 允许我们根据 URL 变化，动态地加载和渲染不同的 Vue 组件。</p></div><p><strong>创建路由:</strong> 使用 createRouter 和 createWebHistory 或 createWebHashHistory 创建路由实例。</p><pre class="language-javaScript" data-language="javaScript"><code class="language-javaScript"> const router &#x3D; createRouter(&#123;  history: createWebHistory(),  routes: staticRoutes,  scrollBehavior() &#123;    return &#123;top: 0, left: 0&#125;  &#125;,&#125;)</code></pre><p><strong>路由模式：</strong></p><ul><li>history 模式（createWebHistory）：基于 HTML5 History API，不带 #，需要服务器支持。</li><li>hash 模式（createWebHashHistory）：基于 URL 哈希 (#)，兼容性好，但 URL 不够美观。</li></ul><p><strong>动态路由：</strong>使用 :id 或 :name 定义动态路径，例如 &#x2F;user&#x2F;:id。<br><strong>路由懒加载：</strong>通过 import() 动态引入组件，减少首屏加载时间。<br><strong>导航守卫:</strong></p><ul><li>全局守卫（beforeEach、afterEach）：控制全局路由访问权限。</li><li>路由独享守卫（beforeEnter）：用于单个路由。</li><li>组件内守卫（beforeRouteEnter、beforeRouteUpdate、beforeRouteLeave）：控制组件级别的导航逻辑。<br>**编程式导航:**使用 router.push()、router.replace() 进行跳转。<br/></li></ul><p><strong>路由传参:</strong></p><ul><li>路径参数（params）：如 &#x2F;user&#x2F;:id，使用 $route.params 获取。</li><li>查询参数（query）：如 &#x2F;user?id&#x3D;1，使用 $route.query 获取。</li></ul><h3 style="text-align: left;">css动画@keyframes和过渡的区别</h3><p><strong>定义方式</strong></p><ul><li>@keyframes（动画）：需要通过 @keyframes 规则定义动画的关键帧，并配合 animation 属性使用。定义多个关键帧（0% ~ 100%），从而实现更复杂的动画效果，如循环、暂停、反向播放等。</li><li>transition（过渡）：直接在 CSS 规则中定义，只能对某些属性在<span class='p red'>两个状态</span>之间进行平滑过渡。</li></ul><p><strong>触发方式</strong></p><ul><li>@keyframes：动画可以自动执行（animation 设置 animation-play-state: running）或由 JavaScript 控制。</li><li>transition：需要某种状态变化（如 hover、focus 或 JavaScript 代码修改样式）来触发。</li></ul><p><strong>示例</strong><br>@keyframes 实现循环动画</p><pre class="language-javaScript" data-language="javaScript"><code class="language-javaScript">@keyframes move &#123;  0% &#123; transform: translateX(0); &#125;  50% &#123; transform: translateX(100px); &#125;  100% &#123; transform: translateX(0); &#125;&#125;.box &#123;  width: 100px;  height: 100px;  background-color: red;  animation: move 2s infinite;&#125;</code></pre><p>transition 实现鼠标悬停变化</p><pre class="language-javaScript" data-language="javaScript"><code class="language-javaScript">.box &#123;  width: 100px;  height: 100px;  background-color: red;  transition: background-color 0.5s ease, transform 0.5s;&#125;.box:hover &#123;  background-color: blue;  transform: scale(1.2);&#125;</code></pre><p><strong>总结</strong></p><ul><li>transition 更适合简单的状态切换，如 hover 变色、大小变化等。</li><li>@keyframes 更适合复杂的动画，如循环播放、多个关键帧控制等。</li><li>性能上，transition 一般比 @keyframes 更优，但两者都可以利用 GPU 加速（如 transform）。<div class="note pink icon-padding disabled"><i class="note-icon fab fa-cc-visa"></i><p>如果动画是由用户交互（如 hover、click）触发，并且只需要在两个状态之间平滑过渡，用 transition。</p></div></li></ul><h3 style="text-align: left;">对vue3生命周期的理解</h3><div class="note pink icon-padding disabled"><i class="note-icon fab fa-cc-visa"></i><p><strong>创建</strong>前&#x2F;后 beforeCreate &#x2F; created → 由 setup() 代替执行初始化逻辑。<br>作用：1.初始化响应式数据（ref、reactive）&nbsp;&nbsp;&nbsp;2.注册生命周期钩子（如 onMounted）&nbsp;&nbsp;&nbsp;3.返回组件中使用的数据与方法 4.没有访问 this，因为虚拟dom尚未生成，组件实例还没创建。<br><strong>挂载</strong>前&#x2F;后 beforeMount → onBeforeMount() DOM 挂载前调用。 &nbsp;&nbsp;&nbsp;虚拟dom正在构建VNode树,但尚未渲染到真实DOM中<br>mounted → onMounted() 组件挂载完成，也就是在DOM上进行渲染完成,DOM 可访问。响应式的副作用开始追踪依赖<br>作用: 1.发送请求&nbsp;&nbsp;&nbsp; 2.操作 DOM（比如获取 canvas 元素）&nbsp;&nbsp;&nbsp;3.初始化图表、视频等依赖真实 DOM 的内容<br><strong>更新</strong>前&#x2F;后 响应式数据发生变化，生成新树，新旧两个虚拟dom树通过 diff算法比较生成最小化的dom操作就是patch, beforeUpdate → onBeforeUpdate() &nbsp;&nbsp;&nbsp;<br>updated → onUpdated() patch结果同步到真实DOM后调用,DOM 更新完成<br><strong>卸载</strong>前&#x2F;后 组件将要被卸载,虚拟DOM将要被销毁。对应的VNode也被标记为失效 beforeUnmount → onBeforeUnmount() 用途：清理定时器、取消订阅、解绑事件等 &nbsp;&nbsp;&nbsp;<br>unmounted → onUnmounted()组件卸载完成。组件的副作用与VNode都已经解除绑定响应式依赖被释放 用途：通常用于清理收尾逻辑的确认。<br>onActivated() 和 onDeactivated()作用：用于 <keep-alive> 包裹的组件中，<strong>激活</strong>和<strong>停用</strong>时触发。<br>onErrorCaptured() 作用：捕获子组件中的<strong>错误</strong>，类似 try-catch。</p></div><p>onActivated() 和 onDeactivated()的使用场景：<br>当你有多个子组件切换显示，并使用 <keep-alive> 缓存某些组件时 只有在使用 <keep-alive> 时，onActivated 和 onDeactivated 才会触发，比如播放进度恢复：视频继续从上次进度播放（不从头播放），页面用 <keep-alive> 缓存，避免销毁视频组件 第一次进入时正常播放；离开页面（切换组件）时自动暂停并记录当前时间；再次返回页面时，从记录的时间恢复播放。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">  <span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>keep<span class="token operator">-</span>alive<span class="token operator">></span>    <span class="token operator">&lt;</span>ComponentA v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"current === 'A'"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>ComponentB v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"current === 'B'"</span> <span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>keep<span class="token operator">-</span>alive<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span></code></pre><p>在这种结构下，ComponentA 和 ComponentB 会被缓存，切换时不会重新销毁，而是停用（deactivated）和激活（activated）。</p><h3 style="text-align: left;">SPA与MPA的区别</h3><table><thead><tr><th>特性</th><th>SPA</th><th>MPA</th></tr></thead><tbody><tr><td>页面数量</td><td>一个页面</td><td>多个 HTML 页面</td></tr><tr><td>路由控制</td><td>前端控制（如 Vue Router）</td><td>后端控制（如 Spring Boot、PHP）</td></tr><tr><td>页面跳转</td><td>无刷新、局部渲染</td><td>整页刷新、跳转</td></tr><tr><td>首屏加载速度</td><td>较慢（依赖 JS 渲染）</td><td>较快（HTML 后端直接渲染）</td></tr><tr><td>交互体验</td><td>更流畅，接近原生应用</td><td>跳转明显、体验中等</td></tr><tr><td>SEO（搜索引擎优化）</td><td>不友好（需 SSR 或预渲染优化）</td><td>友好，直接输出 HTML</td></tr><tr><td>状态管理</td><td>前端统一管理（如 Pinia、Vuex）</td><td>页面间状态不共享，需后端或缓存支持</td></tr><tr><td>开发难度</td><td>高（需构建、打包、路由、权限等）</td><td>相对简单，传统开发流程</td></tr></tbody></table><h4 id="SPA的实现"><a href="#SPA的实现" class="headerlink" title="SPA的实现"></a>SPA的实现</h4><p>最核心的一点就是：实现无刷新页面跳转（前端路由控制）</p><ul><li>hash SEO 不友好(爬虫不识别 # 后内容)<br>1.URL 中带 # 符号<br>2.浏览器的地址栏改变 # 后面的部分不会导致页面刷新<br>3.使用 window.onhashchange 监听地址变化</li></ul><p>原理：浏览器不会将 # 后的内容发送给服务器，也不会刷新页面。前端通过监听 hashchange 事件来做路由切换。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'hashchange'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'当前路由是：'</span><span class="token punctuation">,</span> location<span class="token punctuation">.</span>hash<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>Vue Router 中的使用</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">history</span><span class="token operator">:</span> <span class="token function">createWebHashHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// hash 模式</span>  <span class="token literal-property property">routes</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>history SEO 更容易优化（可配合 SSR）<br>1.使用 pushState &#x2F; replaceState 操作浏览器历史记录<br>2.URL 没有 #，如：<a href="http://example.com/home">http://example.com/home</a><br>3.前端拦截所有点击跳转并用 JS 改变 URL</li></ul><p>原理：通过 history.pushState() 改变 URL,监听 popstate 事件响应浏览器前进&#x2F;后退操作,初次访问或刷新时，URL 会向服务器发请求</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">window<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">pushState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">'/home'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'popstate'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'页面地址发生变化'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>Vue Router 中的使用</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">history</span><span class="token operator">:</span> <span class="token function">createWebHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// history 模式</span>  <span class="token literal-property property">routes</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="如何给SPA做SEO"><a href="#如何给SPA做SEO" class="headerlink" title="如何给SPA做SEO"></a>如何给SPA做SEO</h4><p>SSR 服务端渲染 后端生成完整 HTML 返回</p><h4 id="SPA首屏加载-优化方案"><a href="#SPA首屏加载-优化方案" class="headerlink" title="SPA首屏加载 优化方案"></a>SPA首屏加载 优化方案</h4><p>FCP指标：整个页面不是全部渲染完成 而是展示出当前视图的内容<br>计算首屏时间</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'DPMContentLoad'</span><span class="token punctuation">,</span><span class="token parameter">e</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'FCP'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><p>加载慢的原因：1.网络原因&nbsp;&nbsp;&nbsp; 2.资源文件过大&nbsp;&nbsp;&nbsp; 3.资源是否重复发送请求&nbsp;&nbsp;&nbsp; 4.执行JS–&gt;页面阻塞<br>优化：<br>1.减少入口文件体积–路由懒加载 不同组件拆分成不同的代码模块</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// Vue 路由懒加载</span><span class="token keyword">const</span> <span class="token function-variable function">Login</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/views/Login.vue'</span><span class="token punctuation">)</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span><span class="token number">2.</span>静态资源本地缓存<span class="token operator">--</span>localStorage <span class="token operator">/</span> <span class="token constant">HTTP</span>缓存cache<span class="token operator">-</span>control Etag <span class="token operator">/</span> service worker<span class="token number">3.</span><span class="token constant">UI</span>框架elementUI按需加载<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ElButton <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'element-plus'</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>ElButton<span class="token punctuation">)</span><span class="token number">4.</span>避免组件重复打包<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span>`js<span class="token literal-property property">optimization</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">splitChunks</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">chunks</span><span class="token operator">:</span> <span class="token string">'all'</span><span class="token punctuation">,</span>    <span class="token literal-property property">minChunks</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'common'</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="图片资源压缩"><a href="#图片资源压缩" class="headerlink" title="图片资源压缩"></a>图片资源压缩</h4><p>懒加载：滚动到视图再加载图片loading&#x3D;”lazy”<br>使用 WebP 格式：体积更小</p><h4 id="Gzip"><a href="#Gzip" class="headerlink" title="Gzip"></a>Gzip</h4><p>Gzip 是一种压缩算法，可以压缩 HTML、CSS、JS 等文本资源，减小传输体积，从而加快页面加载速度。（Nginx 开启 Gzip 配置）</p><h4 id="SSR"><a href="#SSR" class="headerlink" title="SSR"></a>SSR</h4><p>SSR 是在服务器就把 HTML 内容生成好，直接返回给浏览器，而不是等 JS 执行完才渲染页面。</p><h3 style="text-align: left;" >三栏布局的实现方式(圣杯模式)</h3><p>三栏布局包括一个固定宽度的左侧栏、一个固定宽度的右侧栏，以及一个自适应宽度的主要内容区域</p><ol><li>flex布局 整体盒子display:flex; 左右固定宽度例如width:200px;中间flex:1</li><li>浮动布局 整体盒子width:100%; 左盒子固定宽度例如200px,float:left;右盒子固定宽度例如200px,float:right;中间盒子margin-left和margin-right分别200px</li><li>绝对定位 整体盒子position:relative;左右盒子宽度固定200px;position:absolute; top:0;左盒子left:0;右盒子right:0;最后中间盒子margin: 0 200ox;<h3 style="text-align: left;" >画一条0.5px的线</h3></li></ol><pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">.line</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 1px<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> #ccc<span class="token punctuation">;</span>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scaleY</span><span class="token punctuation">(</span>0.5<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">transform-origin</span><span class="token punctuation">:</span> top<span class="token punctuation">;</span> <span class="token comment">/* 缩放的基准点是“上边缘”，即从上向下缩放 */</span>   <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span> <span class="token comment">/*把上下左右外边距都清除*/</span><span class="token punctuation">&#125;</span></code></pre><h3 style="text-align: left;" >什么是闭包有什么用</h3><p>闭包是内部函数引用外部函数局部变量的一个引用关系，这个引用关系是用一个对象去描述的，这个对象存在于内部函数对象身上closure,外部函数调用几次就有几套独立机制的闭包机制<br>产生条件：函数嵌套函数；内部函数引用外部函数的局部变量；调用外部函数时就产生闭包，闭包不是在调用函数内部时产生的，而是在创建内部函数对象时产生。<br>作用：延长局部变量的生命周期，让函数外部间接操作内部的局部变量, 保护变量不被销毁（持久化变量）比如计数器、节流防抖中，都需要保存状态变量。<br>缺点：闭包分为临时闭包和永久闭包，永久闭包不会被销毁就可能产生内存泄漏，所以闭包使用完成，记得手动释放，让内部函数对象成为垃圾对象，断开指向它的所有引用<br>用到过 闭包的场景：</p><p><strong>防抖函数</strong>：这里 timer 变量在返回的函数中被引用，形成闭包，使得它不会被销毁。防抖函数通过闭包保存了 timer 变量，让每次触发时都可以取消上一次的定时器，只保留最后一次，从而实现“最后一次操作后才触发”的效果。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> delay</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token comment">// 定义一个定时器变量</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//接收任意数量的参数，并把它们收集到一个数组里。</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token comment">// 每次调用时都清除前一个定时器</span>    <span class="token comment">// 重新设置定时器，等 delay 毫秒后执行</span>    timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span>    <span class="token comment">// 过 delay 毫秒后，调用 fn 函数，并把你传入的参数原封不动地传进去，同时保持 this 不变。</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 style="text-align: left;" >如何遍历对象</h3><ol><li>使用 for…in（遍历可枚举属性，包括继承的属性） <pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li><li>使用 Object.keys()（获取自身可枚举的“键”） <pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> keys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>  keys<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">key</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li>使用 Object.entries()（获取键值对数组） <pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> entries <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>  entries<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li>使用 Reflect.ownKeys()（获取所有自身属性，包括不可枚举和 symbol）  <pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  Reflect<span class="token punctuation">.</span><span class="token function">ownKeys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">key</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 style="text-align: left;" >如何判断JS的数据类型</h3>首先想到的是 typeof 但是typeof在检验null、对象、或者数组是不能检测出精准的数据类型，都会返回object。<br>然后想到a instanceof b 专门判断对象的数据,检查a的隐式原型属性是与b的显示原型</li></ol><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">null</span> <span class="token keyword">instanceof</span> <span class="token class-name">Object</span> <span class="token comment">// false</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">Object</span> <span class="token comment">// true</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">Object</span> <span class="token comment">// true</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">Array</span> <span class="token comment">// false</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">Array</span> <span class="token comment">// true</span></code></pre><p>结论： 任何对象的instanceof Object都是true无法帮我们判定死是否是对象或者数组<br>判断是否为数组Array.isArray()<br>最终办法： Object.prototype.toString.call(obj).slice(8,-1)</p><h3 style="text-align: left;" >说说常见的数组方法</h3><h3 style="text-align: left;" >防抖和节流</h3><p><strong>防抖</strong>：在事件触发后一段时间<strong>只执行一次</strong>，如果在这段时间内事件被重新触发，则重新计时。搜索框输入联想、防止按钮连点、resize、scroll等高频操作优化<br><strong>节流</strong>：一定时间内<strong>只执行一次</strong>，即使事件持续触发，也只会每隔设定时间执行一次。页面滚动监听、拖拽事件、游戏中的按键响应、窗口 resize 监听<br>防抖代码:当事件触发后，会设置一个定时器，在指定的延迟时间后在执行相应的操作，如果在延迟时间内再次触发了同一事件，那么就会清除之前的定时器，并重新设置新的定时器直到事件触发完成</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> delay</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>    timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>节流代码：当事件触发后，事件处理函数会在固定的时间间隔内执行，即使事件被频繁触发也是如此</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> delay</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> lastTime <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> now <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>now <span class="token operator">-</span> lastTime <span class="token operator">></span> delay<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>      lastTime <span class="token operator">=</span> now<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 style="text-align: left;" >ref和reactive 的区别</h3><ol><li>数据类型不同<br>ref用于包装JS的任意对象（基本数据类型＋对象），而reactive用于包装对象和数组等复杂类型的数据。</li><li>使用方式不同:<br>如果将一个对象赋值给 ref，那么这个对象将通过reactive转为具有深层次响应式的对象<br>ref需通过.value访问 reactive可以直接访问该对象的属性或方法<br><strong>原理：</strong><br>如果将一个对象赋值给 ref，那么这个对象将通过reactive转为具有深层次响应式的对象<br>而reactive响应式的原理是建了一个被Proxy代理的对象，Proxy里面代理了各种操作，在读取的时候触发track函数，在写入的时候触发trigger函数。<br>ref的本质就是实例化了RefImpl类得到了一个对象，访问这个对象的value属性时触发track，设置这个对象的value属性时触发trigger<br><strong>使用原则：</strong><br>若需要一个响应式对象，且层级较深，推荐使用 reactive</li></ol><h3 style="text-align: left;" >GET 和 POST 请求的区别</h3><p>🔢 <strong>背景</strong>：最初是浏览器与服务器之间的通讯协议，GET用于读取资源，POST用于提交表单，后来被扩充到接口格式的定义，GET和POST作为接口的请求方式<br>🧭 <strong>区别</strong>：</p><ul><li>传参方式不同<br>GET：参数拼接在 URL 后面，格式为例：&#x2F;api&#x2F;user?id&#x3D;123<br>POST：参数放在 请求体（body） 中，不会出现在 URL 中。例子：请求体中 {“id”: 123}</li><li>安全性对比<br>GET：参数暴露在 URL 中，不适合传输敏感信息（如密码）。易被浏览器缓存，参数也可能被记录在浏览历史中。<br>POST：相对更安全（虽然本质上也不加密），因为参数藏在请求体中。</li><li>数据长度限制<br>GET： URL 有长度限制（不同浏览器&#x2F;服务器限制不同，通常在 2KB～8KB）。<br>POST：理论上没有大小限制，适合上传大文件或大量数据。</li><li>浏览器行为<br>GET 请求可以被收藏、缓存、重复提交（刷新不弹窗）。能由浏览器自动发起（如img-src,资源加载）<br>POST 请求不能被浏览器缓存，刷新会弹出“是否重新提交表单”提示。</li></ul><hr/><h3 style="text-align: left;" >强缓存和协商缓存</h3><p>🧱 <strong>强缓存</strong>（Strong Cache）<br>浏览器 <strong>先检查本地缓存是否可用</strong>，如果可用则直接使用，不发起请求。<br>常见字段</p><ul><li>Expires（HTTP&#x2F;1.0）：设置一个 绝对时间点（GMT格式）</li><li>Cache-Control（HTTP&#x2F;1.1）：设置相对时间（如 max-age&#x3D;3600 表示缓存 1 小时）</li></ul><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 表示该资源在缓存中可以保存 3600 秒内不再请求服务器。</span>Cache<span class="token operator">-</span>Control<span class="token operator">:</span> max<span class="token operator">-</span>age<span class="token operator">=</span><span class="token number">3600</span></code></pre><p>🧱 <strong>协商缓存</strong>（Negotiation Cache）<br>当强缓存失效时，浏览器会向服务器发送请求，并携带资源的 <strong>标识信息</strong>（如时间戳或文件哈希）进行协商。</p><ul><li>如果资源没变，返回 304 Not Modified，浏览器使用缓存。</li><li>如果资源变了，返回 200 OK 和新资源。<br/></li></ul><p>协商机制:<br>ETag + If-None-Match<br>ETag 是资源内容的哈希值。浏览器下次请求带上 If-None-Match，服务器判断是否相同。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">ETag</span><span class="token operator">:</span> <span class="token string">"abc123"</span>If<span class="token operator">-</span>None<span class="token operator">-</span>Match<span class="token operator">:</span> <span class="token string">"abc123"</span></code></pre><p><strong>❓ 为什么有了强缓存还需要协商缓存？</strong><br>✅ 原因一：强缓存有时间限制</p><ul><li>强缓存依赖 max-age 或 Expires，缓存一旦过期就会失效。</li><li>浏览器此时需要向服务器确认资源是否更新 —— 就用协商缓存来减少资源浪费。</li></ul><p>✅ 原因二：资源可能在有效期内就更新了</p><ul><li>比如 max-age&#x3D;3600，但 10 分钟后服务器更新了资源，客户端还在用旧的缓存内容。</li><li>这时只有协商缓存能解决这个问题：它允许服务器来判断资源是否真的需要更新。<br>所以强缓存 + 协商缓存是浏览器缓存的两道防线，优先走强缓存，失败后才协商。都失败才会下载新资源，减少带宽浪费，提高性能。</li></ul><h3 style="text-align: left;" >项目中有没有用过缓存策略？怎么设置的？</h3><ol><li><p>请求头缓存（服务端缓存策略）<br>配合后台设置缓存头，比如：<br>Cache-Control: max-age&#x3D;3600<br>前端可以利用浏览器强缓存，不重复请求资源</p></li><li><p>组件层面的缓存 —— 页面切换时保留状态,提高页面切换性能。</p></li></ol><p>🧩 使用场景：<br>比如在一个“列表页 → 详情页”切换中，返回列表时希望保留滚动位置、搜索条件等状态。<br>🧩 设置方式：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>keep<span class="token operator">-</span>alive include<span class="token operator">=</span><span class="token string">"UserList"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>RouterView <span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>keep<span class="token operator">-</span>alive<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span></code></pre><p>或使用 Vue Router 的 meta 字段 + 动态 include：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>  <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/user/list'</span><span class="token punctuation">,</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'UserList'</span><span class="token punctuation">,</span>  <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/views/UserList.vue'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token literal-property property">meta</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">keepAlive</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-vue" data-language="vue"><code class="language-vue">&lt;keep-alive&gt;  &lt;router-view v-slot&#x3D;&quot;&#123; Component, route &#125;&quot;&gt;    &lt;component :is&#x3D;&quot;Component&quot; v-if&#x3D;&quot;route.meta.keepAlive&quot; &#x2F;&gt;  &lt;&#x2F;router-view&gt;&lt;&#x2F;keep-alive&gt;</code></pre><ol start="3"><li>请求接口层面的缓存 —— 减少重复请求、提高响应速度</li></ol><p>🧩 使用场景：<br>做的管理端里，比如新建用户要选择部门，这个下拉框来源于接口 &#x2F;api&#x2F;dept&#x2F;list 这个部门列表基本不会变，但每次打开这个页面都发一次请求？多页面还会重复请求？<br>请求一次之后，缓存起来，下次直接使用缓存：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 缓存在 Pinia 或 memory 中</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>deptList<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/api/dept/list'</span><span class="token punctuation">)</span>  deptList<span class="token punctuation">.</span>value <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span class="token punctuation">&#125;</span></code></pre><p><strong>如果我缓存了数据，那怎么知道它已经变化、该重新请求了？</strong></p><ul><li>用户主动触发（最常见方式）await getExamList() &#x2F;&#x2F; 重新拉取，更新缓存</li><li>设置过期时间（自动判断）比如你把数据存在 localStorage 里，可以加个时间戳判断是否“过期”：</li><li>后台返回版本号 &#x2F; 时间戳 &#x2F; 哈希（高级策略）<br>这个常用于大公司大型项目，服务端接口会返回一个 version 或 lastModified 字段：<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>  <span class="token string-property property">"data"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string-property property">"version"</span><span class="token operator">:</span> <span class="token string">"v3.2"</span><span class="token punctuation">,</span>  <span class="token string-property property">"lastModified"</span><span class="token operator">:</span> <span class="token string">"2025-04-14T10:32:00"</span><span class="token punctuation">&#125;</span></code></pre>前端请求时带上这个标识：<pre class="language-typescript" data-language="typescript"><code class="language-typescript">axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/api/news/list'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  headers<span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token string-property property">'If-Modified-Since'</span><span class="token operator">:</span> lastModified <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre>服务端会判断数据有没有变，如果没变就返回 304 Not Modified，这其实就是「协商缓存」的思想。</li></ul><h3 style="text-align: left;" >浏览器存储的方式有哪些</h3><p>cookie<strong>保存状态</strong>  LocalStorage <strong>存储东西</strong></p><h4 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h4><p>它的诞生是为了解决HTTP协议的无状态问题，服务器无法识别不同用户或跟踪用户的状态，但也导致了一些问题比如无法保持用户的登陆状态等<br>主要用于会话管理，如登录状态（token），也可存储少量数据。<br>每次请求都会自动携带到服务器，适合服务器识别用户。<strong>会过期</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> <span class="token string">"username=Tom; expires=Fri, 31 Dec 2025 23:59:59 GMT"</span></code></pre><h4 id="LocalStorage"><a href="#LocalStorage" class="headerlink" title="LocalStorage"></a>LocalStorage</h4><p>数据长期保留，除非手动删除<br>适合存储：用户设置、主题偏好、缓存列表等。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">'token'</span><span class="token punctuation">,</span> <span class="token string">'abc123'</span><span class="token punctuation">)</span><span class="token keyword">const</span> token <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'token'</span><span class="token punctuation">)</span></code></pre><h4 id="SessionStorage"><a href="#SessionStorage" class="headerlink" title="SessionStorage"></a>SessionStorage</h4><p>仅当前“标签页”有效，关闭页面就清空。<br>适合存储：表单填写中间状态、当前页状态。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">sessionStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">'step'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">)</span><span class="token keyword">const</span> step <span class="token operator">=</span> sessionStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'step'</span><span class="token punctuation">)</span></code></pre><h4 id="IndexedDB"><a href="#IndexedDB" class="headerlink" title="IndexedDB"></a>IndexedDB</h4><p>特点：浏览器内建的 MySQL 数据库，支持结构化数据、事务、索引。<br>适合场景：大数据缓存、本地搜索数据、本地聊天记录、离线应用。</p><p><strong>登陆的token放cookie还是放localstrorage</strong><br>🎯 结论先说：<br>如果你对安全要求较高，推荐放在 Cookie 中，并设置 HttpOnly + Secure。否则，放在 localStorage 也可以，简单易用但安全性略差。容易被 XSS 攻击读出 token → 导致用户身份泄露。<br>❗ Cookie 的坑：如果设置了跨域请求，需要加上：axios.defaults.withCredentials &#x3D; true<br>并配合后端 Access-Control-Allow-Credentials: true<br>👇 那么什么时候用 Cookie？什么时候用 localStorage？<br>✅ 选择 Cookie 的场景（安全优先）：</p><ul><li>登录态需要被服务器自动识别（比如传统服务端渲染项目）</li><li>对安全性要求较高的项目（如后台管理系统）</li><li>想防止 XSS 窃取 token（使用 HttpOnly）<pre class="language-javascript" data-language="javascript"><code class="language-javascript">Set<span class="token operator">-</span>Cookie<span class="token operator">:</span> token<span class="token operator">=</span>abc123<span class="token punctuation">;</span> HttpOnly<span class="token punctuation">;</span> Secure<span class="token punctuation">;</span> SameSite<span class="token operator">=</span>Strict</code></pre></li></ul><p><strong>🔐 Cookie + HttpOnly 方案中，token 过期怎么办？</strong></p><p class='p cyan'>短效 token + 刷新 token blue</p><p>服务端设置两个 Cookie：<br>access_token：短效，5-15分钟过期，HttpOnly<br>refresh_token：长效，7天-30天过期，HttpOnly<br><strong>流程如下：</strong><br>1.前端发请求，access_token 自动随 Cookie 发送<br>2.如果接口返回 401（token 过期），前端自动调用「刷新 token 接口」<br>3.服务端验证 refresh_token，返回新的 access_token<br>4.前端重试原请求<br>后端设置 Cookie 的时候可以指定 Expires 或 Max-Age：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">Set<span class="token operator">-</span>Cookie<span class="token operator">:</span> access_token<span class="token operator">=</span>abc123<span class="token punctuation">;</span> HttpOnly<span class="token punctuation">;</span> Secure<span class="token punctuation">;</span> SameSite<span class="token operator">=</span>Strict<span class="token punctuation">;</span> Max<span class="token operator">-</span>Age<span class="token operator">=</span><span class="token number">900</span>Set<span class="token operator">-</span>Cookie<span class="token operator">:</span> refresh_token<span class="token operator">=</span>xyz456<span class="token punctuation">;</span> HttpOnly<span class="token punctuation">;</span> Secure<span class="token punctuation">;</span> SameSite<span class="token operator">=</span>Strict<span class="token punctuation">;</span> Max<span class="token operator">-</span>Age<span class="token operator">=</span><span class="token number">604800</span></code></pre><p>access_token 15 分钟过期 refresh_token 7 天过期</p><p>✅ 选择 localStorage 的场景（灵活易用）：</p><ul><li>单页应用（SPA）前后端完全分离</li><li>使用 JWT + 手动加请求头（如 axios 拦截器）</li><li>对安全要求不是极高，但追求开发便利</li></ul><pre class="language-javascript" data-language="javascript"><code class="language-javascript">  <span class="token comment">// 请求拦截器：在每个请求发送之前都添加 token 到请求头</span>instance<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>  <span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 获取 token，假设存储在 localStorage 中</span>    <span class="token keyword">const</span> token <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'token'</span><span class="token punctuation">)</span>    <span class="token comment">// 如果 token 存在，则在请求头中添加</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>token<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      config<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'Authorization '</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>token<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> config  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">)</span></code></pre><h3 style="text-align: left margin-top:'100px';" >浅拷贝和深拷贝</h3><h4 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h4><p>拷贝对象的第一层属性值，如果属性是引用类型（如对象、数组），只拷贝地址，不复制内容。修改嵌套对象，会影响原对象。<br>总结一句话： 第一层复制，内部引用地址共享</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span>obj1 <span class="token punctuation">&#125;</span> <span class="token comment">// 浅拷贝</span>obj2<span class="token punctuation">.</span>b<span class="token punctuation">.</span>c <span class="token operator">=</span> <span class="token number">999</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>b<span class="token punctuation">.</span>c<span class="token punctuation">)</span> <span class="token comment">// 999 </span></code></pre><p>常见方法：<br>Object.assign({}, obj)<br>{ …obj }</p><h4 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h4><p>拷贝对象及其所有层级的值，互不影响。总结一句话：层层复制，彻底独立<br>浅拷贝：只复制一层引用，适合不修改嵌套属性的场景；<br>深拷贝：彻底复制每一层，适合需要修改嵌套结构的场景。编辑场景&#x2F;撤销功能,就必须保存独立的一份完整拷贝，这样以后回退时才不会影响原始数据 —— 所以要用 深拷贝！</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 简单深拷贝</span>obj2<span class="token punctuation">.</span>b<span class="token punctuation">.</span>c <span class="token operator">=</span> <span class="token number">999</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>b<span class="token punctuation">.</span>c<span class="token punctuation">)</span> <span class="token comment">// 2 </span></code></pre><p>常见方法：<br>const newObj &#x3D; JSON.parse(JSON.stringify(obj)) ❌ 会丢失：函数、undefined、Symbol、循环引用等<br>const deepCopy &#x3D; structuredClone(obj) （现代浏览器支持）<br><strong>手写深拷贝（递归）</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> obj <span class="token operator">!==</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> obj  <span class="token keyword">const</span> result <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    result<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> result<span class="token punctuation">&#125;</span></code></pre><p>🚨 浅拷贝带来的常见 bug</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">user</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Tom'</span><span class="token punctuation">,</span>    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> copy <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span>state <span class="token punctuation">&#125;</span>copy<span class="token punctuation">.</span>user<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">20</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>user<span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token comment">// 变成了 20，浅拷贝坑</span></code></pre><h3 style="text-align: left;" >数组去重的方法（3种）</h3><ol><li><strong>用 Set 只允许存储唯一的值</strong><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token keyword">const</span> uniqueArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>uniqueArr<span class="token punctuation">)</span> <span class="token comment">// [1, 2, 3, 4]</span></code></pre></li><li><strong>利用filter方法来遍历数组，只保留第一次出现的元素</strong><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token keyword">const</span> uniqueArr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=></span> arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">===</span> index<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>uniqueArr<span class="token punctuation">)</span> <span class="token comment">// [1, 2, 3, 4]</span></code></pre></li><li><strong>使用reduce方法逐个遍历数组元素，构建一个新的数组，只添加第一次出现的元素</strong><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token keyword">const</span> uniqueArr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> cur</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>acc<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">)</span> acc<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span>  <span class="token keyword">return</span> acc<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>uniqueArr<span class="token punctuation">)</span> <span class="token comment">// [1, 2, 3, 4]</span></code></pre></li></ol><h3 style="text-align: left;" >介绍下promise.all </h3><p>工作中经常用到它来<strong>并发请求多个接口、等待所有结果</strong>比如同时加载多个接口数据（页面初始化），并行上传多个文件，并发处理多个异步任务（比如图片、资源等）等<br>✅ 一句话介绍：</p><div class="note simple"><p>Promise.all 用于并行执行多个 Promise，等全部成功才返回，其中任何一个失败都会进入 .catch。</p></div><pre class="language-javascript" data-language="javascript"><code class="language-javascript">Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>promise1<span class="token punctuation">,</span> promise2<span class="token punctuation">,</span> promise3<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>res1<span class="token punctuation">,</span> res2<span class="token punctuation">,</span> res3<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 所有成功，按顺序拿结果</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 只要有一个失败，就走这里</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><p>场景：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">getUser</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/api/user'</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">getRoles</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/api/roles'</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">getMenu</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/api/menu'</span><span class="token punctuation">)</span>Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getRoles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getMenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>userRes<span class="token punctuation">,</span> rolesRes<span class="token punctuation">,</span> menuRes<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'用户信息:'</span><span class="token punctuation">,</span> userRes<span class="token punctuation">.</span>data<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'角色信息:'</span><span class="token punctuation">,</span> rolesRes<span class="token punctuation">.</span>data<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'菜单信息:'</span><span class="token punctuation">,</span> menuRes<span class="token punctuation">.</span>data<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'有一个接口失败了:'</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><p>🧠 进阶扩展：如果你想“部分失败不影响其他的成功”，可以用<strong>Promise.allSettled</strong>：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">Promise<span class="token punctuation">.</span><span class="token function">allSettled</span><span class="token punctuation">(</span><span class="token punctuation">[</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">,</span> p3<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">results</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  results<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">result</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token string">'fulfilled'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'成功：'</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span>value<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'失败：'</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span>reason<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h3 style="text-align: left;" >lastIndexOf() </h3><p>lastIndexOf() 是 JavaScript 中字符串（String）对象的一个方法，用来查找<strong>某个子字符串在原字符串中最后一次出现的位置（索引）</strong>。<br>例子</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">'path/to/middleware/custom/test.js'</span><span class="token punctuation">;</span><span class="token comment">// 查找最后一个斜杠的位置</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 28（最后一个 '/' 在位置28）</span><span class="token comment">// 查找 middleware 最后出现的位置</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">'middleware'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 9（首次出现位置）</span><span class="token comment">// 截取 middleware 之后的部分</span><span class="token keyword">const</span> result <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">'middleware/'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'middleware/'</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: custom/test.js</span></code></pre><h3 style="text-align: left;" >substring() </h3><p>substring() 是 JavaScript 中字符串（String）对象的一个方法，用来从字符串中提取子字符串（截取一部分字符串）。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">"hello world"</span><span class="token punctuation">;</span><span class="token comment">// 从索引0开始，到索引5之前结束（不包含5）</span><span class="token keyword">const</span> part1 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>part1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "hello"</span><span class="token comment">// 从索引6开始截取到末尾</span><span class="token keyword">const</span> part2 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>part2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "world"</span></code></pre><h3 style="text-align: left;" >Object.assign()</h3><div class="note simple"><p>Object.assign() 用于将一个或多个源对象的可枚举属性复制到目标对象上，并返回目标对象。</p></div><p>Object.assign(target, …sources)</p><ul><li>target：目标对象，属性会被添加到它身上</li><li>sources：一个或多个源对象，从中复制属性<br>例子:<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Tom'</span> <span class="token punctuation">&#125;</span><span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span> <span class="token punctuation">&#125;</span><span class="token keyword">const</span> c <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token comment">// &#123; name: 'Tom', age: 18 &#125;</span><span class="token comment">// 也可以覆盖</span>Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Tom'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Jerry'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">// 结果：&#123;name: 'Jerry'&#125;</span><span class="token comment">// 浅拷贝对象 const newObj = Object.assign(&#123;&#125;, oldObj)</span><span class="token comment">// 不会复制原型链上的属性，只拷贝自身的可枚举属性</span><span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">nested</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token keyword">const</span> obj2 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> obj1<span class="token punctuation">)</span>obj2<span class="token punctuation">.</span>nested<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">999</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>nested<span class="token punctuation">.</span>a<span class="token punctuation">)</span> <span class="token comment">// 999（浅拷贝）</span></code></pre>应用场景:<br>1.对象合并（配置合并、状态合并）<br>2.浅拷贝对象<br><strong>扩展</strong> - 与扩展运算符区别:<br>都是浅拷贝，但扩展运算符不会复制 getter&#x2F;setter<br>Object.assign() 会调用 getter 方法</li></ul><h3 style="text-align: left;" >移动端适配方案 </h3><ol><li>rem 适配方案:使用 rem 单位代替 px，通过动态设置根元素 <html> 的 font-size 来实现不同屏幕下的等比例缩放。可搭配 postcss-pxtorem 插件自动把 px 转 rem。<pre class="language-javascript" data-language="javascript"><code class="language-javascript">  <span class="token comment">// 基于设计稿 375px 的宽度</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//375px 屏幕时，html font-size = 37.5px 设置 1rem = 37.5px</span>  <span class="token keyword">const</span> baseSize <span class="token operator">=</span> <span class="token number">37.5</span><span class="token punctuation">;</span> <span class="token comment">// 设计稿是 375px 宽 => 1rem = 10px</span>  <span class="token keyword">function</span> <span class="token function">setRem</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> scale <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientWidth <span class="token operator">/</span> <span class="token number">375</span><span class="token punctuation">;</span> <span class="token comment">//屏幕相对于设计稿的缩放比例：</span>    document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>style<span class="token punctuation">.</span>fontSize <span class="token operator">=</span> baseSize <span class="token operator">*</span> scale <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">setRem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'resize'</span><span class="token punctuation">,</span> setRem<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>缺点：对设计稿要求统一（比如统一使用 375px 或 750px）； </li><li>viewport 适配方案（百分比布局 + meta viewport）<br>通过设置 viewport 的缩放比例 + 使用百分比、vw&#x2F;vh 单位进行布局，使页面在不同设备下显示一致。<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1, maximum-scale=1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre>使用 vw &#x2F; vh 单位开发页面：<pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100vw<span class="token punctuation">;</span> <span class="token comment">/* 屏幕宽度 */</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100vh<span class="token punctuation">;</span> <span class="token comment">/* 屏幕高度 */</span><span class="token punctuation">&#125;</span></code></pre>或者使用百分比配合媒体查询、flex 等布局方式。<br>总结：<div class="note simple"><p>移动端适配主要有 rem 和 viewport 两种方案。<br>rem 适配通过动态设置 html 的 font-size + 使用 rem 单位，能做到设计稿等比例缩放，适合大多数项目开发。<br>viewport 适配则更轻量，基于 vw&#x2F;vh 单位，但在一些机型上兼容性稍差。<br>实际开发中我常使用 rem + postcss-pxtorem 插件配合，兼顾适配效果和开发效率。</p></div></li></ol><h3 style="text-align: left;" >虚拟滚动 </h3><p><strong>只渲染视口（可见区域）中的 DOM 元素，避免一次性渲染所有数据，提升性能。</strong><br>设定参数： 显示多少行数据； 行高； 截取起始下标； 截取末尾下标；总数据列表的数组<br>挂载后拿到 :</p><ul><li>滚动列表高度 &#x3D; 行高 * 显示多少行数据</li><li>滚动条高度（所有数据的高度） &#x3D; 行高 * 整个数据组成的数组.length</li></ul><p>绑定滚动事件：做个节流</p><ul><li>拿到卷进去高度 scrollTop</li><li>卷进去的行数 &#x3D; 卷进去高度 &#x2F; 行高 【四舍五入一下】</li><li>截取起始下标 &#x3D; 卷进去的行数</li><li>截取末尾下标 &#x3D; 截取起始下标 + 显示多少行数据</li><li>卷进去的高度再平移回来内容：<code>translateY($&#123;offsetTop&#125;px)</code></li></ul><p> 总结：</p><div class="note simple"><p>假设我有 1000 条数据，每行高度 40px，页面一屏最多显示 10 条：<br>容器高度：400px<br>滚动容器高度：1000 * 40 &#x3D; 40000px<br>每次滚动时，我计算 scrollTop，算出当前滚到第几行，截取这一段数据进行渲染，并通过 translateY 将数据对齐到正确位置。 </p></div><h3 style="text-align: left;" >uniapp做小程序登陆</h3><p>1.调用uni.login这个api会返回code<br>2.请求<strong>微信一键登录接口</strong>把code传递给后端<br>会发生两种情况<br>2-1：用户在平台登陆并注册过，会直接返回用户的内容 + token<br>2-2；没有注册过用户第一次进入小程序，返回openId用户唯一标识、 会话密钥sessionKey、用户在微信开放平台账号下的唯一标识UnionID 进入到注册环节，uni.getUserProfile返回iv偏移量、rawData原始数据、encryptedData加密数据、signature签名<br>传递的参数就有openId,sessionKey,UnionID ＋ uni.getUserProfile返回的数据<br>以上注册后会返回token</p><h3 style="text-align: left;" >小程序支付</h3><p>用户点击立即下单会向后端传递数据时间戳、uuid、关于商品的、备注、地址<br>后端给前端返回<strong>支付参数</strong><br>调用API-uni.requestPayment({})把支付参数传过去<br>支付成功逻辑，跳转到“支付成功页”，支付失败处理，提示“支付已取消”</p><h3 style="text-align: left;" >小程序分享</h3><p>小程序分享主要依赖于页面生命周期中的 onShareAppMessage 和 onShareTimeline 这两个钩子函数来配置分享内容，分别对应：<br>分享给好友（聊天窗口）<br>分享到朋友圈（仅支持在具有权限的小程序中）<br>按钮加 open-type &#x3D; ‘share’</p><h3 style="text-align: left;" >.ts 与 .d.ts 的区别</h3><p>.ts 文件: 编写实际的 代码实现<br>.d.ts : 提供 类型声明，不包含具体实现</p><h3 style="text-align: left;" >什么是泛型</h3><p>泛型的核心思想是<strong>参数化类型</strong><br>增强代码复用性：一份代码适用于多种类型。<br>提高类型安全性：比 any 更安全，类型错误可在编译阶段被发现。<br>泛型接口</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">interface</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">success</span><span class="token operator">:</span> boolean<span class="token punctuation">;</span>  <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 style="text-align: left;" >联合类型和交叉类型</h3><ul><li>联合类型 A | B：变量可以是多种类型中的一种，灵活但不具备所有属性</li><li>交叉类型 A &amp; B：变量必须同时符合多个类型，具有所有属性的并集。</li></ul><h3 style="text-align: left;" >插件和组件的区别</h3><p>组件： 封装 UI 和交互 的独立模块，局部或页面级别，用于渲染视图，import 后直接使用或局部注册，通常包含 template + script + style，常用于 复用 UI 模块，如按钮、弹窗、表单项等。<br>插件：用于为整个 Vue 应用添加全局功能,全局注册，影响整个 Vue 应用,app.use(plugin) 注册,纯 JavaScript，提供 install(app) 方法，封装功能模块，如 axios 封装、权限控制、国际化等</p><p>插件用法：</p><ol><li>插件结构： 必须提供 install 方法</li></ol><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// plugins/myLogPlugin.ts</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token function">install</span><span class="token punctuation">(</span><span class="token parameter">app</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>globalProperties<span class="token punctuation">.</span><span class="token function-variable function">$log</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">msg</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">[LOG]: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>msg<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ol start="2"><li>注册插件<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// main.ts</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createApp <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.vue'</span><span class="token keyword">import</span> myLogPlugin <span class="token keyword">from</span> <span class="token string">'./plugins/myLogPlugin'</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>myLogPlugin<span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span></code></pre></li><li>在组件中使用插件功能<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script setup<span class="token operator">></span><span class="token comment">// @ts-ignore</span><span class="token function">$log</span><span class="token punctuation">(</span><span class="token string">'这是插件中的日志功能'</span><span class="token punctuation">)</span>  <span class="token comment">// 使用全局属性</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h3 style="text-align: left;" >MES（制造执行系统）</h3> 车间级执行控制系统:生产现场（人、机、料、法、环）机台管理 工艺管理 生产管理 品质检验</li></ol><h3 style="text-align: left;" >什么是虚拟dom</h3><p>是通过js对象来模拟真实的DOM结构,当组件的状态或数据发生变化的时候，vue会先在虚拟DOM中变更，而不是直接操作真实DOM,通过diff算法比较比较新旧虚拟DOM树的差异 来生成patch(最小化生成dom操作)最后将这组更新批量用到真实DOM上。<br>作用：用这种方式可以减少对DOM的操作次数,从而提高页面的渲染效率。</p><h3 style="text-align: left;" >vue双向绑定原理</h3><div class="note simple"><p>Vue 的双向绑定是指视图和数据之间的自动同步。当数据变化时视图自动更新，视图变化时数据也会自动同步。通常通过 v-model 实现。</p></div><p>v-model 主要用于双向数据绑定（收集表单数据），它给元素绑定时，不同元素做法不一样：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>input v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"name"</span> <span class="token operator">/</span><span class="token operator">></span>  等价于<span class="token operator">&lt;</span>input <span class="token operator">:</span>value<span class="token operator">=</span><span class="token string">"name"</span> @input<span class="token operator">=</span><span class="token string">"name = $event.target.value"</span> <span class="token operator">/</span><span class="token operator">></span></code></pre><p>v-model双向数据绑定本质就是对数据的读和写，读都是使用单向数据绑定去做，而写的话都是通过事件去处理</p><ul><li>如果是文本类型元素（<code>&lt;input&gt; 和 &lt;textarea&gt;</code>）：绑定 value 属性去读取数据 和 input 事件去写数据；</li><li>如果是单选或多选元素（<code>&lt;input type=&quot;checkbox&quot;&gt;</code> 和 <code>&lt;input type=&quot;radio&quot;&gt;</code>）：绑定 checked 属性和 change 事件；</li><li>如果是下拉列表元素（<code>&lt;select&gt;</code>）：绑定 value 属性和 change 事件；</li><li>如果不是上述这些元素（比如组件），会按照文本类型元素处理。</li><li>Vue3中，给组件绑定的是 modelValue 属性和 update:modelValue 事件,同时也支持多个 v-model 绑定和自定义参数。</li></ul><p>vue2中：<br>v-model 在表单元素上，本质上是 :value 和 @input 的语法糖。<br>使用 Object.defineProperty() 实现数据劫持。<br>更新数据时会触发视图更新，用户输入时触发事件同步数据。</p><p>vue3中：<br>使用 Proxy 实现响应式。<br>对组件来说，v-model 默认绑定的是 modelValue 和 update:modelValue。<br>可以通过 v-model:xxx 自定义绑定字段。<br>例如</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 父组件 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>MyInput v<span class="token operator">-</span>model<span class="token operator">:</span>title<span class="token operator">=</span><span class="token string">"title"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 子组件 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>input <span class="token operator">:</span>value<span class="token operator">=</span><span class="token string">"title"</span> @input<span class="token operator">=</span><span class="token string">"$emit('update:title', $event.target.value)"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script setup<span class="token operator">></span><span class="token function">defineProps</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">defineEmits</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'update:title'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h3 style="text-align: left;" >Set和Map</h3><p>Set: 值的集合 是一种新的数据结构，类似数组(只存值)，用于存储<strong>唯一值</strong>的集合<br>Map: 键值对集合 是一种新的数据结构，类似对象(键值对),用于存储<strong>键值对</strong>的数据结构<br>WeakSet: 对象的集合 存储内容只能是对象，不能是原始类型，适合用于存储一组临时对象、不追踪生命周期<br>WeakMap: 对象键到任意值的映射 存储内容键必须是对象，值可以是任意类型，适合用于给对象附加元信息、不阻止垃圾回收<br>这两个都是弱引用，被引用对象若无其他引用会被回收，值都不可遍历</p><p>在项目中我曾遇到一个需求：需要对用户上传的设备 ID 列表进行去重处理，并且在后续根据设备 ID 快速查找设备详情。<br>这就涉及两个问题：<br>一是如何高效去重，<br>二是如何用设备 ID 映射到设备信息上。<br>在业界的常规做法中，对于去重，大家普遍使用的是 Set 数据结构，因为它能自动去除重复项；<br>而对于键值映射，通常用 Map 数据结构，相比传统对象，它支持任意类型作为 key，性能也更优。<br>我在项目中最终的解决方案是：<br>使用 Set 对上传的设备 ID 进行去重，确保不重复发请求；<br>然后用 Map 来存储设备 ID 到设备信息的映射，这样后续在 UI 上展示或查找时，只需通过 map.get(id) 即可快速访问，无需遍历数组或过滤。<br>落地效果上，这种方式不仅代码可读性更强，也显著提升了查找效率，设备渲染页面的响应时间缩短了约 30%。同时，由于结构清晰，也方便了后期维护和扩展。</p><h3 style="text-align: left;" >vite和webPack的区别</h3><ol><li>底层语言不同<br>vite是用go语言编写的, go语言是纳秒级别的, 而webpack的js是以毫秒计数的, 所以vite比webpack打包快.</li><li>启动方式不同<br>webPack: 分析依赖 (通过递归分析入口文件，构建完整的模块依赖图，将所有资源（JS&#x2F;CSS&#x2F;图片等）转换为模块) –&gt; 编译打包 –&gt; 交给本地服务器进行渲染, 模块越多, 热更新越慢<br>vite: 启动服务器 –&gt; 请求模块时, 按需动态编译显示, 它在启动的时候不需要打包, 所以不用分析模块与模块之间的依赖关系</li></ol><p><strong>缺点比较:</strong></p><ol><li>vite的加载器和插件没有webPack丰富</li><li>vite在打包到生产环境的时候, esbuild构建对于css和代码分割不够友好, 所有vite的优势是体现在开发阶段的</li><li>vite首屏性能没有webpack好</li></ol><ul><li>webpack:浏览器发送请求, 服务端把已经打包构建好的首屏内容发给浏览器, 整个过程不存在性能问题</li><li>vite: 他有个unbundle机制, 首屏期间还要做额外的事, 比如: 不对源文件做合并捆绑的操作, 导致大量http请求. dev server运行期间要对源文件做resolve、load、transform等操作预构建,二次构建操作也会阻塞首屏请求, 直到预构建完成为止</li></ul><h3 style="text-align: left;" >讲一下tcp的队头阻塞</h3><p>队头阻塞：TCP 是一种<strong>丢包重传机制-丢了就得重传，不能跳过。</strong>、<strong>流量控制与拥塞控制-网络拥堵会导致延迟、重传，从而引发更严重的阻塞。</strong>、<strong>按序传递-到的数据必须按照顺序传递给上层应用。</strong>的协议<br>如果一个数据包丢失或延迟，后面的所有数据都要等它重新传输回来，才能被上层应用读取。这就是 TCP 的“队头阻塞”问题 —— <strong>前面的数据没到，后面的也用不了</strong>。<br>假设你坐地铁，一节车厢的人必须一个个下车，前面的人卡住了，后面的人也下不去。<br>在 TCP 中也是这样：你从浏览器发送多个请求；第一个数据包（如请求 A）在传输中丢了；TCP 会等这个包重传回来；后面请求 B、C 的数据虽然已经到达，但不能交给应用层处理；浏览器就表现为卡顿或延迟。<br>在实际开发中的影响:<br>在 HTTP&#x2F;1.1 中，多个请求共用一个 TCP 连接，队头阻塞会导致整个网页加载变慢。为此，HTTP&#x2F;2 浏览器会开启多个 TCP 连接并发请求，但这又带来 TCP 握手和资源浪费的问题.HTTP&#x2F;3采用基于 UDP 的 QUIC 协议，彻底解决 TCP 队头阻塞问题.</p><h3 style="text-align: left;" >vue2和vue3的区别</h3><p><strong>响应式不同：</strong></p><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://cmeng.me/proxy/">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="">          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">前往vue响应式区别的文章</div>            <div class="tag-link-sitename">晨梦</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><p><strong>组合式API</strong><br>vue2 主要通过选项式API(如 data, methods, computed 等)进行组件的逻辑组织。<br>vue3 引入了组合式API(如 ref, reactive, computed, watch), 这为逻辑复用和代码组织提供了更灵活的方式<br><strong>性能相关：</strong><br>vue3 在性能方面有显著提升,它包括更小的打包大小,更快的虚拟DOM重写、更高效的组件初始化<br>vue2 相比之下在性能方面相对较慢, 尤其是在处理大型应用和复杂组件<br><strong>typeScript支持</strong><br>vue3 可以支持TypeScript编写, vue2 对TypeScript支持是有限<br><strong>vue3允许多个节点, 这使得组件模版可以有多个并列的根元素。vue2 要求每个组件必须有一个单独的根节点</strong><br><strong>vue2打包体积过大,而vue3用了树摇机制,会除去未被使用的代码部分,打包文件小更快。</strong><br><strong>静态元素的提升</strong><br>vue2中, 模版中的所有元素在每次渲染时都会被创建新的虚拟节点,包括静态元素<br>vue3中, 引入了静态元素提升的概念, 在编译模版时, vue3会检测出静态内容将其提升, 也就是内容只在初次渲染的时候创建一次. 后续过程, 静态内容就会被复用, 提升性能<br><strong>虚拟dom渲染方式</strong><br>vue2 在更新组件, 会进行全面的dom比较, 这可能会导致性能开销<br>vue3 引入了patch, 它在编译的时候标记虚拟节点的动态部分,组件更新时,只需要关注这些被标记的部分,而不是整个组件树,从而提升性能<br><strong>生命周期变化</strong> 见以上</p><h3 style="text-align: left;" >组件传值的方式都有哪些</h3><ol><li><strong>props（父 → 子）</strong>: 父组件通过 props 向子组件传递数据。</li></ol><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- Parent.vue --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Child</span> <span class="token attr-name">:msg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parentMsg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token comment">&lt;!-- Child.vue --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>&#123;&#123; msg &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token function">defineProps</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">msg</span><span class="token operator">:</span> String <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><ol start="2"><li><strong>emit（子 → 父）</strong>: 子组件通过 $emit 触发事件，向父组件传递数据。</li></ol><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- Child.vue --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">const</span> emit <span class="token operator">=</span> <span class="token function">defineEmits</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'updateMsg'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">sendMsg</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'updateMsg'</span><span class="token punctuation">,</span> <span class="token string">'new data'</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- Parent.vue --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Child</span> <span class="token attr-name">@updateMsg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handleMsg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><ol start="3"><li><strong>兄弟组件通信 mitt</strong>: 安装并使用 mitt 作为事件总线进行兄弟组件通信。<br>npm install mitt<pre class="language-markup" data-language="markup"><code class="language-markup">// A.vueimport &#123; emitter &#125; from './eventBus'emitter.emit('custom-event', data)// B.vueimport &#123; emitter &#125; from './eventBus'emitter.on('custom-event', (data) => &#123; ... &#125;)</code></pre></li><li><strong>跨层级组件通信 provide &#x2F; inject</strong>:祖先组件通过 provide 提供数据，后代组件通过 inject 注入。<pre class="language-vue" data-language="vue"><code class="language-vue">&lt;!-- App.vue --&gt;&lt;script setup&gt;import &#123; provide &#125; from &#39;vue&#39;provide(&#39;theme&#39;, &#39;dark&#39;)&lt;&#x2F;script&gt;&lt;!-- Child.vue --&gt;&lt;script setup&gt;import &#123; inject &#125; from &#39;vue&#39;const theme &#x3D; inject(&#39;theme&#39;)&lt;&#x2F;script&gt;</code></pre></li><li><strong>状态管理 Pinia</strong><br>npm install pinia<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// store.ts</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> defineStore <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'pinia'</span><span class="token keyword">export</span> <span class="token keyword">const</span> useMainStore <span class="token operator">=</span> <span class="token function">defineStore</span><span class="token punctuation">(</span><span class="token string">'main'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">state</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token literal-property property">actions</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token operator">++</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre></li><li><strong>ref &#x2F; v-model</strong><br>ref 引用子组件并调用其方法或属性:<pre class="language-vue" data-language="vue"><code class="language-vue">&lt;!-- Parent.vue --&gt;&lt;Child ref&#x3D;&quot;childRef&quot; &#x2F;&gt;&lt;script setup&gt;import &#123; ref, onMounted &#125; from &#39;vue&#39;const childRef &#x3D; ref()onMounted(() &#x3D;&gt; &#123;  childRef.value.someMethod()&#125;)&lt;&#x2F;script&gt;</code></pre>v-model 双向绑定（支持多个字段）<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> Parent<span class="token punctuation">.</span>vue <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>Child v<span class="token operator">-</span>model<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"name"</span> v<span class="token operator">-</span>model<span class="token operator">:</span>age<span class="token operator">=</span><span class="token string">"age"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> Child<span class="token punctuation">.</span>vue <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>script setup<span class="token operator">></span><span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token function">defineProps</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">const</span> emit <span class="token operator">=</span> <span class="token function">defineEmits</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'update:name'</span><span class="token punctuation">,</span> <span class="token string">'update:age'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre></li></ol><h3 style="text-align: left;" >1</h3><p>持续更新中…</p>]]></content>
      
      
      <categories>
          
          <category> vue3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人框架-GUIYUAN</title>
      <link href="/GUIYUAN/"/>
      <url>/GUIYUAN/</url>
      
        <content type="html"><![CDATA[<h2 style="text-align: left;" >序言</h2><h3 style="text-align: left;" >框架名称：GUIYUAN（归元）</h3>在正式开工之前，给项目起个名字是一件既浪漫又讲究仪式感的事。最开始脑子一热，想叫“盘古”，毕竟盘古开天辟地，听起来就很猛——但仔细一想，这名字太有压力了，好像我不是在写代码，而是在创造宇宙。<br/>于是转念一想，不如低调点、有点禅意、还能传达出我们平台的初心和愿景，于是——<span style="font-weight:700">GUIYUAN（归元）</span>，登场了。<br/>“归元”是佛家术语，意为<span style="font-weight:700">回归本源、返璞归真</span>。做这个平台的初衷也正是如此：<br/>工作上重复造轮子的场景太多了，CRUD做得我们都能梦里写增删改查。多客户交付、多系统分支、每个需求都像从头来过，写着写着就开始怀疑人生。<br/>GUIYUAN 的使命，就是把 80% 高重复性的工作沉淀为平台能力，统一、可配置，灵活复用。只把真正有价值、因地制宜的 20% 差异化，留给开发者自由发挥。<br/>一切冗余，皆可归元。<br/>我不想再在代码的轮回中苦修，只想搭个平台，佛系点高效点，把<span style="font-weight:700">“重复的归平台，灵活的归定制”</span>这才是程序员真正的解脱。<br/><hr/>本文还是用到我解决问题的思路 💡<span style="background-color: rgba(241, 249, 132, 0.5);">遇到什么需求、问题 + 业界解决方案 + 我的解决方案 + 落地效果</span><br/>技术栈：MySQL + log4js日志 + node.js18 + koa2 + vue3 + element-plus + webpack5<div class="mermaid-wrap"><pre class="mermaid-src" hidden>  pie    title 技术栈权重估计    &quot;前端 ( Vue3 + Element Plus )&quot; : 40    &quot;后端 ( Node.js + Koa2 + log4js )&quot; : 40    &quot;构建工具 ( Webpack5 )&quot; : 10    &quot;数据库 ( MySQL )&quot; : 10  </pre></div><hr/><h2 style="text-align: left;" >行业现状与需求推倒</h2><h3 style="text-align: left;" >痛点与目标：</h3><i style="font-size: 20px; color:rgb(7, 91, 218);margin-right: 10px;">1.</i>工作中有很多重复性高的工作,避免相似功能重复开发<br/><i style="font-size: 20px; color:rgb(7, 91, 218);margin-right: 10px;">2.</i>工作中我们经常做crud工作，所以要变成是我们在维护某一个框架<br/><i style="font-size: 20px; color:rgb(7, 91, 218);margin-right: 10px;">3.</i>同一个系统可能出来一个标准产品卖给不同的客户、甲方，就可能遇到同一套系统多方交付的场景，有点客户有定制化的需求，就要把现在的产品拷贝一份上面改造定制化的需求，会导致大量的重复工作，当多客户交付的时候项目越来越混乱，项目可能出现十几个分支，所以我们要支持多套系统建设，无需重新开发相同功能<h3 style="text-align: left;" >需求：</h3><i style="font-size: 20px; color:rgb(7, 91, 218);margin-right: 10px;">1.</i>沉淀80%的重复性工作，支持配置化，能只针对20%定制化工作进行开发<br/><i style="font-size: 20px; color:rgb(7, 91, 218);margin-right: 10px;">2.</i>方案需落地为系统平台，平台支持大量的crud工作。且可持续集成。我们只需要维护这个平台，平台可配置<br/><i style="font-size: 20px; color:rgb(7, 91, 218);margin-right: 10px;">3.</i>平台需支持多系统建设，且系统间功能复用<br/><h2 style="text-align: left;" >技术选型</h2><h3 style="text-align: left;" >业界方案调研</h3><i style="font-size: 20px; color:rgb(7, 91, 218);margin-right: 10px;">方案1.<br/></i><span style="font-weight:700">大而全的触达系统比如神策、易观</span><br/>详细了解了一下，这类系统就像一台“十八般武艺”全开的瑞士军刀——功能模块多到眼花缭乱，看起来高端大气上档次，实则灵活性感人。它们更像是让客户去适应系统，而不是系统去满足客户（听起来是不是有点霸道总裁的感觉？）<br/> 缺点一箩筐：<ul><li>定制化能力薄得像纸，想加点个性就得推翻重来</li><li>不适合多客户交付场景，一个系统交给十个客户，能拧出十个分支</li><li>模块太多，真正用上的没几个，反而拖慢了交付</li><li>迭代一多，熵增爆表，越改越乱</li></ul><i style="font-size: 20px; color:rgb(7, 91, 218);margin-right: 10px;">方案2.<br/></i><span style="font-weight:700">过于灵活的多个子系统</span>类似微前端。<br/>这类思路相当自由派：微前端、配置系统、建站平台、UI组件库，组合拳打得漂亮。一看架构图，顿时觉得人生好像可以不写代码了——全靠拖拉拽。<br/>但现实往往是：<ul><li>配置自由度太高，非常复杂，学起来头大，用起来更大</li><li>若处理不好容易代码断代，此时对提效没有实质的提高，反而成了负担</li><li>通用配置场景搞得飞起，但碰上强业务领域（比如财务管理），就露馅了，感觉“工具箱里全是锤子，但现在我手里是一颗螺丝钉”。</li></ul><h3 style="text-align: left;" > 我的方案</h3><span style="font-weight:700">取长补短，搞点靠谱的。</span>我们不走极端，既不要宇宙飞船般的重系统，也不搞无限可配的配置迷宫。我们主打一个——<span style="font-weight:700">折中 + 有脑子</span><br/>我们的方案融合两者优点，回归平台化的本质，从代码出发，用模块说话，让重复的归平台，灵活的归开发。核心思路如下：<ul><li>🧱粒子：算子服务-把系统拆成一个个原子级的算子服务（粒度够小，组合够灵）</li><li>🌀AOP领域模型-切面注入、职责解耦，模块化构建你的业务宇宙</li><li>🧩面向对象建站-按类建模块，按需装功能，像搭乐高一样做系统</li></ul>一句话总结：我们不追求一招吃天下，而是希望这套平台能<span style="font-weight:700">八方通吃、见招拆招、灵活应对各种客户交付场景。</span>毕竟系统不是修仙，能干活才是王道。<h2 style="text-align: left;" >架构设计</h2><div class="img-wrap"><div class="img-bg"><img class="img" src="https://bu.dusays.com/2025/05/20/682c91849a2c9.jpg" alt="项目架构图" style="width:800px;"/></div><span class="image-caption">项目架构图</span></div><h3>数据层</h3><h4 style="text-align: left;" >数据库选择</h4><table><thead><tr><th>特性&#x2F;对比项</th><th>MySQL</th><th>MongoDB</th></tr></thead><tbody><tr><td>数据库类型</td><td>关系型数据库（Relational）</td><td>非关系型数据库（MySQL，文档型）</td></tr><tr><td>数据结构</td><td>表（Tables）、行（Rows）、列（Columns）</td><td>文档（Documents，JSON格式）</td></tr><tr><td>模式（Schema）</td><td>严格，表结构固定</td><td>灵活，可存储不同结构的数据</td></tr><tr><td>查询语言</td><td>SQL</td><td>MongoDB Query Language（类JSON语法）</td></tr><tr><td>扩展性</td><td>垂直扩展为主（scale-up）</td><td>水平扩展友好（scale-out）</td></tr><tr><td>数据一致性</td><td>强一致性（默认）</td><td>最终一致性（可配置）</td></tr><tr><td>适合场景</td><td>结构化数据、事务性强的应用</td><td>非结构化数据、灵活字段、快速迭代开发</td></tr><tr><td>索引机制</td><td>支持多种索引</td><td>支持单字段、复合字段、全文索引等</td></tr><tr><td>性能特点</td><td>数据量大时性能受限</td><td>大数据量下读写性能优越</td></tr><tr><td>代表应用</td><td>金融系统、电商后台</td><td>内容管理系统、日志分析、实时大数据</td></tr><tr><td>备份与恢复</td><td>使用 <code>mysqldump</code> 或物理备份工具</td><td>使用 <code>mongodump</code> 和 <code>mongorestore</code></td></tr></tbody></table><p>虽然我主力是 Node.js，MongoDB 和它天生是一对，“一个写得快，一个存得爽”，配合得堪称默契。但技术选型这事吧，不能只看“感情”，还得考虑“家世背景”——毕竟放眼市面上，大多数公司后端主力语言还是 Java、Go，这些语言对<strong>MySQL</strong> 的支持更成熟，生态更健全。<br>所以，权衡下来，<strong>MySQL 更适合作为团队未来技术迁移与栈转型的基石</strong>。它是数据库界的“老干部”，稳定、可靠、文档多、社区大，迁移起来省心，招人也更容易。</p><h4 style="text-align: left;" >日志系统选择</h4><p>日志这事，向来是“事后诸葛”的关键，出问题的时候靠它定位，没问题的时候靠它安神。对于 Node.js 项目，我选的是老牌选手 —— <strong>Log4js</strong>。<br>它虽然名字听着像 Java 家的远房亲戚，但其实在 Node 生态里也算是“德高望重”。配置灵活、输出丰富，支持分等级、按时间或文件大小分割，还能愉快地和各种日志中台打通。<br>一句话总结：Log4js 就像个靠谱的管家，默默记录项目的喜怒哀乐，关键时刻还能“翻旧账”，帮你把锅找对人😝。</p><h3 style="text-align: left;" >BFF层</h3>node.js + koa.js本人对koa.js->egg.js熟悉程度更高,所以我会选择**koa.js**<h3 style="text-align: left;" >展示层</h3>展示层不过多描述 选择老朋友vue3 + element-plus + webpack5<h2 style="text-align: left;" >方案设计</h2><h3 style="text-align: left;">DSL与总览图</h3><p>DSL是一种专门为某个特定领域或问题域设计的编程语言。它的主要目的是提供一种简洁、易于使用和高效的方式来描述和解决特定领域的问题。本框架通过<strong>dsl -&gt;解析器-&gt;模版页面</strong><br>大致框架如下：其中<strong>绿色为自定义组件</strong>：可自行变动保证灵活性，<strong>蓝色部分为已设计部分</strong>：固定部分减少重复操作</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://bu.dusays.com/2025/05/20/682c918bacc24.jpg" style="width:800px;"/></div></div><h3 style="text-align: left;">服务端-BFF层方案设计</h3>运行前(磁盘文件)-->解析器-->运行时(内存)<div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart LR  A[&quot;&#96;**项目文件**   按照约定存放在app根目录下的对应目录&#96;&quot;]  B[&quot;&#96;**elpis-core**   利用编写的 loader对项目文件进行解析 挂载到项目中&#96;&quot;]  C[&quot;&#96;**运行时**   middleware   router   config   controller   service   extend&#96;&quot;]  A --&gt; B --&gt; C  </pre></div><span class='p blue'>通过约定的规则</span>在对应的文件目录放置对应的模块<span class='p blue'>通过elpis-core</span> 对文件进行解析挂载到app对象中<span class='p blue'>在进行编码时</span>候通过app就可以获取到我们想要使用的能力<h3 style="text-align: left;">展示层-前端架构设计</h3>结合面向对象的在设计思路：封装、继承、多态，也就是有个基类可以实例化各种子类，各种子类又可以派生出各种实例。<br/>所以我们可以基于一个封装好的各种领域模型的基类在针对出不同项目继承出不同的项目配置，在这个过程中我们新增或者重载领域模型的配置，再通过解析器把这份派生出来的子配置实例化成各个具体化的系统，实现高度可复用、可扩展的前端架构设计。<hr/><div class="tip bell"><p>预热结束啦！前面看得一脸问号也没关系，接下来才是正片—— <strong>GUIYUAN 代码时间到！</strong>小板凳🪑准备好，咱们开搞～</p></div><hr/><h2 style="text-align: left;" >基于node.js实现服务器内核引擎</h2><h3 style="text-align: left;" >宏观角度</h3><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart TD  BFF[&quot;BFF&quot;]:::bff  Access[&quot;接入层&quot;]:::access  Business[&quot;业务层&quot;]:::business  Service[&quot;服务层&quot;]:::service  BFF --&gt; Access  Access --&gt; Business  Business --&gt; Service  BFF --&gt; Business  BFF --&gt; Service  classDef bff stroke:#f66,stroke-width:2px,stroke-dasharray:5 5,color:#f66  classDef access stroke:#f90,stroke-width:2px,stroke-dasharray:5 5,color:#f90  classDef business stroke:#0c0,stroke-width:2px,stroke-dasharray:5 5,color:#0c0  classDef service stroke:#09f,stroke-width:2px,stroke-dasharray:5 5,color:#f90  </pre></div><p><strong>1. 接入层</strong></p><ul><li>接口路由处理，区分API请求，页面请求</li><li>路由规则校验：请求是否满足最基本的校验</li><li>路由中间件：是否携带所需的参数，认证是否通过等</li></ul><p><strong>2. 业务层</strong></p><ul><li>controller 处理器</li><li>env 环境区分</li><li>config 全局变量提取</li><li>extend 服务拓展插件</li><li>schedule 定时任务<br><strong>3. 服务层</strong></li><li>service处理器，是跟数据层的交互</li></ul><h3 style="text-align: left;" >解析器</h3><div class="note simple"><p>GUIYUAN 的主要功能之一就是实现下面的解析器</p></div><ul><li>router-loader 解析router请求文件<ul><li>页面请求，</li><li>API请求</li></ul></li><li>router-schema-loader:解析API参数类型校验文件</li><li>middleware-loader: 解析自定义中间件文件</li><li>controller-loader: 解析逻辑处理文件</li><li>service-loader: 解析服务文件（日志，mysql,调用外部服务等）</li><li>extend-loadr: 解析扩展文件</li><li>config-loader: 解析配置文件</li></ul><h3 style="text-align: left;" >koa洋葱模型</h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://bu.dusays.com/2025/05/20/682c92d8b1b79.jpg" style="width:800px;"/></div></div><p>业务逻辑前遵从：<strong>先用先处理</strong><br>业务逻辑后遵从：<strong>后用先处理</strong></p><p>持续更新中…</p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GUIYUAN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node.js的学习之路</title>
      <link href="/node/"/>
      <url>/node/</url>
      
        <content type="html"><![CDATA[<p>module.exports &#x3D; (…) &#x3D;&gt; { … }<br>这里导出的是一个“函数”，不是一个“对象”<br>process.env 是 Node.js 提供的一个全局对象，用于访问系统环境变量</p><h3 style="text-align: left;" >koa</h3><p> 🐣 一句话理解：</p><blockquote><p>Koa 是一个轻量、优雅、现代的 Node.js Web 框架，用来快速开发后端服务或接口。</p></blockquote><hr><p>🔧 它能做什么？</p><p>Koa 可以用来：</p><ul><li>搭建 Web 网站 &#x2F; 应用</li><li>提供 HTTP 接口（REST API）</li><li>做后台管理系统接口服务</li><li>开发中间层服务（比如前后端分离项目的 BFF）</li><li>构建中间件链式调用流程（适合做权限校验、日志、统一错误处理等）</li></ul><hr><p>📦 常配合使用的库</p><table><thead><tr><th>名称</th><th>用途</th></tr></thead><tbody><tr><td>koa-router</td><td>路由管理</td></tr><tr><td>koa-bodyparser</td><td>解析 POST 请求体</td></tr><tr><td>koa-static</td><td>提供静态资源</td></tr><tr><td>koa-views</td><td>模板引擎支持</td></tr><tr><td>koa2-cors</td><td>解决跨域问题</td></tr></tbody></table><h3 style="text-align: left;" >path 模块的用法</h3><p>🐣 一句话理解：</p><blockquote><p><code>path</code> 是 Node.js 的核心模块，用于处理文件和目录的路径，兼容不同操作系统的路径分隔符，常用于处理相对路径、绝对路径、路径拼接等操作。</p></blockquote><p>📦 引入模块<br>const path &#x3D; require(‘path’);</p><p>常用方法</p><ol><li>path.join([…paths])<blockquote><p>将多个路径拼接在一起，自动处理多余的 &#x2F;。</p></blockquote><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> result <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'/foo'</span><span class="token punctuation">,</span> <span class="token string">'bar'</span><span class="token punctuation">,</span> <span class="token string">'baz/asdf'</span><span class="token punctuation">,</span> <span class="token string">'quux'</span><span class="token punctuation">,</span> <span class="token string">'..'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// /foo/bar/baz/asdf</span></code></pre></li></ol><hr><ol start="2"><li>path.resolve([…paths])<blockquote><p>将一系列路径或路径片段解析为绝对路径，从右往左解析，直到遇到绝对路径为止。然后将其左边的所有相对路径拼接上去，最终返回一个标准的绝对路径。</p></blockquote><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> result <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'bar'</span><span class="token punctuation">,</span> <span class="token string">'baz'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// /当前工作目录/foo/bar/baz</span><span class="token keyword">const</span> result <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'foo/bar'</span><span class="token punctuation">,</span> <span class="token string">'/tmp/file/'</span><span class="token punctuation">,</span> <span class="token string">'..'</span><span class="token punctuation">,</span> <span class="token string">'a/../subfile'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// /tmp/subfile</span><span class="token keyword">const</span> middlewarePath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>businessPath<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>path<span class="token punctuation">.</span>sep<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">middleware</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 打印 /projectRoot/app/middleware</span></code></pre></li></ol><hr><ol start="3"><li>path.basename(p, [ext])<blockquote><p>获取路径的文件名，第二个参数可以去除扩展名。</p></blockquote><pre class="language-javascript" data-language="javascript"><code class="language-javascript">path<span class="token punctuation">.</span><span class="token function">basename</span><span class="token punctuation">(</span><span class="token string">'/foo/bar/baz/asdf.txt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 'asdf.txt'</span>path<span class="token punctuation">.</span><span class="token function">basename</span><span class="token punctuation">(</span><span class="token string">'/foo/bar/baz/asdf.txt'</span><span class="token punctuation">,</span> <span class="token string">'.txt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 'asdf'</span></code></pre></li></ol><hr><ol start="4"><li>path.dirname(p)<blockquote><p>获取路径的目录部分。</p></blockquote><pre class="language-javascript" data-language="javascript"><code class="language-javascript">path<span class="token punctuation">.</span><span class="token function">dirname</span><span class="token punctuation">(</span><span class="token string">'/foo/bar/baz/asdf.txt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// '/foo/bar/baz'</span></code></pre></li></ol><hr><ol start="5"><li>path.extname(p)<blockquote><p>获取文件的扩展名。</p></blockquote><pre class="language-javascript" data-language="javascript"><code class="language-javascript">path<span class="token punctuation">.</span><span class="token function">extname</span><span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// '.html'</span>path<span class="token punctuation">.</span><span class="token function">extname</span><span class="token punctuation">(</span><span class="token string">'index.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// '.'</span>path<span class="token punctuation">.</span><span class="token function">extname</span><span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// ''</span></code></pre></li><li>path.sep<blockquote><p>获取操作系统的路径分隔符。</p></blockquote><pre class="language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span>sep<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Windows: '\\'，Linux/macOS: '/'</span></code></pre></li></ol><hr><ol start="7"><li>path.normalize(p)<blockquote><p>标准化路径，处理 .. 和 . 等语法。</p></blockquote><pre class="language-javascript" data-language="javascript"><code class="language-javascript">path<span class="token punctuation">.</span><span class="token function">normalize</span><span class="token punctuation">(</span><span class="token string">'/foo/bar//baz/asdf/quux/..'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// '/foo/bar/baz/asdf'</span></code></pre></li></ol><hr><ol start="8"><li>path.parse(p) 和 path.format(obj)<blockquote><p>parse 将路径解析为对象，format 则相反。</p></blockquote><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> parsed <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">'/home/user/dir/file.txt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>parsed<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// &#123;</span><span class="token comment">//   root: '/',</span><span class="token comment">//   dir: '/home/user/dir',</span><span class="token comment">//   base: 'file.txt',</span><span class="token comment">//   ext: '.txt',</span><span class="token comment">//   name: 'file'</span><span class="token comment">// &#125;</span><span class="token keyword">const</span> formatted <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>parsed<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>formatted<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// '/home/user/dir/file.txt's</span></code></pre></li></ol><hr><h3 style="text-align: left;" >glob 模块的用法</h3><blockquote><p><code>glob</code> 是 Node.js 中一个用于<strong>文件匹配</strong>的工具，支持使用类似 shell 的通配符（<em>、?、</em>* 等）快速查找匹配的文件路径，非常适合批量读取文件、构建脚本、配置自动化任务等场景。<br>npm install glob<br>引入模块: const glob &#x3D; require(‘glob’);</p></blockquote><p><strong>示例 1：查找某个目录下的所有 .js 文件</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">glob</span><span class="token punctuation">(</span><span class="token string">'src/**/*.js'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> files</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>files<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 所有匹配到的 .js 文件路径数组</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>示例 2：同步用法（glob.sync）</strong><br>glob.sync() 是同步版本，直接返回结果，适合小范围文件匹配。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> files <span class="token operator">=</span> glob<span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token string">'src/**/*.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>files<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> node </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>项目总结</title>
      <link href="/project-summary/"/>
      <url>/project-summary/</url>
      
        <content type="html"><![CDATA[<h2 style="text-align: left;" >权限</h2><h3 id="菜单权限"><a href="#菜单权限" class="headerlink" title="菜单权限"></a>菜单权限</h3><h4 id="账号登陆"><a href="#账号登陆" class="headerlink" title="账号登陆"></a>账号登陆</h4><p>传递账号、密码、时间戳、验证码<br>请求图形验证码 要传递参数key  返回的数据通过new Blob解析出来<br>账号密码需使用AES加密</p><h4 id="手机验证码登陆"><a href="#手机验证码登陆" class="headerlink" title="手机验证码登陆"></a>手机验证码登陆</h4><p>校验规则 输入手机号使用AES加密 发送成功后 开始倒计时</p><h4 id="微信扫码登陆"><a href="#微信扫码登陆" class="headerlink" title="微信扫码登陆"></a>微信扫码登陆</h4><p>后端和微信方做sdk的交互（key,密钥，网址）按钮[微信登录] -&gt; 弹出窗口上面是微信提供的二维码，前端拿到数据，渲染到页面上<br>扫码-&gt;手机端点击允许 拿到对应的code码</p><h4 id="APP扫码登录"><a href="#APP扫码登录" class="headerlink" title="APP扫码登录"></a>APP扫码登录</h4><p>1、PC端请求后端生成二维码，后端创建一个全局唯一的二维码ID，并存储二维码状态（初始状态：待扫描）。<br>2、生成二维码，二维码绑定了二维码ID等待用户进行扫描，此时前端会不断轮询接口 根据二维码id查询二维码状态，一旦状态改变页面也会同步改变<br>3、手机扫码，携带App token&#x2F;二维码ID请求后端扫描登录接口，后端也会校验App用户Token变更二维码状态为已使用<br>4、此时PC端的轮询状态变更已扫描，把界面呈现待确认，后端生成临时token和二维码关联，保证当前二维码只会被扫描一次，后端再把临时token返回给手机，手机端也是待确认的状态端，那手机端就使用临时token请求后端，后端会通过临时token拿到二维码的id，再根据二维码id变更二维码的状态为已使用，然后再执行登陆的逻辑生成pc端的登陆token,保存在redis中，删除 临时Token，防止重复使用<br>5、PC端轮询检测到二维码状态变更为 已使用。PC端获取登录Token，完成登录流程。</p><h4 id="获取菜单树"><a href="#获取菜单树" class="headerlink" title="获取菜单树"></a>获取菜单树</h4><p>填写用户名密码验证码正确后端返回token，前端把token存储到localStorage中-&gt;获取用户个人信息、权限信息、角色信息【包含角色权限编码】(调用接口把token传递给后端，token写在请求拦截器里面，放在请求头里传递过去config.headers[‘Authorization’])拿到角色权限编码-持久化存储放在store里-&gt;获取路由(把角色权限编码传递给后端)返回菜单权限树就是左侧菜单-&gt;数据重构扁平化后路由使其能动态添加router.addRoute(‘’,{})</p><h3 id="按钮权限"><a href="#按钮权限" class="headerlink" title="按钮权限"></a>按钮权限</h3><p>前端请求个人信息接口<br>后端给前端返回：当前登录的这个用户的个人信息、权限信息(其中包括判断具体的权限按钮)permissionss是个字符串组成的数组、角色信息。然后给节点添加自定义指令对应的value值，如果这个用户拥有这个权限那么按钮则存在，如果没有这个权限，那么就removeCild(删除)这个按钮，那么对应的用户也就不能点，就没有这个权限<br>前端做法:<br>1.创建directive文件夹 mian.js挂载全局 </p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">v-auths</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>crm:media:channel:delete'<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>删除<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span></code></pre><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useUserStore <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@store/useUserStore'</span><span class="token keyword">export</span> <span class="token keyword">const</span> AuthDirectives <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'auths'</span><span class="token punctuation">,</span>  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> binging<span class="token punctuation">)</span>  <span class="token comment">// el是dom binging是绑定的权限编码</span>    <span class="token keyword">let</span> permissions <span class="token operator">=</span> <span class="token function">useUserStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>permissions<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> permissions<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">"*:*:*"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment">// 如果是最高权限直接return</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> permissions<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>binding<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> parent <span class="token operator">=</span> el<span class="token punctuation">.</span>parentElement<span class="token punctuation">;</span>      parent <span class="token operator">&amp;&amp;</span>　parent<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span> el <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h3><p>根据不同用户展示不同权限，那么这个用户怎么添加的<br>1.为用户先创建角色，这个角色其实就是具体的权限。<br>2.创建用户的时候，对应选好角色(那么其实就是选择好了权限)</p><h2 style="text-align: left;" >怎么优化性能</h2><p><strong>加载性能优化（减少资源体积和请求数量）</strong><br>资源压缩与合并<br>TML、CSS、JS 压缩（例如使用 Terser、cssnano）。<br>图片压缩（如使用 WebP、AVIF 替代 JPEG&#x2F;PNG）。</p><p>懒加载<br>图片懒加载：使用 loading&#x3D;”lazy” 或手动监听 IntersectionObserver。<br>路由懒加载：Vue Router 中使用动态 import()。<br>第三方库懒加载：按需引入，避免全量引入。</p><p>缓存策略<br>使用浏览器缓存（Cache-Control、ETag、Service Worker 等）。<br>CDN 加速静态资源分发。<br>本地持久化存储（如 localStorage &#x2F; IndexedDB）缓存部分数据。</p><p><strong>渲染性能优化</strong><br>减少重排重绘<br>避免频繁修改 DOM（合并操作，使用 DocumentFragment）。<br>避免逐条设置样式，改用 class 切换。<br>合理使用 will-change、transform、opacity 避免触发 layout。</p><p>CSS 优化<br>避免使用低效选择器（如通配符 *）。<br>限制嵌套层级，减少复杂计算。<br>使用合适的 display 和 position 避免无效占位。</p><p>骨架屏与占位图: 页面加载慢时使用骨架屏或 loading 动画增强用户感知。</p><p><strong>运行时性能优化</strong><br>事件节流与防抖: 滚动、输入、resize 等高频事件使用 throttle &#x2F; debounce 限流<br>虚拟滚动: 对大列表使用虚拟滚动技术（如 VueVirtualScroller、element-plus 的 virtual-scroll）减少 DOM 数量。<br>避免内存泄漏: 正确解绑事件监听、定时器、WebSocket。路由切换时销毁组件中未清除的引用<br>异步处理: 使用 requestAnimationFrame 优化动画。使用 web worker 处理复杂计算，避免阻塞主线程。</p><p><strong>框架层优化</strong><br>组件优化<br>使用 v-show 代替频繁切换的 v-if。<br>大型组件懒加载 + 异步组件。<br>合理使用 keep-alive 缓存组件状态。</p><p>响应式性能优化: computed 替代不必要的 watch<br>避免不必要的响应式绑定: 尽量使用普通对象存储静态数据，不放入 reactive 中</p><p><strong>构建工具层优化</strong><br>利用 SplitChunks 拆分第三方库<br>开启生产模式（mode: production），自动开启压缩</p><h2 style="text-align: left;" >怎么封装公共组件</h2><p>1.确认动机<br>例如：<br>  页面太复杂了，想分一块出去，减少当前页面的复杂度<br>  很多的组件都要使用同一个功能，需要把多有的功能提出去，所以这个组件要有一些通用性的特征<br>2.分析边界<br>  越通用边界越窄越灵活便利性越低，不要过度封装，避免限制其适用性。<br>3.设计接口 通用性的组件写文档<br>  属性 插槽 事件<br>4.代码实现<br>5.功能测试-单元测试&#x2F;集成测试<br>6.后续维护<br>  优化、功能更新</p><div class="note green icon-padding disabled"><i class="note-icon fab fa-cc-visa"></i><p>话术：比如我封装过分页器就是想提高复用性,所以需要支持当前页，每页条数，总数，需要 双向绑定，让父组件能够控制分页器的状态，需要提供 回调事件，让外部组件监听分页变更</p></div><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"pagination"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>el<span class="token operator">-</span>pagination      v<span class="token operator">-</span>model<span class="token operator">:</span>current<span class="token operator">-</span>page<span class="token operator">=</span><span class="token string">"currentPage"</span>      v<span class="token operator">-</span>model<span class="token operator">:</span>page<span class="token operator">-</span>size<span class="token operator">=</span><span class="token string">"pageSize"</span>      <span class="token operator">:</span>page<span class="token operator">-</span>sizes<span class="token operator">=</span><span class="token string">"[2, 5, 10, 20, 50, 100]"</span>      layout<span class="token operator">=</span><span class="token string">"total, sizes, prev, pager, next, jumper"</span>      <span class="token operator">:</span>total<span class="token operator">=</span><span class="token string">"total"</span>      @size<span class="token operator">-</span>change<span class="token operator">=</span><span class="token string">"handleSizeChange"</span>      @current<span class="token operator">-</span>change<span class="token operator">=</span><span class="token string">"handleCurrentChange"</span>    <span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script lang<span class="token operator">=</span><span class="token string">"ts"</span><span class="token operator">></span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> defineComponent <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Pagination'</span><span class="token punctuation">,</span> <span class="token comment">//组件名称</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>script lang<span class="token operator">=</span><span class="token string">"ts"</span> setup<span class="token operator">></span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token function">defineProps</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">currentPage</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">type</span><span class="token operator">:</span> Number<span class="token punctuation">,</span>    <span class="token keyword">default</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">pageSize</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">type</span><span class="token operator">:</span> Number<span class="token punctuation">,</span>    <span class="token keyword">default</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">total</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">type</span><span class="token operator">:</span> Number<span class="token punctuation">,</span>    <span class="token keyword">default</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 分页</span><span class="token keyword">const</span> currentPage <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>currentPage<span class="token punctuation">)</span> <span class="token comment">// 当前页</span><span class="token keyword">const</span> pageSize <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>pageSize<span class="token punctuation">)</span> <span class="token comment">// 每页多少条</span><span class="token comment">// 用于双向绑定 currentPage，当用户切换分页时，通知父组件更新数据。当用户调整每页显示条数时，通知父组件</span><span class="token keyword">const</span> emits <span class="token operator">=</span> <span class="token function">defineEmits</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'update:currentPage'</span><span class="token punctuation">,</span> <span class="token string">'update:pageSize'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//分页-一页显示多少条</span><span class="token keyword">const</span> <span class="token function-variable function">handleSizeChange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">page</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  pageSize<span class="token punctuation">.</span>value <span class="token operator">=</span> page  <span class="token function">emits</span><span class="token punctuation">(</span><span class="token string">'update:pageSize'</span><span class="token punctuation">,</span> page<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//分页-页码</span><span class="token keyword">const</span> <span class="token function-variable function">handleCurrentChange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">page</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  currentPage<span class="token punctuation">.</span>value <span class="token operator">=</span> page  <span class="token function">emits</span><span class="token punctuation">(</span><span class="token string">'update:currentPage'</span><span class="token punctuation">,</span> page<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>style lang<span class="token operator">=</span><span class="token string">"scss"</span> scoped<span class="token operator">></span><span class="token punctuation">.</span>pagination <span class="token punctuation">&#123;</span>  <span class="token literal-property property">display</span><span class="token operator">:</span> flex<span class="token punctuation">;</span>  justify<span class="token operator">-</span>content<span class="token operator">:</span> flex<span class="token operator">-</span>end<span class="token punctuation">;</span>  <span class="token literal-property property">padding</span><span class="token operator">:</span> 15px <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></code></pre><div class="note green icon-padding disabled"><i class="note-icon fab fa-cc-visa"></i><p>话术：比如我封装过树状结构，递归渲染树形结构，支持节点展开&#x2F;收起功能，允许指定选中某个节点，允许监听节点点击事件。可自定义图标大小、节点间距等样式。<br>data：树形结构的数据（包含 children 递归渲染）。<br>iconWidth &#x2F; iconHeight：用于控制图标大小。<br>appointKey：指定唯一标识字段，默认是 id，用于选中节点的判断。<br>node-click：当用户点击某个节点时，触发该事件，将选中的节点对象传递给父组件。<br>采用 递归组件 方式渲染树状结构，支持 展开&#x2F;收起 交互。</p></div><h2 style="text-align: left;" >如何将echarts大屏导出为图片</h2><p>方法 1：使用 ECharts 的 getDataURL 方法<br>ECharts 提供了 getDataURL() 方法，可将图表转换为 Base64 格式的图片，然后可以：<br>直接 显示 在页面上<br>提供 下载 按钮，让用户保存<br>方法 2：整个大屏截图导出<br>导出整个 ECharts 大屏（不仅是一个图表），可以使用 html2canvas 进行整个页面截图。安装 html2canvas npm install html2canvas</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div ref<span class="token operator">=</span><span class="token string">"screenRef"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div ref<span class="token operator">=</span><span class="token string">"chartRef"</span> style<span class="token operator">=</span><span class="token string">"width: 800px; height: 400px;"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"exportScreen"</span><span class="token operator">></span>导出大屏<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script setup<span class="token operator">></span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> onMounted<span class="token punctuation">,</span> ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> echarts <span class="token keyword">from</span> <span class="token string">'echarts'</span><span class="token keyword">import</span> html2canvas <span class="token keyword">from</span> <span class="token string">'html2canvas'</span><span class="token keyword">const</span> chartRef <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token keyword">const</span> screenRef <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token keyword">let</span> chartInstance <span class="token operator">=</span> <span class="token keyword">null</span><span class="token function">onMounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  chartInstance <span class="token operator">=</span> echarts<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>chartRef<span class="token punctuation">.</span>value<span class="token punctuation">)</span>  chartInstance<span class="token punctuation">.</span><span class="token function">setOption</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">'ECharts 大屏示例'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">tooltip</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">xAxis</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">,</span> <span class="token string">'E'</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">yAxis</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">series</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'bar'</span><span class="token punctuation">,</span> <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 导出整个大屏</span><span class="token keyword">const</span> <span class="token function-variable function">exportScreen</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">html2canvas</span><span class="token punctuation">(</span>screenRef<span class="token punctuation">.</span>value<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">useCORS</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 允许跨域图片</span>    <span class="token literal-property property">scale</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token comment">// 提高清晰度</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">canvas</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> image <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">toDataURL</span><span class="token punctuation">(</span><span class="token string">'image/png'</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> link <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>    link<span class="token punctuation">.</span>href <span class="token operator">=</span> image    link<span class="token punctuation">.</span>download <span class="token operator">=</span> <span class="token string">'big-screen.png'</span>    link<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h2 style="text-align: left;" >异步下载任务</h2><p>1.点击导出试卷的时候 请求接口，传递两个参数，一个是试卷名称一个是试卷状态 导出成功和失败都给提示<br>2.这里不是直接的导出(下载),是要通过异步的方式来下载<br>3.导出数据需要在系统中，点击导出下载进入任务列表页<br>4.在任务列表页，展示出对应的导出数据，并且点击某一项的下载，进行下载操作<br>5.通过node.js的https模块的get去发送请求，通过fs管道来进行保存文件<br>使用到了node.js中的https模块的get方法来进行下载文件的url请求，并且使用node.js的fs模块加入管道来保存文件<br>前端<br>│ 点击导出 → POST &#x2F;api&#x2F;export<br>↓<br>后端API<br>│ 创建任务记录 → 数据库<br>↓<br>任务队列（Bull）<br>│ Worker进程处理<br>↓<br>HTTPS请求外部资源 → 流式保存到磁盘<br>│ 成功 → 更新任务状态<br>↓<br>任务列表页 ← GET &#x2F;api&#x2F;tasks<br>│ 点击下载 → GET &#x2F;api&#x2F;download&#x2F;:id<br>↓<br>文件流返回 → 浏览器下载</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// Worker处理示例</span><span class="token keyword">const</span> https <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'https'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>exportQueue<span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">job</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> taskId<span class="token punctuation">,</span> name<span class="token punctuation">,</span> status <span class="token punctuation">&#125;</span> <span class="token operator">=</span> job<span class="token punctuation">.</span>data<span class="token punctuation">;</span>  <span class="token keyword">const</span> filePath <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">./exports/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>taskId<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.pdf</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 假设根据参数生成下载URL</span>    <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token function">buildExportURL</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">await</span> <span class="token function">downloadFile</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">await</span> db<span class="token punctuation">.</span><span class="token function">collection</span><span class="token punctuation">(</span><span class="token string">'tasks'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">updateOne</span><span class="token punctuation">(</span>      <span class="token punctuation">&#123;</span> <span class="token literal-property property">_id</span><span class="token operator">:</span> taskId <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span> <span class="token literal-property property">$set</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token string">'completed'</span><span class="token punctuation">,</span> filePath <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">await</span> db<span class="token punctuation">.</span><span class="token function">collection</span><span class="token punctuation">(</span><span class="token string">'tasks'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">updateOne</span><span class="token punctuation">(</span>      <span class="token punctuation">&#123;</span> <span class="token literal-property property">_id</span><span class="token operator">:</span> taskId <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span> <span class="token literal-property property">$set</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token string">'failed'</span><span class="token punctuation">,</span> <span class="token literal-property property">error</span><span class="token operator">:</span> error<span class="token punctuation">.</span>message <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">downloadFile</span><span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> filePath</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    https<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> fileStream <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createWriteStream</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>      response<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>fileStream<span class="token punctuation">)</span><span class="token punctuation">;</span>      fileStream<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'finish'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      fileStream<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 style="text-align: left;" >大文件上传</h2><div class="note simple"><p>基于 Element-Plus Upload 组件封装大文件上传功能</p></div><h3 style="text-align: left;" >思路</h3><p><strong>前端</strong><br><i style="font-size: 20px; color:#07da20;margin-right: 10px;">1.</i>得到文件,通过el-upload组件得到上传文件;<br><i style="font-size: 20px; color:#07da20;margin-right: 10px;">2.</i>文件切片,将上传文件按照预先定义好的单个切片大小,将文件切分成一个个的切片; (得到的上传文件是Blob文件, 可以通过slice方法对文件进行截取,从而按指定大小进行切片)<br><i style="font-size: 20px; color:#07da20;margin-right: 10px;">3.</i>切片编号,由于是并发,传输到服务器的顺序可能会发生变化, 因此还需要给每个切片记录顺序<br><i style="font-size: 20px; color:#07da20;margin-right: 10px;">4.</i>分片上传,然后借助http的可并发性,同时上传多个切片。这样从原本的一个大文件,变成了并发传多个小的文件切片，可大大减少上传时间<br><i style="font-size: 20px; color:#07da20;margin-right: 10px;">5.</i>合并切片,上传完毕通知服务器切片上传完了,让其合并切片，完成上传</p><h3 style="text-align: left;" >代码拆分</h3><ol><li><p><strong>自定义 el-upload 组件的上传方式</strong>（得到文件）</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- http-request 覆盖默认的 Xhr 行为，允许自行实现上传文件的请求 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-upload</span>  <span class="token attr-name"><span class="token namespace">v-model:</span>file-list</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fileList<span class="token punctuation">"</span></span>  <span class="token attr-name">:limit</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>FILE_MAX_LENGTH<span class="token punctuation">"</span></span>  <span class="token attr-name">:on-exceed</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handleExceed<span class="token punctuation">"</span></span>  <span class="token attr-name">:before-upload</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>beforeUpload<span class="token punctuation">"</span></span>  <span class="token attr-name">:http-request</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handleUpload<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点击上传<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#tip</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>el-upload__tip<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>上传文件大小不能超过1GB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-upload</span><span class="token punctuation">></span></span></code></pre></li><li><p><strong>handleUpload 回调中获取上传的文件，对其进行切片</strong>（文件切片）</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// size就是以多大为标准切</span><span class="token keyword">const</span> <span class="token function-variable function">createChunkFileList</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">file</span><span class="token operator">:</span> File<span class="token punctuation">,</span> size <span class="token operator">=</span> <span class="token constant">CHUNK_SIZE</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 最后数组里放的就是一个个的切片</span>  <span class="token keyword">const</span> chunkFileList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> currentSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>currentSize <span class="token operator">&lt;</span> file<span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 第一次 0 - 10mb</span>    <span class="token comment">// 第二次 10mb - 20mb</span>    <span class="token comment">// ...</span>    chunkFileList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>currentSize<span class="token punctuation">,</span> currentSize <span class="token operator">+</span> size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    currentSize <span class="token operator">+=</span> size<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> chunkFileList<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre></li><li><p><strong>将切片的数据进行维护成一个包括该切片文件，切片名的对象</strong>（切片编号）</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 一个个切片组成的数组和文件名称</span><span class="token keyword">const</span> <span class="token function-variable function">transformChunkFileList</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">chunkFileList</span><span class="token operator">:</span> Blob<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> chunkFileList<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">chunkFile<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">chunk</span><span class="token operator">:</span> chunkFile<span class="token punctuation">,</span> <span class="token comment">// 切片文件</span>      <span class="token literal-property property">hash</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>index<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token comment">// 切片名</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre></li><li><p><strong>上传切片</strong>（切片上传）</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">uploadChunks</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">fileList</span><span class="token operator">:</span> ChunkFileList<span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> requestList <span class="token operator">=</span> fileList    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> chunk<span class="token punctuation">,</span> hash <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token comment">// FormData 是浏览器提供的一个构造器 “用于构造表单提交数据的对象”，可以通过 .append() 方法向其中添加字段或文件。</span>      <span class="token keyword">const</span> formData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"chunk"</span><span class="token punctuation">,</span> chunk<span class="token punctuation">,</span> hash<span class="token punctuation">)</span><span class="token punctuation">;</span>      formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"filename"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> formData<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">formData</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">"http://localhost:3000/upload/file"</span><span class="token punctuation">,</span>        <span class="token literal-property property">data</span><span class="token operator">:</span> formData<span class="token punctuation">,</span>        <span class="token literal-property property">onProgress</span><span class="token operator">:</span> <span class="token function">handleProgress</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 并发请求</span>  <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>requestList<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre></li><li><p><strong>上传完所有切片，通知服务器合并上传切片成一个文件</strong>（合并切片）</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">mergeRequest</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">name</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">"http://localhost:3000/merge/file"</span><span class="token punctuation">,</span>    <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token string-property property">"content-type"</span><span class="token operator">:</span> <span class="token string">"application/json"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token literal-property property">filename</span><span class="token operator">:</span> name<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre></li></ol><h3 style="text-align: left;" >显示上传进度</h3><ol><li><p><strong>上传之前，初始化上传进度</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 代表已经上传的文件大小</span>file<span class="token punctuation">.</span>loaded <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// 让进度条开始显示</span>file<span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token string">"uploading"</span><span class="token punctuation">;</span></code></pre></li><li><p><strong>上传切片的每个请求添加 onprogress</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 当这个请求上传中会触发 onprogress</span>xhr<span class="token punctuation">.</span>upload<span class="token punctuation">.</span>onprogress <span class="token operator">=</span> onProgress<span class="token punctuation">;</span></code></pre></li><li><p><strong>onprogress 中累加已经上传的文件大小，并计算上传总进度</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>loaded <span class="token operator">===</span> e<span class="token punctuation">.</span>total<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 已经加载的大小</span>  file<span class="token punctuation">.</span>loaded <span class="token operator">+=</span> e<span class="token punctuation">.</span>loaded<span class="token punctuation">;</span>  <span class="token comment">// 计算百分比: el-upload组件会根据percentage的值来改变进度条的进度</span>  file<span class="token punctuation">.</span>percentage <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>  <span class="token punctuation">(</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span>loaded <span class="token operator">/</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span>size <span class="token keyword">as</span> number<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p><strong>当上传总进度达到 100 时，需要结束进度条</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span>percentage <span class="token operator">===</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 进度条结束，显示成功的图标</span>  file<span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li></ol><h3 style="text-align: left;" >断点续传</h3><p>断点续传的原理在于前端&#x2F;服务端需要记住已上传的切片，这样下次上传就可以跳过之前已上传的部分，有两种方案实现记忆的功能</p><ul><li>前端方案: 前端使用 localStorage 记录已上传的切片 hash</li><li>服务端方案: 服务端保存已上传的切片 hash，前端每次上传前向服务端获取已上传的切片</li></ul><p>前端方案有一个缺陷，如果换了个浏览器就失去了记忆的效果，所以我们选服务端方案</p><p>步骤：<br><i style="font-size: 20px; color:#07da20;margin-right: 10px;">1.</i> 使用 web-worker 根据文件内容生成 hash。</p><p>之前我们使用文件名 + 切片下标作为切片 hash，这样做文件名一旦修改就失去了效果。而事实上只要文件内容不变，hash 就不应该变化，所以正确的做法是根据文件内容生成 hash。<br />可以使用库 <code>spark-md5</code>，它可以根据文件内容计算出文件的 hash 值。<br />由于文件内容比较大，计算 hash 比较耗时，会引起 UI 的阻塞，导致页面假死状态。所以我们使用 web-worker 在 worker 线程计算 hash，这样用户仍可以在主界面正常的交互</p><p><i style="font-size: 20px; color:#07da20;margin-right: 10px;">2.</i>计算的 hash 发送给服务器，用来作为文件的名称<br><i style="font-size: 20px; color:#07da20;margin-right: 10px;">3.</i>服务器将文件以 hash 的名称保存起来</p><h3 style="text-align: left;" >恢复上传</h3><ol><li>携带 hash 参数发送请求给服务器，获取该文件是否上传过；</li><li>如果上传过，无需上传（实现秒传）；</li><li>如果只上传了一部分，获取上传的一部分切片名称，前端上传时跳过这些已经上传切片，这样就实现了“续传”的效果；（过滤）</li><li>如果没有上传过就直接全部上传即可。<br>后端两个地方 一个是专门用来传递的 一个是存起来的切片文件夹</li></ol><h3 style="text-align: left;" >完整代码</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>el<span class="token operator">-</span>upload    v<span class="token operator">-</span>model<span class="token operator">:</span>file<span class="token operator">-</span>list<span class="token operator">=</span><span class="token string">"fileList"</span>    <span class="token operator">:</span>limit<span class="token operator">=</span><span class="token string">"FILE_MAX_LENGTH"</span>    <span class="token operator">:</span>on<span class="token operator">-</span>exceed<span class="token operator">=</span><span class="token string">"handleExceed"</span>    <span class="token operator">:</span>before<span class="token operator">-</span>upload<span class="token operator">=</span><span class="token string">"beforeUpload"</span>    <span class="token operator">:</span>http<span class="token operator">-</span>request<span class="token operator">=</span><span class="token string">"handleUpload"</span>  <span class="token operator">></span>    <span class="token operator">&lt;</span>el<span class="token operator">-</span>button type<span class="token operator">=</span><span class="token string">"primary"</span><span class="token operator">></span>点击上传<span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span>template #tip<span class="token operator">></span>      <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"el-upload__tip"</span><span class="token operator">></span>上传文件大小不能超过1GB<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>upload<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script lang<span class="token operator">=</span><span class="token string">"ts"</span><span class="token operator">></span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Upload"</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>script lang<span class="token operator">=</span><span class="token string">"ts"</span> setup<span class="token operator">></span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ElMessage <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"element-plus"</span><span class="token punctuation">;</span><span class="token keyword">import</span> type <span class="token punctuation">&#123;</span>  UploadProps<span class="token punctuation">,</span>  <span class="token comment">// UploadUserFile,</span>  UploadRequestOptions<span class="token punctuation">,</span><span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"element-plus"</span><span class="token punctuation">;</span><span class="token keyword">import</span> type <span class="token punctuation">&#123;</span>  ChunkFileList<span class="token punctuation">,</span>  UploadCustomFile<span class="token punctuation">,</span>  OnProgress<span class="token punctuation">,</span>  RequestHandler<span class="token punctuation">,</span><span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./type"</span><span class="token punctuation">;</span><span class="token comment">// 上传的文件列表</span><span class="token keyword">const</span> fileList <span class="token operator">=</span> ref<span class="token operator">&lt;</span>UploadCustomFile<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 允许上传的文件最大数量</span><span class="token keyword">const</span> <span class="token constant">FILE_MAX_LENGTH</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token comment">// 上传超出限制</span><span class="token keyword">const</span> <span class="token literal-property property">handleExceed</span><span class="token operator">:</span> UploadProps<span class="token punctuation">[</span><span class="token string">"onExceed"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  ElMessage<span class="token punctuation">.</span><span class="token function">warning</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">上传图片数量不能超过</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token constant">FILE_MAX_LENGTH</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">个！</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 上传之前</span><span class="token keyword">const</span> <span class="token literal-property property">beforeUpload</span><span class="token operator">:</span> UploadProps<span class="token punctuation">[</span><span class="token string">"beforeUpload"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">rawFile</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>rawFile<span class="token punctuation">.</span>size <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ElMessage<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"上传大小不能超过1G!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 使用 web-worker 创建 hash</span><span class="token keyword">const</span> createHash <span class="token operator">=</span> <span class="token punctuation">(</span>chunkFileList<span class="token operator">:</span> Blob<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> Promise<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 创建worker</span>    <span class="token keyword">const</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span>      <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">"./createHashWorker.js"</span><span class="token punctuation">,</span> <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span>        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"module"</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 给worker发送消息</span>    worker<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span>chunkFileList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 接受worker的消息</span>    worker<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> hash <span class="token punctuation">&#125;</span> <span class="token operator">=</span> e<span class="token punctuation">.</span>data<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>hash<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">resolve</span><span class="token punctuation">(</span>hash<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 切片上传</span><span class="token keyword">const</span> <span class="token function-variable function">handleUpload</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">options</span><span class="token operator">:</span> UploadRequestOptions</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 1. 生成文件切片</span>  <span class="token keyword">const</span> chunkFileList <span class="token operator">=</span> <span class="token function">createChunkFileList</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> name <span class="token operator">=</span> options<span class="token punctuation">.</span>file<span class="token punctuation">.</span>name<span class="token punctuation">;</span>  <span class="token comment">// 生成文件的hash</span>  <span class="token keyword">const</span> hash <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">createHash</span><span class="token punctuation">(</span>chunkFileList<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 2. 将切片的数据进行维护成一个包括该切片文件，切片名的对象</span>  <span class="token keyword">const</span> transformFileList <span class="token operator">=</span> <span class="token function">transformChunkFileList</span><span class="token punctuation">(</span>chunkFileList<span class="token punctuation">,</span> name<span class="token punctuation">,</span> hash<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 上传之前，初始化上传进度</span>  fileList<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">file</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span>name <span class="token operator">===</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      file<span class="token punctuation">.</span>loaded <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      file<span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token string">"uploading"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 确认上传切片情况</span>  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> data <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">verifyRequest</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> hash<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>data<span class="token punctuation">.</span>needUpload<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 3. 上传切片</span>  <span class="token keyword">await</span> <span class="token function">uploadChunks</span><span class="token punctuation">(</span>transformFileList<span class="token punctuation">,</span> name<span class="token punctuation">,</span> data<span class="token punctuation">.</span>chunkFileList<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 4. 合并</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">mergeRequest</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> hash<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 自定义切片大小 10mb</span><span class="token keyword">const</span> <span class="token constant">CHUNK_SIZE</span> <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">;</span><span class="token comment">// 1. 生成文件切片</span><span class="token keyword">const</span> <span class="token function-variable function">createChunkFileList</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">file</span><span class="token operator">:</span> File<span class="token punctuation">,</span> size <span class="token operator">=</span> <span class="token constant">CHUNK_SIZE</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> chunkFileList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> currentSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>currentSize <span class="token operator">&lt;</span> file<span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 第一次 0 - 10mb</span>    <span class="token comment">// 第二次 10mb - 20mb</span>    <span class="token comment">// ...</span>    chunkFileList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>currentSize<span class="token punctuation">,</span> currentSize <span class="token operator">+</span> size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    currentSize <span class="token operator">+=</span> size<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> chunkFileList<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 2. 将切片的数据进行维护成一个包括该切片文件，切片名的对象</span><span class="token keyword">const</span> <span class="token function-variable function">transformChunkFileList</span> <span class="token operator">=</span> <span class="token punctuation">(</span>  <span class="token parameter"><span class="token literal-property property">chunkFileList</span><span class="token operator">:</span> Blob<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> string<span class="token punctuation">,</span>  <span class="token literal-property property">hash</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> chunkFileList<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">chunkFile<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">chunk</span><span class="token operator">:</span> chunkFile<span class="token punctuation">,</span> <span class="token comment">// 切片文件</span>      <span class="token literal-property property">hash</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>hash<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>index<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token comment">// 切片名</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 3. 自定义上传切片的方法</span><span class="token keyword">const</span> <span class="token literal-property property">request</span><span class="token operator">:</span> RequestHandler <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  url<span class="token punctuation">,</span>  data<span class="token punctuation">,</span>  method <span class="token operator">=</span> <span class="token string">"post"</span><span class="token punctuation">,</span>  headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  onProgress<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>onProgress<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      xhr<span class="token punctuation">.</span>upload<span class="token punctuation">.</span>onprogress <span class="token operator">=</span> onProgress<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token operator">=></span>      xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> headers<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    xhr<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"load"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">200</span> <span class="token operator">||</span> xhr<span class="token punctuation">.</span>status <span class="token operator">>=</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">"失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target <span class="token keyword">as</span> XMLHttpRequest<span class="token punctuation">)</span><span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> handleProgress <span class="token operator">=</span> <span class="token punctuation">(</span>name<span class="token operator">:</span> string<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token parameter">OnProgress</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    fileList<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">file</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span>name <span class="token operator">===</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>loaded <span class="token operator">===</span> e<span class="token punctuation">.</span>total<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token comment">// 已经加载的大小</span>          file<span class="token punctuation">.</span>loaded <span class="token operator">+=</span> e<span class="token punctuation">.</span>loaded<span class="token punctuation">;</span>          <span class="token comment">// 计算百分比</span>          file<span class="token punctuation">.</span>percentage <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>            <span class="token punctuation">(</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span>loaded <span class="token operator">/</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span>size <span class="token keyword">as</span> number<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>          <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span>percentage <span class="token operator">===</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            file<span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token string">"success"</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 确认上传切片情况</span><span class="token keyword">const</span> <span class="token function-variable function">verifyRequest</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">filename</span><span class="token operator">:</span> string<span class="token punctuation">,</span> <span class="token literal-property property">hash</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">"http://localhost:3000/verify/file"</span><span class="token punctuation">,</span>    <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token string-property property">"content-type"</span><span class="token operator">:</span> <span class="token string">"application/json"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      filename<span class="token punctuation">,</span>      <span class="token literal-property property">fileHash</span><span class="token operator">:</span> hash<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 4. 上传切片</span><span class="token keyword">const</span> uploadChunks <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>  <span class="token literal-property property">fileList</span><span class="token operator">:</span> ChunkFileList<span class="token punctuation">,</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> string<span class="token punctuation">,</span>  <span class="token literal-property property">chunkFileList</span><span class="token operator">:</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// 已经上传好的切片</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> requestList <span class="token operator">=</span> fileList    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">file</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token operator">!</span>chunkFileList<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">chunkFile</span><span class="token punctuation">)</span> <span class="token operator">=></span> file<span class="token punctuation">.</span>hash<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>chunkFile<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> chunk<span class="token punctuation">,</span> hash <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> formData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"chunk"</span><span class="token punctuation">,</span> chunk<span class="token punctuation">,</span> hash<span class="token punctuation">)</span><span class="token punctuation">;</span>      formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"filename"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> formData<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">formData</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">"http://localhost:3000/upload/file"</span><span class="token punctuation">,</span>        <span class="token literal-property property">data</span><span class="token operator">:</span> formData<span class="token punctuation">,</span>        <span class="token literal-property property">onProgress</span><span class="token operator">:</span> <span class="token function">handleProgress</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 并发请求</span>  <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>requestList<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 5. 通知服务器合并上传切片成一个文件</span><span class="token keyword">const</span> <span class="token function-variable function">mergeRequest</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">name</span><span class="token operator">:</span> string<span class="token punctuation">,</span> <span class="token literal-property property">hash</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">"http://localhost:3000/merge/file"</span><span class="token punctuation">,</span>    <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token string-property property">"content-type"</span><span class="token operator">:</span> <span class="token string">"application/json"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token literal-property property">filename</span><span class="token operator">:</span> name<span class="token punctuation">,</span>      <span class="token literal-property property">fileHash</span><span class="token operator">:</span> hash<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>style scoped<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></code></pre><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 导入脚本</span><span class="token keyword">import</span> SparkMD5 <span class="token keyword">from</span> <span class="token string">"spark-md5"</span><span class="token punctuation">;</span><span class="token comment">// 生成文件 hash</span>self<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> chunkFileList <span class="token operator">=</span> e<span class="token punctuation">.</span>data<span class="token punctuation">;</span>  <span class="token keyword">const</span> spark <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SparkMD5<span class="token punctuation">.</span>ArrayBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> currentChunk <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token function-variable function">loadNext</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">index</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    reader<span class="token punctuation">.</span><span class="token function">readAsArrayBuffer</span><span class="token punctuation">(</span>chunkFileList<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    reader<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      currentChunk<span class="token operator">++</span><span class="token punctuation">;</span>      spark<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>currentChunk <span class="token operator">===</span> chunkFileList<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        self<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>          <span class="token literal-property property">hash</span><span class="token operator">:</span> spark<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        self<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token function">loadNext</span><span class="token punctuation">(</span>currentChunk<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token function">loadNext</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// type.ts</span><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">ChunkFile</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">chunk</span><span class="token operator">:</span> Blob<span class="token punctuation">;</span>  <span class="token literal-property property">hash</span><span class="token operator">:</span> string<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> type ChunkFileList <span class="token operator">=</span> ChunkFile<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name">XMLHttpRequest</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">loaded</span><span class="token operator">:</span> number<span class="token punctuation">;</span>  <span class="token literal-property property">total</span><span class="token operator">:</span> number<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">RequestType</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">url</span><span class="token operator">:</span> string<span class="token punctuation">;</span>  <span class="token literal-property property">data</span><span class="token operator">:</span> any<span class="token punctuation">;</span>  headers<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">[</span>key<span class="token operator">:</span> string<span class="token punctuation">]</span><span class="token operator">:</span> any<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  method<span class="token operator">?</span><span class="token operator">:</span> <span class="token string">"post"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">ResponseType</span><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> any<span class="token operator">></span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">code</span><span class="token operator">:</span> number<span class="token punctuation">;</span>  <span class="token literal-property property">message</span><span class="token operator">:</span> string<span class="token punctuation">;</span>  <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>  <span class="token literal-property property">success</span><span class="token operator">:</span> boolean<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">RequestHandler</span><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> any<span class="token operator">></span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">(</span>options<span class="token operator">:</span> RequestType<span class="token punctuation">)</span><span class="token operator">:</span> Promise<span class="token operator">&lt;</span>ResponseType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">>></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 style="text-align: left;" >文件上传时axios配置区别</h3><p>使用 FormData 上传：FormData 是浏览器提供的一个构造器 “用于构造表单提交数据的对象”，可以通过 .append() 方法向其中添加字段或文件。<br>formData.append(“chunk”, chunk, hash);<br>formData.append(“filename”, name);<br>添加每一个切片文件和对应的hash以及文件名称</p><h2 style="text-align: left;" >视频模块优化</h2><div class="note simple"><p>首页视频列表太多会影响首屏加载速度，因此我们使用了 IntersectionObserver 监听视频卡片是否进入视口。进入视口后再加载视频封面和 metadata元数据。同时利用 requestIdleCallback 空闲时间预加载热门视频的第一段分片，让用户点击后几乎秒开。首屏加载时间下降了约 40%。</p></div><p><strong>懒加载与预加载结合：</strong><br>视频卡片滚动进入视口时再加载视频（懒加载）<br>在浏览器空闲时预加载视频的第一段分片（预加载）<br>思路：</p><ol><li>先封装一个视频卡片组件。你在一个视频列表页面，会渲染很多这样的卡片。ref&#x3D;”cardRef”给整个卡片绑定一个引用，后面用来监听是否出现在屏幕上，v-if&#x3D;”!visible”：如果还没进入屏幕，显示一张图片；v-else：如果已经进入视口了，才显示 <code>&lt;video&gt;</code> 视频标签, preload&#x3D;”metadata”：只加载元数据（而不是整个视频），节省资源</li><li>懒加载：监听是否进入视口,使用 IntersectionObserver 监听这个卡片元素是否“出现在可视区域”,一旦进入视口,设置 visible.value &#x3D; true，显示视频,停止监听（disconnect()）</li></ol><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> observer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntersectionObserver</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">entries</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>entries<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isIntersecting<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    visible<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token boolean">true</span>    observer<span class="token punctuation">.</span><span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><ol start="3"><li>预加载首个分片：<br>这部分在浏览器“空闲时”做预加载:通过 requestIdleCallback，避免阻塞主线程,用 Range 请求视频文件的前 100KB（可包含 .ts 分片或 HLS index），达到“边下边播”优化</li></ol><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">requestIdleCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">fetch</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>src<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">Range</span><span class="token operator">:</span> <span class="token string">'bytes=0-100000'</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h2 style="text-align: left;" >长期运行的3D场景内存管理</h2><div class="note simple"><p>在实际项目中，Three.js 并不会自动释放 GPU 和 JS 内存资源，开发者必须主动调用 .dispose() 方法释放资源，否则会导致内存持续增长、性能下降甚至崩溃。特别是对于 &gt;8 小时的持续运行场景，必须构建资源回收机制、定期清理无用对象、控制动画循环以及事件监听器的使用。</p></div><p>背景：Three.js 在长时间运行的 3D 场景中，若未妥善管理资源（如纹理、几何体、材质、监听器等），极易造成内存泄漏，进而引发性能下降甚至崩溃，特别是在设备性能受限的浏览器环境下</p><p>工具辅助分析：<br>使用浏览器开发者工具（Chrome DevTools）中的 Memory &gt; Heap Snapshot 检查未释放对象<br>处理方式：</p><ul><li><p>正确释放资源：在不使用几何体、材质、纹理等资源时,要及时释放它们</p></li><li><p>移除不再使用的对象: 当场景中移除它们</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 释放几何体和材质</span>mesh<span class="token punctuation">.</span>geometry<span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mesh<span class="token punctuation">.</span>material<span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 释放纹理</span>texture<span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 从场景中移除对象</span>scene<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>mesh<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>控制器、渲染器资源释放</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">controls<span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 如 OrbitControls</span>renderer<span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 销毁 WebGL 上下文资源</span></code></pre></li><li><p>清理事件监听器: 如果为对象添加了事件监听器,在对象不再使用时,要及时移除这些监听器, 避免内存泄漏</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">cancelAnimationFrame</span><span class="token punctuation">(</span>animationId<span class="token punctuation">)</span><span class="token punctuation">;</span>window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'resize'</span><span class="token punctuation">,</span> onResize<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>防止重复创建资源（缓存复用）<br>使用资源管理器加载复用模型、纹理等<br>避免每次切换都新建材质&#x2F;几何体</p></li><li><p>使用 WebGL 渲染器的清理函数</p></li></ul><pre class="language-javascript" data-language="javascript"><code class="language-javascript">renderer<span class="token punctuation">.</span><span class="token function">forceContextLoss</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 手动释放 GPU 资源</span>renderer<span class="token punctuation">.</span>context <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>renderer<span class="token punctuation">.</span>domElement <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></code></pre><p>如果不及时释放不再使用的资源，内存消耗会逐渐增大，最终导致性能下降，甚至浏览器崩溃。<br>1）确保及时销毁不再使用的资源<br>Three.js 中的许多对象（如 Geometry, Material, Texture, Mesh, Scene 等）都占用 WebGL 的资源。当这些对象不再使用时，必须手动释放它们。dispose()<br>2）定期清理和重置场景<br>长时间运行时，定期清理不再使用的对象是防止内存泄漏的重要措施。每隔一段时间，可以使用如下方法检查并移除不再需要的物体，或者将不再可见的物体从场景中移除。自定义判断物体是否可见<br>3）清理事件监听器<br>Three.js 中的对象可能会有一些事件监听器，如果不清理它们，也可能导致内存泄漏。例如，场景中的对象可能会注册鼠标事件、窗口大小调整事件等。如果这些监听器不再需要，但没有移除，也会导致内存泄漏。window.removeEventListener</p><p>4）减少动画渲染过度<br>长时间运行时，动画和帧渲染的频率可能导致大量的资源被分配到 GPU 和内存中。如果不再需要动画，或者某些动画可以暂停，可以减少渲染的次数。</p><p>5）释放和清理纹理和缓存<br>使用 THREE.Texture 对象时，尤其是动态加载纹理时，确保及时清理不再使用的纹理资源。如果纹理缓存未及时清除，会导致显存泄漏。</p><p>6）使用对象池 来复用资源，减少不必要的内存分配 对象池通过预先创建一定数量的对象，当需要一个新对象时，池中有可用的对象时直接返回，而不是重新创建一个新的对象。当对象不再使用时，应该将它归还到对象池中，而不是销毁它。这样就避免了频繁的对象创建和销毁，提高了性能。</p><h2 style="text-align: left;" >echarts大屏适配</h2><p>不管用户用多大分辨率的屏幕，我们的图表都能按比例缩放，完整显示在屏幕中间，并且不被裁剪。<br>我们会根据浏览器窗口的宽高，去和设计稿的宽高做一个比例比较，然后按照这个比例整体缩放页面内容。这样图表就不会变形，也不会溢出。</p><ol><li>大屏适配的核心是通过 <strong>父盒子相对定位</strong> 和 <strong>子组件绝对定位</strong> 的方式，将内容居中展示，并通过 <code>scale</code> 动态调整大小，实现适配不同分辨率的屏幕</li></ol><ul><li>父盒子设置 <code>position: relative;</code>，为子组件提供定位上下文。</li><li>子组件设置 <code>position: absolute;</code>，通过 <code>transform</code> 实现居中显示，同时利用 <code>scale</code> 按比例缩放内容。</li></ul><ol start="2"><li>封装适配组件</li></ol><ul><li>将适配逻辑封装成 Vue 组件，支持动态宽高设置。</li><li>通过 <code>scale</code> 属性动态调整子组件的缩放比例，确保宽高比一致。<br> <strong>总结</strong><br> 父盒子相对定位，子组件绝对定位，并通过 <code>transform: translate(-50%, -50%)</code> 将子组件居中。<br> 动态计算屏幕与设计稿的宽高比例，取最小值作为缩放比例，并使用 <code>scale</code> 动态缩放子组件。 <pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span> <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span> <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>./images/bg.png<span class="token punctuation">)</span></span><span class="token punctuation">;</span> <span class="token property">background-repeat</span><span class="token punctuation">:</span> no-repeat<span class="token punctuation">;</span> <span class="token property">background-size</span><span class="token punctuation">:</span> cover<span class="token punctuation">;</span> <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span> <span class="token selector">.content</span> <span class="token punctuation">&#123;</span>   <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>   <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>   <span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>   <span class="token property">top</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>   <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-50%<span class="token punctuation">,</span> -50%<span class="token punctuation">)</span><span class="token punctuation">;</span> // 居中   <span class="token property">transform-origin</span><span class="token punctuation">:</span> 0 0<span class="token punctuation">;</span>   <span class="token property">width</span><span class="token punctuation">:</span> 2380px<span class="token punctuation">;</span>   <span class="token property">height</span><span class="token punctuation">:</span> 1300px<span class="token punctuation">;</span>   <span class="token property">padding</span><span class="token punctuation">:</span> 0 10px<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span></code></pre></li></ul> <pre class="language-javascript" data-language="javascript"><code class="language-javascript"> <span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div    <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"ScreenAdapter"</span>    <span class="token operator">:</span>style<span class="token operator">=</span><span class="token string">"style"</span>  <span class="token operator">></span>   <span class="token comment">// 插槽</span>    <span class="token operator">&lt;</span>slot <span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'ScreenAdapter'</span><span class="token punctuation">,</span>  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span>      <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">'2775'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span>      <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">'1730'</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">style</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>width <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">,</span>        <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">,</span>        <span class="token comment">// scale(1)：初始缩放比例为 1。</span><span class="token comment">// translate(-50%, -50%)：用于将容器中心点定位到屏幕的正中心。</span>        <span class="token literal-property property">transform</span><span class="token operator">:</span> <span class="token string">'scale(1) translate(-50%, -50%)'</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">// 在组件挂载时，调用 setScale() 初始化缩放比例。添加 window.onresize 事件监听器，当窗口大小变化时调用 setScale，实时调整适配比例,使用 debounce 对 setScale 进行防抖处理，避免频繁执行</span>  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setScale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    window<span class="token punctuation">.</span>onresize <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">debounce</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>setScale<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//防抖函数 最后一次触发</span>    <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> delay</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> timer<span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>        timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>          <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>     <span class="token comment">// 计算当前屏幕的宽度和高度相对于设计稿宽高的缩放比例 取宽高比例的最小值，确保内容完全适配屏幕</span>    <span class="token function">getScale</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> w <span class="token operator">=</span> window<span class="token punctuation">.</span>innerWidth <span class="token operator">/</span> <span class="token keyword">this</span><span class="token punctuation">.</span>width<span class="token punctuation">;</span>      <span class="token keyword">const</span> h <span class="token operator">=</span> window<span class="token punctuation">.</span>innerHeight <span class="token operator">/</span> <span class="token keyword">this</span><span class="token punctuation">.</span>height<span class="token punctuation">;</span>      <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">setScale</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>transform <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">scale(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getScale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">) translate(-50%, -50%)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>style lang<span class="token operator">=</span><span class="token string">"scss"</span> scoped<span class="token operator">></span><span class="token punctuation">.</span>ScreenAdapter <span class="token punctuation">&#123;</span>  transform<span class="token operator">-</span>origin<span class="token operator">:</span> <span class="token number">0</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token literal-property property">position</span><span class="token operator">:</span> absolute<span class="token punctuation">;</span>  <span class="token literal-property property">left</span><span class="token operator">:</span> <span class="token number">50</span><span class="token operator">%</span><span class="token punctuation">;</span>  <span class="token literal-property property">top</span><span class="token operator">:</span> <span class="token number">50</span><span class="token operator">%</span><span class="token punctuation">;</span>  <span class="token literal-property property">transition</span><span class="token operator">:</span> 1s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></code></pre><h2 style="text-align: left;" >echarts封装</h2><p>通过 <code>props</code> 接收外部配置 增加支持多种图表类型的逻辑（如通过 <code>type</code> 动态渲染折线图、柱状图等）。 使用 <code>slots</code> 支持图表标题、图例等的定制化内容。通过 <code>options</code> 接收父组件传递的 ECharts 配置项 数据  使用 Vue 的 <code>watch</code> 监听 <code>props.options</code> 的变化，并更新图表。</p><p><code>getOption</code> 函数返回 ECharts 图表配置对象，通过 props 和动态数据驱动配置。</p><p>将 <code>legend</code>(配置了 <code>textStyle</code>（颜色、字体大小）、<code>itemWidth</code> 和 <code>itemHeight</code>（图例宽高）、<code>itemGap</code>（图例间距）。)、<code>tooltip</code>(提示框<code>trigger: &#39;axis&#39;</code>，提示框在鼠标悬浮到轴上时显示)、<code>grid</code>(设置 <code>top</code>、<code>left</code>、<code>right</code> 和 <code>bottom</code>，保证图表在容器中合理分布。</p><p><strong>自动布局：</strong> 开启 <code>containLabel</code>，避免图表内容与边界重叠 )、<code>xAxis</code>、<code>yAxis</code>、<code>series</code>(<strong>数据系列</strong> 柱子宽度,颜色,label柱子上面的数字显示) 等部分按照 ECharts 的标准配置进行模块化拆分，方便阅读和修改。</p><p>提供高度自定义的样式设置（如颜色、字体、间距等），满足不同业务需求。</p><h2 style="text-align: left;" >二次封装axios</h2><ol><li>携带统一的请求前缀 + 超时时间</li><li>进度条的添加（也可以在路由守卫去做）</li><li>返回的响应不再是响应，而是响应里面的数据data</li><li>统一处理请求错误，也可以选择后续继续处理或者不处理<br>发送请求，携带公共请求参数：token<br>返回响应，根据 code &#x2F; status 判断请求成功还是失败</li></ol><ul><li>成功返回成功的数据</li><li>失败提示失败的准确原因</li></ul><h3 style="text-align: left;" >取消重复请求</h3><ol><li>每个请求根据请求的配置项生成一个相应 key（相同的请求生成的 key 相同，不同的请求生成的 key 不同）</li><li>发送请求的请求拦截器中，判断当前请求是否在请求列表容器中存在，存在即取消上一个请求,axios取消请求的cancelToken使用</li><li>如果当前请求在请求列表容器中不存在，需要将其存储起来</li><li>请求完成，在响应拦截器中需要将当前请求给删除</li></ol><h3 style="text-align: left;" >取消上一个页面的请求</h3><ol><li>存储请求时，需要将取消请求的方法和当前路由路径一起储存 </li><li>当路由跳转时，判断请求列表中的请求地址和要去的路由地址是否时同一个，如果不是，就要取消</li></ol><h2 style="text-align: left;" >3D可视化的高拟真度</h2><p><strong>模型加载与优化</strong><br>我们使用了 GLTF 格式加载设备模型，体积小，加载快，支持 PBR 材质效果；<br>对模型做了面数优化、材质合并、贴图压缩，确保复杂场景下资源占用可控；<br>使用 DRACOLoader 实现压缩传输，显著减少加载时间。</p><p><strong>性能优化策略</strong><br>启用了 requestAnimationFrame 控制动画节奏，避免不必要的重绘；<br>使用 frustum culling（视锥体裁剪） 和 场景分层渲染，只渲染视野内设备；<br>合理管理 lights 和 shadows，避免全局光源开销过大；<br>将动画状态控制与渲染分离，提升并发渲染效率。</p><p><strong>生产工艺动画的实现</strong><br>利用 Three.js 中的 AnimationMixer 控制动画播放、暂停与过渡；<br>动画节奏模拟真实生产节拍，路径运动使用了 CatmullRomCurve3 曲线路径；<br>每台设备有独立的状态管理，结合实际流程分步推进动画，提升拟真度；<br>动画中还集成了文字标注、粒子效果等增强信息维度。</p><h2 style="text-align: left;" >并发冲突控制</h2><p>你是如何实现虚拟化生产流程的同步机制的？尤其在多个学生端同时操作同一个设备的开关时，如何处理并发冲突并保持 3D 场景与后台数据的秒级同步？</p><p><strong>回答</strong><br>在我们负责的虚拟工厂模拟系统中，为了让多个学生同时参与生产流程控制，我们设计了一个前端与后台秒级同步机制 + 并发冲突处理策略，重点解决两个核心问题：<br>🎯 1. 场景状态同步：前端与后端的实时联动</p><p>每个设备的开关状态、运行状态都由后端统一维护设备状态中心；<br>前端定时（每秒或定间隔）通过接口轮询或使用 WebSocket 获取设备最新状态；<br>前端根据状态实时更新 Three.js 场景中的动画、颜色或提示信息，实现秒级同步体验；<br>若设备状态发生变化（如从“关闭”变为“开启”），立即切换对应的模型动作、贴图材质或播放动画。</p><p>⚙️ 2. 并发冲突处理：多个学生同时操作同一设备</p><p>每个学生端操作（如点击“开启设备”按钮）会向后台发起接口请求；<br>后台设置了 设备状态锁机制，即当某设备处于“执行中”状态时，其他请求将被排队或返回“设备忙”提示；<br>请求中会携带操作时间戳或用户 ID，用于后台判断哪个请求优先；<br>后台只允许第一个有效请求修改设备状态，后续请求返回当前设备最新状态，前端收到后更新 UI；<br>所有设备状态的变化会通过广播或定时轮询同步给所有学生端，保持一致性。</p><p>💡 示例场景：</p><p>学生 A 和学生 B 同时点击“开启设备”；<br>后台接收到 A 的请求，锁定设备状态为“开启中”，成功修改；<br>B 的请求进入时设备状态已变，不再执行修改操作，返回“设备已开启”；<br>前端 UI 自动刷新状态，展示一致。</p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试技巧</title>
      <link href="/interview-me/"/>
      <url>/interview-me/</url>
      
        <content type="html"><![CDATA[<h3 style="text-align: left;" >简历-铺好你的门面</h3><p><strong>先敬罗衣后敬人</strong><br>用最短的时间让面试官在人群中发现你并想认识你。</p><h4 id="简历优化原则"><a href="#简历优化原则" class="headerlink" title="简历优化原则"></a>简历优化原则</h4><ul><li><strong>弱化底线</strong>：公司最低要求，一般由 HR 把控，如学校、学历等。（<em>弱化</em>）  </li><li><strong>删除干扰项</strong>：可能会让面试官犹豫或直接跳过你的信息，如期望薪资、意向工作地等。（<em>删除</em>）  </li><li><strong>放大亮点</strong>：能吸引面试官关注的关键信息，如大厂经历、大型应用经验、获奖记录等。（<em>放大</em>）</li></ul><p>简历模块<br>1.个人信息  2. 工作经历 3. 项目经历 4.其他信息</p><h4 id="个人信息"><a href="#个人信息" class="headerlink" title="个人信息"></a>个人信息</h4><ul><li><strong>姓名</strong>：XX  </li><li><strong>学校</strong>：XX大学 （2019 - 2023，本科）  </li><li><strong>手机</strong>：136XXXXXXX22  </li><li><strong>邮箱</strong>：<a href="mailto:&#x58;&#88;&#x58;&#x58;&#x58;&#x58;&#88;&#x58;&#64;&#x71;&#113;&#46;&#x63;&#x6f;&#x6d;">&#x58;&#88;&#x58;&#x58;&#x58;&#x58;&#88;&#x58;&#64;&#x71;&#113;&#46;&#x63;&#x6f;&#x6d;</a></li></ul><h4 id="工作经历"><a href="#工作经历" class="headerlink" title="工作经历"></a>工作经历</h4><table><thead><tr><th>起始年月</th><th>公司名 - 部门</th><th>职位名称（职级）</th></tr></thead><tbody><tr><td>2017.01 ~ 2019.05</td><td>阿里巴巴 - 国际自媒体</td><td>高级前端工程师（P6）</td></tr><tr><td>2019.05 ~ 2022.05</td><td>腾讯 - 云与智慧事业群</td><td>资深前端工程师（3-2）</td></tr><tr><td>2022.05 ~ 2022.12</td><td>字节跳动 - 飞书业务线</td><td>资深前端工程师（2-2）</td></tr></tbody></table><h4 id="项目经验"><a href="#项目经验" class="headerlink" title="项目经验"></a>项目经验</h4><p>腾讯 - 运营触达中台 （2019.05 ~ 2022.05）</p><ul><li><p><strong>描述</strong>：<br>（简要提炼重点，让面试官快速了解 <strong>“系统性质”</strong> 与 <strong>“规模”</strong>。）</p></li><li><p><strong>技术栈</strong>：<br>（主要描述<strong>你涉及到的技术栈</strong>，让面试官快速知道<strong>你会做什么</strong>。）</p></li><li><p><strong>负责部分</strong>：<br>（描述前端<strong>团队规模</strong>，与<strong>你所负责的部分</strong>，让面试官知道<strong>你做了什么，占比多重</strong>。）</p></li></ul><h4 id="其他信息"><a href="#其他信息" class="headerlink" title="其他信息"></a>其他信息</h4><ul><li><strong>获奖情况</strong>  </li><li><strong>个人项目</strong>  </li><li><strong>参与过的开源项目</strong>  </li><li><strong>发表过的文章</strong></li><li><strong>参与过的业界分享</strong><br>……</li></ul><h3 style="text-align: left;" >找职位-铺开各种渠道</h3><p>情景分析–投递简历，石沉大海<br>内推&#x2F;猎头(中高端岗位)&#x2F;招聘软件<br>复盘：追问-&gt;分析-&gt;改进</p><h3 style="text-align: left;" >邀约面试</h3><p>制胜关键-上兵伐谋(收集信息)<br>电话收集：收集岗位信息 判断岗位核心诉求 调整自己为岗位匹配者<br>请问我这次面的是一个什么部门、什么样的业务&#x2F;这个岗位具体业务是什么我想了解一下 尽量加微信（万一我的面试时间有什么调整 一个突发性的情况可以通过这个方式和您沟通或者调整）<br>微信收集：什么端？ 发展史，团队规模，竞品，企业文化，遇到技术问题，面试官风格，面试形式等等</p><h3 style="text-align: left;" >面试前-针对性准备</h3><h4 id="岗位核心诉求"><a href="#岗位核心诉求" class="headerlink" title="岗位核心诉求"></a>岗位核心诉求</h4><h5 id="技术诉求"><a href="#技术诉求" class="headerlink" title="技术诉求"></a>技术诉求</h5><ul><li><strong>需要懂什么</strong>：Vue &#x2F; React &#x2F; Uniapp ？ PC &#x2F; 移动端 &#x2F; 小程序 &#x2F; 原生 ？ nodejs &#x2F; Java ？</li></ul><h5 id="能力诉求"><a href="#能力诉求" class="headerlink" title="能力诉求"></a>能力诉求</h5><ul><li><strong>需要做什么</strong>：带团队 ？ 项目负责人 ？ 核心研发 ？ 普通研发 ？</li></ul><h5 id="业务（经验）诉求"><a href="#业务（经验）诉求" class="headerlink" title="业务（经验）诉求"></a>业务（经验）诉求</h5><ul><li><strong>需要做过什么</strong>：toB ？ toC ？ 电商 ？ 自媒体 ？ 游戏 ？ 图片处理 ？ 性能优化 ？ 中台建设 ？</li></ul><h5 id="成本诉求"><a href="#成本诉求" class="headerlink" title="成本诉求"></a>成本诉求</h5><ul><li><strong>需要多少成本</strong>：8k ？ 10k ？ 15k ？ 20k ？ 30k ？ 40k ？ 55k ？ 70k ？</li></ul><p>诉求： 我需要用<span class='p red'>A成本</span>，请一个懂<span class='p red'>B技术</span>，有<span class='p red'>C经验</span>,具备<span class='p red'>D能力</span>的人<br>回答：我是懂<span class='p red'>B技术</span>，有<span class='p red'>C经验</span>，具有<span class='p red'>D能力</span>，能接受<span class='p red'>A成本</span>的人。（整场面试展现这一点）</p><h4 id="自我介绍"><a href="#自我介绍" class="headerlink" title="自我介绍"></a>自我介绍</h4><p>背景+我是懂<span class='p red'>B技术</span>，有<span class='p red'>C经验</span>，具有<span class='p red'>D能力</span>，能接受<span class='p red'>A成本</span>的人<br>正常换工作：<br>你好，我是XX年毕业于XX学校，XX专业，有XX年的工作经验，主要在XX公司工作，技术栈主要是<span class='p red'>B技术</span>,开发的项目主要是<span class='p red'>C经验</span>，在过去的团队中，主要承担的任务是<span class='p red'>D能力</span><br>选出与岗位诉求匹配的项目：<br><strong>项目描述</strong>：通过无差别录制用户行为，以便有问题时能快速还原问题现场，解决Tob私有化部署客户问题难定位问题。<br><strong>个人负责</strong>：系统负责人，一人独立完成。<br><strong>项目难点</strong>：前端无差别录制会导致前端卡顿。<br><strong>业界方案</strong>：减少记录数据、用indexDB存储、数据合并、web-worker。<br><strong>如何解决</strong>：卡顿本质是计算线程阻塞了渲染线程，通过webworker+indexDB的方案，web-worker完成计算，让渲染线程保持通畅。<br><strong>解决效果</strong>：从卡顿到近乎无感知。</p><h3 style="text-align: left;" >一面-突出技术根基</h3><p>本质：比其他面试者更优秀 心态：去交流  姿态：技术交流，知识分享<br>话术：八股文 + 自己看法 + 自己经验<br>引导：向自己熟悉的领域引导</p><h3 style="text-align: left;" >二面-诉说领域经验</h3><p><strong>考察点1： 过往的业务经验和我们是否匹配？</strong><br>    电商管理系统：订单管理，仓储管理，营销管理，秒杀抢购，物流跟踪等等。<br>    移动端页面：多机型适配，加载性能，体验新能，虚拟列表，滚动防抖，预加载，懒加载等等。<br>    TOB中后台系统：较强的抽象能力，应对不同客户定制化需求，问题跟进，工单跟进等等。</p><p><strong>考察点2：业务能力（做事能力）</strong><br>    根据已有的知识体系，结合业务，是否有形成自己成熟的做事方法论。<br>    而该方法论是否全面，包含考虑到项目的稳定性，安全性，可拓展性，可维护性，持续集成成本，等等。</p><p>我们要做到</p><ol><li>告诉面试官，我做了什么事情，这个事情属于什么业务类型。</li><li>总结出自己做事情方法论，并且分析每个项目，在面试的时候传递给面试官<br/><wavy>遇到什么需求、问题 + 业界解决方案 + 我的解决方案 + 落地效果</wavy><hr/></li></ol><p><strong>后台管理系统优化方案</strong><br><strong>挑战点</strong><br> 目前系统模块大多依赖 UI 框架搭建，研发工作主要集中在重复性的 CRUD 任务，浪费大量研发资源。<br><strong>业界方案</strong><br> 低代码平台：业界通常采用低代码平台简化 CRUD 任务，但由于团队人力有限且项目规模较小，构建低代码平台的成本较高，不适用于当前情况。<br><strong>我的方案</strong>：<br>  通过分析各模块，发现其基本功能高度相似（搜索框、列表、增删改查弹窗、分页等）<br>  通过沉淀这些模板，并暴露关键参数，使得重复功能模块可以通过简单配置快速生成。<br>  这一方案既能提升研发效率，又避免了研发资源的浪费。<br><strong>落地效果</strong><br>  同类型模块仅需配置即可完成开发。<br>  人力成本降低：从 3人&#x2F;天 降至 1人&#x2F;天，大幅提升开发效率。</p><hr/><p><strong>一个功能模块</strong><br><strong>挑战点</strong><br> 这个组件非常特殊，产品总是对这个产品的需求进行高频调整。<br><strong>业界方案</strong><br> 为模块提供极其多的开放性配置，应对产品经理的诉求，但这样会极大增加<br>    维护成本。<br><strong>我的方案</strong>：<br>  写好模块的模板，同时模板中留出很多的slot插槽，同时收拢一个组件库，<br>    用公用组件+插槽+模板的方案，解决高频变动需的新需求。<br><strong>落地效果</strong><br>  同类型模块仅需配置即可完成开发。<br>  就算频繁变动，也不会额外增加我更多的工作量。</p><hr/><h3 style="text-align: left;" >三面-体现你的综合能力</h3>本质：宏观，通过率比前面高，针对核心研发，高p，管理层，来设计关注: 知识体系，做事体系，能否hold住一个业务回答：暗示你能hold住这个事情，你能带领大家hold住这件事情<p><strong>体系化技术思维—— 性能优化案例</strong></p><span class='p red'>加载性能：</span><p>1.体量维度（工程化，代码设计）：资源压缩；模块化，利用路由，按需加载依赖；组件化，加载最小依赖；等等。<br>2.网络维度：减少tcp连接次数，减少3次握手；减少外部服务http请求数；开启gzip传输；缓存；http-dns;等等。<br>3.浏览器维度：http缓存协议（强&#x2F;弱缓存)；PC端域名发散；移动端域名收敛；等等。<br>4.业务维度：首屏服务器渲染，次屏浏览器渲染；懒加载，预加载；loading无感知；等等。</p><span class='p red'>体验性能：</span><p>本质：计算线程不阻塞渲染线程；最小局部渲染，不回流；</p><p><strong>体系化技术思维—— 你工作中做过最成功的事情</strong><br> 遇到什么需求、问题 + 业界解决方案 + 我的解决方案 + 落地效果</p><p><strong>体系化技术思维—— 业务能力</strong><br>对业务有深入理解，判断可行性，风险评估，评估突破口，等等</p><p>职业规划<br>1.希望团队能够提供你什么<br>2.你能为公司带来什么</p><p><strong>面试官问：你还有什么问题</strong><br>1.判断是否通过<br>2.判断面评结果，为谈薪做准备<br>3.判断职位，以及公司对你的定位</p><div class="note pink icon-padding disabled"><i class="note-icon fab fa-cc-visa"></i><p>话术：我在这个面试过程交流下来，我感觉交流挺愉快的，我想问一下在您看来我的沟通过程中还有哪些方面是相对薄弱的，我可以去补充一下，因为这个对于我来说也是一个成长&#x2F; 现在我面的这到底是做一个什么事情，公司对这个岗位的定性是怎么样的。</p></div><h3 style="text-align: left;" >hr面-展现健全人格</h3>呈现特征： 稳定 + 上进 + 锲合度高言行举止： 表达从容，气质不卑不亢，性格开朗，人格健康，个性沉稳心理暗示： 1. 我很优秀 2. 我很抢手 3. 我对收入有要求<p><strong>你最大的缺点是什么</strong></p><div class="note pink icon-padding disabled"><i class="note-icon fab fa-cc-visa"></i><p>话术：<br/> 1. 我比较倾向于技术研究就是toC的实现，但是对于toB的实现比较少，所以我觉得这是我一个比较大的技术缺失吧，但后续我会增强该领域的实现。<br/> 2. 我的英语口语能力不好，阅读能力还可以，所以和外国人交流的时候会不知所措心慌在技术上少了很多和外国友人交流的机会 <br/>3.就我自己的话 我非常看重这个base月薪就是这个offer,最近出去面hr基本都问了这个问题 而我的回答也是比较统一的，我觉得在我的职业生涯里求职的时候对于收入的这部分比重还是占比比较大的 这个也许会导致我做出一些不太正确的选择，但是没办法因为我寒窗苦读十年了终于来到社会有一席之地了，也希望自己和家人过上好的生活 而收入也几乎决定了这些</p></div><p><strong>为什么希望加入我们？如果有一家比这里更好的公司你会选择那边么</strong></p><div class="note pink icon-padding disabled"><i class="note-icon fab fa-cc-visa"></i><p>话术：加入动机，以及对公司业务，团队，文化，了解程度。如果真有这么一家公司，比这边都好我会选择那边 因为我的职业规划是想沉淀在某一个领域 一旦进入我会一直留在那里很多年 所以我这一次选择非常慎重，所以我需要一个令我满意的offer 所以我会选那边 但是如果现在没有这么一家公司，同时我进入了贵公司，在这边工作个一两年，那么我的沉默成本就变高了，我有一定的沉淀在这边，做出来一些成果，同时我和团队有一定的感情，也在这边积累了相关资源，这个时候再冒出来这么一家公司，我可能就不会走了</p></div><p><strong>你怎么看待加班的</strong></p><div class="note pink icon-padding disabled"><i class="note-icon fab fa-cc-visa"></i><p>话术：如果确实有紧急任务分配给我，我完全接受加班。但同时我反对无意义的加班，因为加班是某种程度上反映出一个工作效率或工作模式出了问题，也证明了现在的开发模式其实应付不了现在的业务诉求，因此其实对比起无意义的加班我更愿意通过优化方案或者制定出工具来提升工作效率避免加班</p></div><p><strong>上一家公司离职原因</strong></p><div class="note pink icon-padding disabled"><i class="note-icon fab fa-cc-visa"></i><p>话术：是这样的，随着我一直工作，开始买了车，有一定的负担，原来那家公司薪资涨幅体系是有限的，不会有大幅度的调薪，已经支撑不住我的生活诉求了，因为各种各样的负担迫于无奈，我会找一个能给我更高薪酬的公司，那因为贵公司做的业务和我的职业发展方向是匹配的，所以我选择来这边争取这个机会</p></div><p><strong>职业规划</strong><br>踏实制作职业规划<br><strong>你有什么问题</strong><br>问题一： 公司未来两年内的规划是什么？(突出稳定性)<br>问题二： 你了解到同类产品，相比他们，公司业务在业界的核心竞争力是什么(暗示存在感)<br>问题三： 公司对我这个岗位的定位是？能提供我什么资源？(暗示你能解决问题)</p><h3 style="text-align: left;" >结语</h3><p>本文到这里就结束啦，感谢大家耐心看完，希望这篇文章对大家的面试有所帮助，祝大家的薪资upup,找到心仪的公司</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
